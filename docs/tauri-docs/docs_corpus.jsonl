{"id":"build#introduction","doc_id":"build","section_title":"Introduction","doc_title":"build","hierarchy":["build"],"content":"const desktopOnlySupport = [\n  {\n    platform: 'windows',\n    level: 'full',\n    notes: '',\n  },\n  {\n    platform: 'linux',\n    level: 'full',\n    notes: '',\n  },\n  {\n    platform: 'macos',\n    level: 'full',\n    notes: '',\n  },\n  {\n    platform: 'android',\n    level: 'none',\n    notes: '',\n  },\n  {\n    platform: 'ios',\n    level: 'none',\n    notes: '',\n  },\n];\n\n// todo: resolve dir\nconst baseDir = '../plugins-workspace';\nconst pluginDir = '../plugins-workspace/plugins';\n\nasync function main() {\n  const plugins = await readdir(pluginDir);\n\n  const workspaceCargo = TOML.parse(await readFile(path.join(baseDir, 'Cargo.toml'), 'utf-8'));\n  const baseRustVersion = workspaceCargo.workspace.package['rust-version'];\n\n  const tables: Record<string, any> = {};\n  for (const plugin of plugins) {\n    // using Record<string, any> but it's not reaaaally safe, might as well use any\n    const pluginPath = path.join(pluginDir, plugin, 'Cargo.toml');\n    try {\n      const data = TOML.parse(await readFile(pluginPath, 'utf-8'));\n      const pkg = data.package as Record<string, any>;\n\n      const hasSpecificRustVersion = pkg['rust-version'] && !pkg['rust-version'].workspace;\n      const platformsSupport: Record<string, any> = pkg.metadata.platforms.support;\n\n      //  todo: fix platforms case iOS, Windows...\n      const support = Object.entries(platformsSupport).map(([platform, supportInfo]) => ({\n        platform,\n        ...supportInfo,\n      }));\n\n      tables[plugin] = {\n        rustVersion: hasSpecificRustVersion ? pkg['rust-version'] : baseRustVersion,\n        support,\n      };\n    } catch (error) {\n      continue;\n    }\n  }\n\n  tables['system-tray'] = {\n    rustVersion: baseRustVersion,\n    support: desktopOnlySupport,\n  };\n\n  tables['window-customization'] = {\n    rustVersion: baseRustVersion,\n    support: desktopOnlySupport,\n  };\n\n  writeFileSync('../../src/components/plugins/_tableContent.json', JSON.stringify(tables, null, 2));\n}\n\nmain();","tokens_est":490,"tags":["windowing","mobile","configuration"],"src_path":"build.ts","anchors":["introduction"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["tray"],"updated_at":"2025-09-01T10:05:53.076Z"}
{"id":"calling-frontend#introduction","doc_id":"calling-frontend","section_title":"Introduction","doc_title":"Calling the Frontend from Rust","hierarchy":["Calling the Frontend from Rust"],"content":"This document includes guides on how to communicate with your application frontend from your Rust code.\nTo see how to communicate with your Rust code from your frontend, see [Calling Rust from the Frontend].\n\nThe Rust side of your Tauri application can call the frontend by leveraging the Tauri event system,\nusing channels or directly evaluating JavaScript code.","tokens_est":91,"tags":["ipc","events"],"src_path":"calling-frontend.mdx","anchors":["introduction"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.079Z","raw_frontmatter":"title: Calling the Frontend from Rust\r\ni18nReady: true\r"}
{"id":"calling-frontend#event-system","doc_id":"calling-frontend","section_title":"Event System","doc_title":"Calling the Frontend from Rust","hierarchy":["Calling the Frontend from Rust","Event System"],"content":"## Event System\n\nTauri ships a simple event system you can use to have bi-directional communication between Rust and your frontend.\n\nThe event system was designed for situations where small amounts of data need to be streamed\nor you need to implement a multi consumer multi producer pattern (e.g. push notification system).\n\nThe event system is not designed for low latency or high throughput situations.\nSee the [channels section](#channels) for the implementation optimized for streaming data.\n\nThe major differences between a Tauri command and a Tauri event are that events have no strong type support,\nevent payloads are always JSON strings making them not suitable for bigger messages\nand there is no support of the [capabilities] system to fine grain control event data and channels.\n\nThe [AppHandle] and [WebviewWindow] types implement the event system traits [Listener] and [Emitter].\n\nEvents are either global (delivered to all listeners) or webview-specific (only delivered to the webview matching a given label).","tokens_est":256,"tags":["commands","ipc","permissions","windowing","events"],"src_path":"calling-frontend.mdx","anchors":["event-system"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["notification"],"updated_at":"2025-09-01T10:05:53.079Z"}
{"id":"calling-frontend#global-events","doc_id":"calling-frontend","section_title":"Global Events","doc_title":"Calling the Frontend from Rust","hierarchy":["Calling the Frontend from Rust","Event System","Global Events"],"content":"### Global Events\n\nTo trigger a global event you can use the [Emitter#emit] function:\n\n```rust title=\"src-tauri/src/lib.rs\"\nuse tauri::{AppHandle, Emitter};\n\n#[tauri::command]\nfn download(app: AppHandle, url: String) {\n  app.emit(\"download-started\", &url).unwrap();\n  for progress in [1, 15, 50, 80, 100] {\n    app.emit(\"download-progress\", progress).unwrap();\n  }\n  app.emit(\"download-finished\", &url).unwrap();\n}\n```\n\n[NOTE]\n\nGlobal events are delivered to **all** listeners\n:::","tokens_est":120,"tags":["commands","ipc","events","lang:rust","has_code"],"src_path":"calling-frontend.mdx","anchors":["global-events"],"code_languages":["rust"],"version":null,"permissions":[],"config_keys":["app.emit"],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.079Z"}
{"id":"calling-frontend#webview-event","doc_id":"calling-frontend","section_title":"Webview Event","doc_title":"Calling the Frontend from Rust","hierarchy":["Calling the Frontend from Rust","Event System","Webview Event"],"content":"### Webview Event\n\nTo trigger an event to a listener registered by a specific webview you can use the [Emitter#emit_to] function:\n\n```rust title=\"src-tauri/src/lib.rs\"\nuse tauri::{AppHandle, Emitter};\n\n#[tauri::command]\nfn login(app: AppHandle, user: String, password: String) {\n  let authenticated = user == \"tauri-apps\" && password == \"tauri\";\n  let result = if authenticated { \"loggedIn\" } else { \"invalidCredentials\" };\n  app.emit_to(\"login\", \"login-result\", result).unwrap();\n}\n```\n\nIt is also possible to trigger an event to a list of webviews by calling [Emitter#emit_filter].\nIn the following example we emit a open-file event to the main and file-viewer webviews:\n\n```rust title=\"src-tauri/src/lib.rs\"\nuse tauri::{AppHandle, Emitter, EventTarget};\n\n#[tauri::command]\nfn open_file(app: AppHandle, path: std::path::PathBuf) {\n  app.emit_filter(\"open-file\", path, |target| match target {\n    EventTarget::WebviewWindow { label } => label == \"main\" || label == \"file-viewer\",\n    _ => false,\n  }).unwrap();\n}\n```\n\n[NOTE]\n\nWebview-specific events are **not** triggered to regular global event listeners.\nTo listen to **any** event you must use the `listen_any` function instead of `listen`,\nwhich defines the listener to act as a catch-all for emitted events.\n:::","tokens_est":317,"tags":["commands","ipc","windowing","events","lang:rust","has_code"],"src_path":"calling-frontend.mdx","anchors":["webview-event"],"code_languages":["rust"],"version":null,"permissions":[],"config_keys":["app.emit_to","app.emit_filter"],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.079Z"}
{"id":"calling-frontend#event-payload","doc_id":"calling-frontend","section_title":"Event Payload","doc_title":"Calling the Frontend from Rust","hierarchy":["Calling the Frontend from Rust","Event System","Event Payload"],"content":"### Event Payload\n\nThe event payload can be any [serializable][Serialize] type that also implements [Clone].\nLet's enhance the download event example by using an object to emit more information in each event:\n\n```rust title=\"src-tauri/src/lib.rs\"\nuse tauri::{AppHandle, Emitter};\nuse serde::Serialize;\n\n#[derive(Clone, Serialize)]\n#[serde(rename_all = \"camelCase\")]\nstruct DownloadStarted<'a> {\n  url: &'a str,\n  download_id: usize,\n  content_length: usize,\n}\n\n#[derive(Clone, Serialize)]\n#[serde(rename_all = \"camelCase\")]\nstruct DownloadProgress {\n  download_id: usize,\n  chunk_length: usize,\n}\n\n#[derive(Clone, Serialize)]\n#[serde(rename_all = \"camelCase\")]\nstruct DownloadFinished {\n  download_id: usize,\n}\n\n#[tauri::command]\nfn download(app: AppHandle, url: String) {\n  let content_length = 1000;\n  let download_id = 1;\n\n  app.emit(\"download-started\", DownloadStarted {\n    url: &url,\n    download_id,\n    content_length\n  }).unwrap();\n\n  for chunk_length in [15, 150, 35, 500, 300] {\n    app.emit(\"download-progress\", DownloadProgress {\n      download_id,\n      chunk_length,\n    }).unwrap();\n  }\n\n  app.emit(\"download-finished\", DownloadFinished { download_id }).unwrap();\n}\n```","tokens_est":296,"tags":["commands","ipc","events","lang:rust","has_code"],"src_path":"calling-frontend.mdx","anchors":["event-payload"],"code_languages":["rust"],"version":null,"permissions":[],"config_keys":["app.emit"],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.079Z"}
{"id":"calling-frontend#listening-to-events","doc_id":"calling-frontend","section_title":"Listening to Events","doc_title":"Calling the Frontend from Rust","hierarchy":["Calling the Frontend from Rust","Event System","Listening to Events"],"content":"### Listening to Events\n\nTauri provides APIs to listen to events on both the webview and the Rust interfaces.","tokens_est":27,"tags":["ipc","events"],"src_path":"calling-frontend.mdx","anchors":["listening-to-events"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.079Z"}
{"id":"calling-frontend#listening-to-events-on-the-frontend","doc_id":"calling-frontend","section_title":"Listening to Events on the Frontend","doc_title":"Calling the Frontend from Rust","hierarchy":["Calling the Frontend from Rust","Event System","Listening to Events","Listening to Events on the Frontend"],"content":"#### Listening to Events on the Frontend\n\n<FrontendListen />","tokens_est":15,"tags":["ipc","events"],"src_path":"calling-frontend.mdx","anchors":["listening-to-events-on-the-frontend"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.079Z"}
{"id":"calling-frontend#channels","doc_id":"calling-frontend","section_title":"Channels","doc_title":"Calling the Frontend from Rust","hierarchy":["Calling the Frontend from Rust","Channels"],"content":"## Channels\n\nThe event system is designed to be a simple two way communication that is globally available in your application.\nUnder the hood it directly evaluates JavaScript code so it might not be suitable to sending a large amount of data.\n\nChannels are designed to be fast and deliver ordered data. They are used internally for streaming operations\nsuch as download progress, child process output and WebSocket messages.\n\nLet's rewrite our download command example to use channels instead of the event system:\n\n```rust title=\"src-tauri/src/lib.rs\"\nuse tauri::{AppHandle, ipc::Channel};\nuse serde::Serialize;\n\n#[derive(Clone, Serialize)]\n#[serde(rename_all = \"camelCase\", rename_all_fields = \"camelCase\", tag = \"event\", content = \"data\")]\nenum DownloadEvent<'a> {\n  Started {\n    url: &'a str,\n    download_id: usize,\n    content_length: usize,\n  },\n  Progress {\n    download_id: usize,\n    chunk_length: usize,\n  },\n  Finished {\n    download_id: usize,\n  },\n}\n\n#[tauri::command]\nfn download(app: AppHandle, url: String, on_event: Channel<DownloadEvent>) {\n  let content_length = 1000;\n  let download_id = 1;\n\n  on_event.send(DownloadEvent::Started {\n    url: &url,\n    download_id,\n    content_length,\n  }).unwrap();\n\n  for chunk_length in [15, 150, 35, 500, 300] {\n    on_event.send(DownloadEvent::Progress {\n      download_id,\n      chunk_length,\n    }).unwrap();\n  }\n\n  on_event.send(DownloadEvent::Finished { download_id }).unwrap();\n}\n```\n\nWhen calling the download command you must create the channel and provide it as an argument:\n\n```ts\ntype DownloadEvent =\n  | {\n      event: 'started';\n      data: {\n        url: string;\n        downloadId: number;\n        contentLength: number;\n      };\n    }\n  | {\n      event: 'progress';\n      data: {\n        downloadId: number;\n        chunkLength: number;\n      };\n    }\n  | {\n      event: 'finished';\n      data: {\n        downloadId: number;\n      };\n    };\n\nconst onEvent = new Channel<DownloadEvent>();\nonEvent.onmessage = (message) => {\n  console.log(`got download event ${message.event}`);\n};\n\nawait invoke('download', {\n  url: 'https://raw.githubusercontent.com/tauri-apps/tauri/dev/crates/tauri-schema-generator/schemas/config.schema.json',\n  onEvent,\n});\n```","tokens_est":556,"tags":["commands","ipc","streaming","events","lang:rust","lang:ts","has_code"],"src_path":"calling-frontend.mdx","anchors":["channels"],"code_languages":["rust","ts"],"version":null,"permissions":[],"config_keys":[],"commands":["download"],"plugins":["process"],"updated_at":"2025-09-01T10:05:53.079Z"}
{"id":"calling-frontend#evaluating-javascript","doc_id":"calling-frontend","section_title":"Evaluating JavaScript","doc_title":"Calling the Frontend from Rust","hierarchy":["Calling the Frontend from Rust","Evaluating JavaScript"],"content":"## Evaluating JavaScript\n\nTo directly execute any JavaScript code on the webview context you can use the [`WebviewWindow#eval`] function:\n\n```rust title=\"src-tauri/src/lib.rs\"\nuse tauri::Manager;\n\ntauri::Builder::default()\n  .setup(|app| {\n    let webview = app.get_webview_window(\"main\").unwrap();\n    webview.eval(\"console.log('hello from Rust')\")?;\n    Ok(())\n  })\n```\n\nIf the script to be evaluated is not so simple and must use input from Rust objects we recommend using the [serialize-to-javascript] crate.\n\n[`WebviewWindow#eval`]: https://docs.rs/tauri/2.0.0/tauri/webview/struct.WebviewWindow.html#method.eval\n[serialize-to-javascript]: https://docs.rs/serialize-to-javascript/latest/serialize_to_javascript/\n[AppHandle]: https://docs.rs/tauri/2.0.0/tauri/struct.AppHandle.html\n[WebviewWindow]: https://docs.rs/tauri/2.0.0/tauri/webview/struct.WebviewWindow.html\n[Listener]: https://docs.rs/tauri/2.0.0/tauri/trait.Listener.html\n[Emitter]: https://docs.rs/tauri/2.0.0/tauri/trait.Emitter.html\n[Emitter#emit]: https://docs.rs/tauri/2.0.0/tauri/trait.Emitter.html#tymethod.emit\n[Emitter#emit_to]: https://docs.rs/tauri/2.0.0/tauri/trait.Emitter.html#tymethod.emit_to\n[Emitter#emit_filter]: https://docs.rs/tauri/2.0.0/tauri/trait.Emitter.html#tymethod.emit_filter\n[Clone]: https://doc.rust-lang.org/std/clone/trait.Clone.html\n[Serialize]: https://serde.rs/impl-serialize.html\n[Calling Rust from the Frontend]: /develop/calling-rust/\n[capabilities]: /security/capabilities/","tokens_est":370,"tags":["ipc","permissions","windowing","events","lang:rust","has_code"],"src_path":"calling-frontend.mdx","anchors":["evaluating-javascript"],"code_languages":["rust"],"version":null,"permissions":[],"config_keys":["app.get_webview_window"],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.079Z"}
{"id":"calling-rust#introduction","doc_id":"calling-rust","section_title":"Introduction","doc_title":"Calling Rust from the Frontend","hierarchy":["Calling Rust from the Frontend"],"content":"This document includes guides on how to communicate with your Rust code from your application frontend.\nTo see how to communicate with your frontend from your Rust code, see [Calling the Frontend from Rust].\n\nTauri provides a [command](#commands) primitive for reaching Rust functions with type safety,\nalong with an [event system](#event-system) that is more dynamic.","tokens_est":92,"tags":["commands","ipc"],"src_path":"calling-rust.mdx","anchors":["introduction"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.080Z","raw_frontmatter":"title: Calling Rust from the Frontend\r\ni18nReady: true\r"}
{"id":"calling-rust#commands","doc_id":"calling-rust","section_title":"Commands","doc_title":"Calling Rust from the Frontend","hierarchy":["Calling Rust from the Frontend","Commands"],"content":"## Commands\n\nTauri provides a simple yet powerful `command` system for calling Rust functions from your web app.\nCommands can accept arguments and return values. They can also return errors and be `async`.","tokens_est":51,"tags":["commands","ipc"],"src_path":"calling-rust.mdx","anchors":["commands"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.080Z"}
{"id":"calling-rust#basic-example","doc_id":"calling-rust","section_title":"Basic Example","doc_title":"Calling Rust from the Frontend","hierarchy":["Calling Rust from the Frontend","Commands","Basic Example"],"content":"### Basic Example\n\nCommands can be defined in your `src-tauri/src/lib.rs` file.\nTo create a command, just add a function and annotate it with `#[tauri::command]`:\n\n```rust title=\"src-tauri/src/lib.rs\"\n#[tauri::command]\nfn my_custom_command() {\n\tprintln!(\"I was invoked from JavaScript!\");\n}\n```\n\n[NOTE]\n\nCommand names must be unique.\n:::\n\n[NOTE]\n\nCommands defined in the `lib.rs` file cannot be marked as `pub` due to a limitation in the glue code generation.\nYou will see an error like this if you mark it as a public function:\n\n```\nerror[E0255]: the name `__cmd__command_name` is defined multiple times\n  --> src/lib.rs:28:8\n   |\n27 | #[tauri::command]\n   | ----------------- previous definition of the macro `__cmd__command_name` here\n28 | pub fn x() {}\n   |        ^ `__cmd__command_name` reimported here\n   |\n   = note: `__cmd__command_name` must be defined only once in the macro namespace of this module\n```\n\n:::\n\nYou will have to provide a list of your commands to the builder function like so:\n\n```rust title=\"src-tauri/src/lib.rs\" ins={4}\n#[cfg_attr(mobile, tauri::mobile_entry_point)]\npub fn run() {\n\ttauri::Builder::default()\n\t\t.invoke_handler(tauri::generate_handler![my_custom_command])\n\t\t.run(tauri::generate_context!())\n\t\t.expect(\"error while running tauri application\");\n}\n```\n\nNow, you can invoke the command from your JavaScript code:\n\n```javascript\n// When using the Tauri API npm package:\n// When using the Tauri global script (if not using the npm package)\n// Be sure to set `app.withGlobalTauri` in `tauri.conf.json` to true\nconst invoke = window.__TAURI__.core.invoke;\n\n// Invoke the command\ninvoke('my_custom_command');\n```","tokens_est":412,"tags":["commands","windowing","configuration","ipc","lang:rust","lang:javascript","has_code"],"src_path":"calling-rust.mdx","anchors":["basic-example"],"code_languages":["rust","javascript"],"version":null,"permissions":[],"config_keys":["app.withGlobalTauri","window.__TAURI__.core.invoke"],"commands":["my_custom_command"],"plugins":[],"updated_at":"2025-09-01T10:05:53.080Z"}
{"id":"calling-rust#defining-commands-in-a-separate-module","doc_id":"calling-rust","section_title":"Defining Commands in a Separate Module","doc_title":"Calling Rust from the Frontend","hierarchy":["Calling Rust from the Frontend","Commands","Basic Example","Defining Commands in a Separate Module"],"content":"#### Defining Commands in a Separate Module\n\nIf your application defines a lot of components or if they can be grouped,\nyou can define commands in a separate module instead of bloating the `lib.rs` file.\n\nAs an example let's define a command in the `src-tauri/src/commands.rs` file:\n\n```rust title=\"src-tauri/src/commands.rs\"\n#[tauri::command]\npub fn my_custom_command() {\n\tprintln!(\"I was invoked from JavaScript!\");\n}\n```\n\n[NOTE]\n\nWhen defining commands in a separate module they should be marked as `pub`.\n:::\n\n[NOTE]\n\nThe command name is not scoped to the module so they must be unique even between modules.\n:::\n\nIn the `lib.rs` file, define the module and provide the list of your commands accordingly;\n\n```rust title=\"src-tauri/src/lib.rs\" ins={6}\nmod commands;\n\n#[cfg_attr(mobile, tauri::mobile_entry_point)]\npub fn run() {\n\ttauri::Builder::default()\n\t\t.invoke_handler(tauri::generate_handler![commands::my_custom_command])\n\t\t.run(tauri::generate_context!())\n\t\t.expect(\"error while running tauri application\");\n}\n```\n\nNote the `commands::` prefix in the command list, which denotes the full path to the command function.\n\nThe command name in this example is `my_custom_command` so you can still call it by executing `invoke(\"my_custom_command\")`\nin your frontend, the `commands::` prefix is ignored.","tokens_est":327,"tags":["commands","ipc","lang:rust","has_code"],"src_path":"calling-rust.mdx","anchors":["defining-commands-in-a-separate-module"],"code_languages":["rust"],"version":null,"permissions":[],"config_keys":[],"commands":["my_custom_command"],"plugins":[],"updated_at":"2025-09-01T10:05:53.080Z"}
{"id":"calling-rust#wasm","doc_id":"calling-rust","section_title":"WASM","doc_title":"Calling Rust from the Frontend","hierarchy":["Calling Rust from the Frontend","Commands","Basic Example","WASM"],"content":"#### WASM\n\nWhen using a Rust frontend to call `invoke()` without arguments, you will need to adapt your frontend code as below.\nThe reason is that Rust doesn't support optional arguments.\n\n```rust ins={4-5}\n#[wasm_bindgen]\nextern \"C\" {\n    // invoke without arguments\n    #[wasm_bindgen(js_namespace = [\"window\", \"__TAURI__\", \"core\"], js_name = invoke)]\n    async fn invoke_without_args(cmd: &str) -> JsValue;\n\n    // invoke with arguments (default)\n    #[wasm_bindgen(js_namespace = [\"window\", \"__TAURI__\", \"core\"])]\n    async fn invoke(cmd: &str, args: JsValue) -> JsValue;\n\n    // They need to have different names!\n}\n```","tokens_est":156,"tags":["windowing","ipc","commands","lang:rust","has_code"],"src_path":"calling-rust.mdx","anchors":["wasm"],"code_languages":["rust"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.080Z"}
{"id":"calling-rust#passing-arguments","doc_id":"calling-rust","section_title":"Passing Arguments","doc_title":"Calling Rust from the Frontend","hierarchy":["Calling Rust from the Frontend","Commands","Passing Arguments"],"content":"### Passing Arguments\n\nYour command handlers can take arguments:\n\n```rust\n#[tauri::command]\nfn my_custom_command(invoke_message: String) {\n\tprintln!(\"I was invoked from JavaScript, with this message: {}\", invoke_message);\n}\n```\n\nArguments should be passed as a JSON object with camelCase keys:\n\n```javascript\ninvoke('my_custom_command', { invokeMessage: 'Hello!' });\n```\n\n[NOTE]\n\nYou can use `snake_case` for the arguments with the `rename_all` attribute:\n\n```rust\n#[tauri::command(rename_all = \"snake_case\")]\nfn my_custom_command(invoke_message: String) {}\n```\n\n```javascript\ninvoke('my_custom_command', { invoke_message: 'Hello!' });\n```\n\n:::\n\nArguments can be of any type, as long as they implement [`serde::Deserialize`].\n\nThe corresponding JavaScript:\n\n```javascript\ninvoke('my_custom_command', { invoke_message: 'Hello!' });\n```","tokens_est":209,"tags":["commands","ipc","lang:rust","lang:javascript","has_code"],"src_path":"calling-rust.mdx","anchors":["passing-arguments"],"code_languages":["rust","javascript"],"version":null,"permissions":[],"config_keys":[],"commands":["my_custom_command"],"plugins":[],"updated_at":"2025-09-01T10:05:53.080Z"}
{"id":"calling-rust#returning-data","doc_id":"calling-rust","section_title":"Returning Data","doc_title":"Calling Rust from the Frontend","hierarchy":["Calling Rust from the Frontend","Commands","Returning Data"],"content":"### Returning Data\n\nCommand handlers can return data as well:\n\n```rust\n#[tauri::command]\nfn my_custom_command() -> String {\n\t\"Hello from Rust!\".into()\n}\n```\n\nThe `invoke` function returns a promise that resolves with the returned value:\n\n```javascript\ninvoke('my_custom_command').then((message) => console.log(message));\n```\n\nReturned data can be of any type, as long as it implements [`serde::Serialize`].","tokens_est":102,"tags":["commands","ipc","lang:rust","lang:javascript","has_code"],"src_path":"calling-rust.mdx","anchors":["returning-data"],"code_languages":["rust","javascript"],"version":null,"permissions":[],"config_keys":[],"commands":["my_custom_command"],"plugins":[],"updated_at":"2025-09-01T10:05:53.080Z"}
{"id":"calling-rust#returning-array-buffers","doc_id":"calling-rust","section_title":"Returning Array Buffers","doc_title":"Calling Rust from the Frontend","hierarchy":["Calling Rust from the Frontend","Commands","Returning Data","Returning Array Buffers"],"content":"#### Returning Array Buffers\n\nReturn values that implements [`serde::Serialize`] are serialized to JSON when the response is sent to the frontend.\nThis can slow down your application if you try to return a large data such as a file or a download HTTP response.\nTo return array buffers in an optimized way, use [`tauri::ipc::Response`]:\n\n```rust\nuse tauri::ipc::Response;\n#[tauri::command]\nfn read_file() -> Response {\n\tlet data = std::fs::read(\"/path/to/file\").unwrap();\n\ttauri::ipc::Response::new(data)\n}\n```","tokens_est":127,"tags":["commands","ipc","lang:rust","has_code"],"src_path":"calling-rust.mdx","anchors":["returning-array-buffers"],"code_languages":["rust"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["fs","http"],"updated_at":"2025-09-01T10:05:53.080Z"}
{"id":"calling-rust#error-handling","doc_id":"calling-rust","section_title":"Error Handling","doc_title":"Calling Rust from the Frontend","hierarchy":["Calling Rust from the Frontend","Commands","Error Handling"],"content":"### Error Handling\n\nIf your handler could fail and needs to be able to return an error, have the function return a `Result`:\n\n```rust\n#[tauri::command]\nfn login(user: String, password: String) -> Result<String, String> {\n\tif user == \"tauri\" && password == \"tauri\" {\n\t\t// resolve\n\t\tOk(\"logged_in\".to_string())\n\t} else {\n\t\t// reject\n\t\tErr(\"invalid credentials\".to_string())\n\t}\n}\n```\n\nIf the command returns an error, the promise will reject, otherwise, it resolves:\n\n```javascript\ninvoke('login', { user: 'tauri', password: '0j4rijw8=' })\n  .then((message) => console.log(message))\n  .catch((error) => console.error(error));\n```\n\nAs mentioned above, everything returned from commands must implement [`serde::Serialize`], including errors.\nThis can be problematic if you're working with error types from Rust's std library or external crates as most error types do not implement it.\nIn simple scenarios you can use `map_err` to convert these errors to `String`:\n\n```rust\n#[tauri::command]\nfn my_custom_command() -> Result<(), String> {\n\tstd::fs::File::open(\"path/to/file\").map_err(|err| err.to_string())?;\n\t// Return `null` on success\n\tOk(())\n}\n```\n\nSince this is not very idiomatic you may want to create your own error type which implements `serde::Serialize`.\nIn the following example, we use the [`thiserror`] crate to help create the error type.\nIt allows you to turn enums into error types by deriving the `thiserror::Error` trait.\nYou can consult its documentation for more details.\n\n```rust\n// create the error type that represents all errors possible in our program\n#[derive(Debug, thiserror::Error)]\nenum Error {\n\t#[error(transparent)]\n\tIo(#[from] std::io::Error)\n}\n\n// we must manually implement serde::Serialize\nimpl serde::Serialize for Error {\n\tfn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n\twhere\n\t\tS: serde::ser::Serializer,\n\t{\n\t\tserializer.serialize_str(self.to_string().as_ref())\n\t}\n}\n\n#[tauri::command]\nfn my_custom_command() -> Result<(), Error> {\n\t// This will return an error\n\tstd::fs::File::open(\"path/that/does/not/exist\")?;\n\t// Return `null` on success\n\tOk(())\n}\n```\n\nA custom error type has the advantage of making all possible errors explicit so readers can quickly identify what errors can happen.\nThis saves other people (and yourself) enormous amounts of time when reviewing and refactoring code later.<br/>\nIt also gives you full control over the way your error type gets serialized.\nIn the above example, we simply returned the error message as a string, but you could assign each error a code\nso you could more easily map it to a similar looking TypeScript error enum for example:\n\n```rust\n#[derive(Debug, thiserror::Error)]\nenum Error {\n  #[error(transparent)]\n  Io(#[from] std::io::Error),\n  #[error(\"failed to parse as string: {0}\")]\n  Utf8(#[from] std::str::Utf8Error),\n}\n\n#[derive(serde::Serialize)]\n#[serde(tag = \"kind\", content = \"message\")]\n#[serde(rename_all = \"camelCase\")]\nenum ErrorKind {\n  Io(String),\n  Utf8(String),\n}\n\nimpl serde::Serialize for Error {\n  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n  where\n    S: serde::ser::Serializer,\n  {\n    let error_message = self.to_string();\n    let error_kind = match self {\n      Self::Io(_) => ErrorKind::Io(error_message),\n      Self::Utf8(_) => ErrorKind::Utf8(error_message),\n    };\n    error_kind.serialize(serializer)\n  }\n}\n\n#[tauri::command]\nfn read() -> Result<Vec<u8>, Error> {\n  let data = std::fs::read(\"/path/to/file\")?;\n\tOk(data)\n}\n```\n\nIn your frontend you now get a `{ kind: 'io' | 'utf8', message: string }` error object:\n\n```ts\ntype ErrorKind = {\n  kind: 'io' | 'utf8';\n  message: string;\n};\n\ninvoke('read').catch((e: ErrorKind) => {});\n```","tokens_est":922,"tags":["commands","mobile","debugging","ipc","lang:rust","lang:javascript","lang:ts","has_code"],"src_path":"calling-rust.mdx","anchors":["error-handling"],"code_languages":["rust","javascript","ts"],"version":null,"permissions":[],"config_keys":[],"commands":["login","read"],"plugins":["fs"],"updated_at":"2025-09-01T10:05:53.080Z"}
{"id":"calling-rust#async-commands","doc_id":"calling-rust","section_title":"Async Commands","doc_title":"Calling Rust from the Frontend","hierarchy":["Calling Rust from the Frontend","Commands","Async Commands"],"content":"### Async Commands\n\nAsynchronous commands are preferred in Tauri to perform heavy work in a manner that doesn't result in UI freezes or slowdowns.\n\n[NOTE]\n\nAsync commands are executed on a separate async task using [`async_runtime::spawn`].\nCommands without the _async_ keyword are executed on the main thread unless defined with _#[tauri::command(async)]_.\n\n:::\n\n**If your command needs to run asynchronously, simply declare it as `async`.**\n\n[CAUTION]\n\nYou need to be careful when creating asynchronous functions using Tauri.\nCurrently, you cannot simply include borrowed arguments in the signature of an asynchronous function.\nSome common examples of types like this are `&str` and `State<'_, Data>`.\nThis limitation is tracked here: https://github.com/tauri-apps/tauri/issues/2533 and workarounds are shown below.\n\n:::\n\nWhen working with borrowed types, you have to make additional changes. These are your two main options:\n\n**Option 1**: Convert the type, such as `&str` to a similar type that is not borrowed, such as `String`.\nThis may not work for all types, for example `State<'_, Data>`.\n\n_Example:_\n\n```rust\n// Declare the async function using String instead of &str, as &str is borrowed and thus unsupported\n#[tauri::command]\nasync fn my_custom_command(value: String) -> String {\n\t// Call another async function and wait for it to finish\n\tsome_async_function().await;\n\tvalue\n}\n```\n\n**Option 2**: Wrap the return type in a [`Result`]. This one is a bit harder to implement, but works for all types.\n\nUse the return type `Result<a, b>`, replacing `a` with the type you wish to return, or `()` if you wish to return `null`, and replacing `b` with an error type to return if something goes wrong, or `()` if you wish to have no optional error returned. For example:\n\n- `Result<String, ()>` to return a String, and no error.\n- `Result<(), ()>` to return `null`.\n- `Result<bool, Error>` to return a boolean or an error as shown in the [Error Handling](#error-handling) section above.\n\n_Example:_\n\n```rust\n// Return a Result<String, ()> to bypass the borrowing issue\n#[tauri::command]\nasync fn my_custom_command(value: &str) -> Result<String, ()> {\n\t// Call another async function and wait for it to finish\n\tsome_async_function().await;\n\t// Note that the return value must be wrapped in `Ok()` now.\n\tOk(format!(value))\n}\n```","tokens_est":582,"tags":["commands","state","ipc","lang:rust","has_code"],"src_path":"calling-rust.mdx","anchors":["async-commands"],"code_languages":["rust"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.080Z"}
{"id":"calling-rust#invoking-from-javascript","doc_id":"calling-rust","section_title":"Invoking from JavaScript","doc_title":"Calling Rust from the Frontend","hierarchy":["Calling Rust from the Frontend","Commands","Async Commands","Invoking from JavaScript"],"content":"##### Invoking from JavaScript\n\nSince invoking the command from JavaScript already returns a promise, it works just like any other command:\n\n```javascript\ninvoke('my_custom_command', { value: 'Hello, Async!' }).then(() =>\n  console.log('Completed!')\n);\n```","tokens_est":64,"tags":["commands","ipc","lang:javascript","has_code"],"src_path":"calling-rust.mdx","anchors":["invoking-from-javascript"],"code_languages":["javascript"],"version":null,"permissions":[],"config_keys":[],"commands":["my_custom_command"],"plugins":[],"updated_at":"2025-09-01T10:05:53.080Z"}
{"id":"calling-rust#channels","doc_id":"calling-rust","section_title":"Channels","doc_title":"Calling Rust from the Frontend","hierarchy":["Calling Rust from the Frontend","Commands","Channels"],"content":"### Channels\n\nThe Tauri channel is the recommended mechanism for streaming data such as streamed HTTP responses to the frontend.\nThe following example reads a file and notifies the frontend of the progress in chunks of 4096 bytes:\n\n```rust\nuse tokio::io::AsyncReadExt;\n\n#[tauri::command]\nasync fn load_image(path: std::path::PathBuf, reader: tauri::ipc::Channel<&[u8]>) {\n  // for simplicity this example does not include error handling\n  let mut file = tokio::fs::File::open(path).await.unwrap();\n\n  let mut chunk = vec![0; 4096];\n\n  loop {\n    let len = file.read(&mut chunk).await.unwrap();\n    if len == 0 {\n      // Length of zero means end of file.\n      break;\n    }\n    reader.send(&chunk).unwrap();\n  }\n}\n```\n\nSee the [channels documentation] for more information.","tokens_est":193,"tags":["commands","streaming","ipc","lang:rust","has_code"],"src_path":"calling-rust.mdx","anchors":["channels"],"code_languages":["rust"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["fs","http"],"updated_at":"2025-09-01T10:05:53.080Z"}
{"id":"calling-rust#accessing-the-webviewwindow-in-commands","doc_id":"calling-rust","section_title":"Accessing the WebviewWindow in Commands","doc_title":"Calling Rust from the Frontend","hierarchy":["Calling Rust from the Frontend","Commands","Accessing the WebviewWindow in Commands"],"content":"### Accessing the WebviewWindow in Commands\n\nCommands can access the `WebviewWindow` instance that invoked the message:\n\n```rust title=\"src-tauri/src/lib.rs\"\n#[tauri::command]\nasync fn my_custom_command(webview_window: tauri::WebviewWindow) {\n\tprintln!(\"WebviewWindow: {}\", webview_window.label());\n}\n```","tokens_est":76,"tags":["commands","windowing","ipc","lang:rust","has_code"],"src_path":"calling-rust.mdx","anchors":["accessing-the-webviewwindow-in-commands"],"code_languages":["rust"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.080Z"}
{"id":"calling-rust#accessing-an-apphandle-in-commands","doc_id":"calling-rust","section_title":"Accessing an AppHandle in Commands","doc_title":"Calling Rust from the Frontend","hierarchy":["Calling Rust from the Frontend","Commands","Accessing an AppHandle in Commands"],"content":"### Accessing an AppHandle in Commands\n\nCommands can access an `AppHandle` instance:\n\n```rust title=\"src-tauri/src/lib.rs\"\n#[tauri::command]\nasync fn my_custom_command(app_handle: tauri::AppHandle) {\n\tlet app_dir = app_handle.path().app_dir();\n\tuse tauri::GlobalShortcutManager;\n\tapp_handle.global_shortcut_manager().register(\"CTRL + U\", move || {});\n}\n```\n\n[TIP]\n\n`AppHandle` and `WebviewWindow` both take a generic parameter `R: Runtime`,\nwhen the `wry` feature is enabled in `tauri` (which is enabled by default),\nwe default the generic to the `Wry` runtime so you can use it directly,\nbut if you want to use a different runtime, for example the [mock runtime],\nyou need to write your functions like this\n\n```rust title=\"src-tauri/src/lib.rs\" ins=\"<R: Runtime>\" ins=\"<R>\"\nuse tauri::{AppHandle, GlobalShortcutManager, Runtime, WebviewWindow};\n\n#[tauri::command]\nasync fn my_custom_command<R: Runtime>(app_handle: AppHandle<R>, webview_window: WebviewWindow<R>) {\n  let app_dir = app_handle.path().app_dir();\n  app_handle\n    .global_shortcut_manager()\n    .register(\"CTRL + U\", move || {});\n  println!(\"WebviewWindow: {}\", webview_window.label());\n}\n```\n\n:::","tokens_est":290,"tags":["commands","windowing","ipc","lang:rust","has_code"],"src_path":"calling-rust.mdx","anchors":["accessing-an-apphandle-in-commands"],"code_languages":["rust"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.080Z"}
{"id":"calling-rust#accessing-managed-state","doc_id":"calling-rust","section_title":"Accessing Managed State","doc_title":"Calling Rust from the Frontend","hierarchy":["Calling Rust from the Frontend","Commands","Accessing Managed State"],"content":"### Accessing Managed State\n\nTauri can manage state using the `manage` function on `tauri::Builder`.\nThe state can be accessed on a command using `tauri::State`:\n\n```rust title=\"src-tauri/src/lib.rs\"\nstruct MyState(String);\n\n#[tauri::command]\nfn my_custom_command(state: tauri::State<MyState>) {\n\tassert_eq!(state.0 == \"some state value\", true);\n}\n\n#[cfg_attr(mobile, tauri::mobile_entry_point)]\npub fn run() {\n\ttauri::Builder::default()\n\t\t.manage(MyState(\"some state value\".into()))\n\t\t.invoke_handler(tauri::generate_handler![my_custom_command])\n\t\t.run(tauri::generate_context!())\n\t\t.expect(\"error while running tauri application\");\n}\n```","tokens_est":160,"tags":["commands","state","ipc","lang:rust","has_code"],"src_path":"calling-rust.mdx","anchors":["accessing-managed-state"],"code_languages":["rust"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.080Z"}
{"id":"calling-rust#accessing-raw-request","doc_id":"calling-rust","section_title":"Accessing Raw Request","doc_title":"Calling Rust from the Frontend","hierarchy":["Calling Rust from the Frontend","Commands","Accessing Raw Request"],"content":"### Accessing Raw Request\n\nTauri commands can also access the full [`tauri::ipc::Request`] object which includes the raw body payload and the request headers.\n\n```rust\n#[derive(Debug, thiserror::Error)]\nenum Error {\n  #[error(\"unexpected request body\")]\n  RequestBodyMustBeRaw,\n  #[error(\"missing `{0}` header\")]\n  MissingHeader(&'static str),\n}\n\nimpl serde::Serialize for Error {\n  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n  where\n    S: serde::ser::Serializer,\n  {\n    serializer.serialize_str(self.to_string().as_ref())\n  }\n}\n\n#[tauri::command]\nfn upload(request: tauri::ipc::Request) -> Result<(), Error> {\n  let tauri::ipc::InvokeBody::Raw(upload_data) = request.body() else {\n    return Err(Error::RequestBodyMustBeRaw);\n  };\n  let Some(authorization_header) = request.headers().get(\"Authorization\") else {\n    return Err(Error::MissingHeader(\"Authorization\"));\n  };\n\n  // upload...\n\n  Ok(())\n}\n```\n\nIn the frontend you can call invoke() sending a raw request body by providing an ArrayBuffer or Uint8Array on the payload argument,\nand include request headers in the third argument:\n\n```js\nconst data = new Uint8Array([1, 2, 3]);\nawait __TAURI__.core.invoke('upload', data, {\n  headers: {\n    Authorization: 'apikey',\n  },\n});\n```","tokens_est":315,"tags":["commands","debugging","ipc","lang:rust","lang:js","has_code"],"src_path":"calling-rust.mdx","anchors":["accessing-raw-request"],"code_languages":["rust","js"],"version":null,"permissions":[],"config_keys":[],"commands":["upload"],"plugins":[],"updated_at":"2025-09-01T10:05:53.080Z"}
{"id":"calling-rust#creating-multiple-commands","doc_id":"calling-rust","section_title":"Creating Multiple Commands","doc_title":"Calling Rust from the Frontend","hierarchy":["Calling Rust from the Frontend","Commands","Creating Multiple Commands"],"content":"### Creating Multiple Commands\n\nThe `tauri::generate_handler!` macro takes an array of commands. To register\nmultiple commands, you cannot call invoke_handler multiple times. Only the last\ncall will be used. You must pass each command to a single call of\n`tauri::generate_handler!`.\n\n```rust title=\"src-tauri/src/lib.rs\"\n#[tauri::command]\nfn cmd_a() -> String {\n\t\"Command a\"\n}\n#[tauri::command]\nfn cmd_b() -> String {\n\t\"Command b\"\n}\n\n#[cfg_attr(mobile, tauri::mobile_entry_point)]\npub fn run() {\n\ttauri::Builder::default()\n\t\t.invoke_handler(tauri::generate_handler![cmd_a, cmd_b])\n\t\t.run(tauri::generate_context!())\n\t\t.expect(\"error while running tauri application\");\n}\n```","tokens_est":168,"tags":["commands","ipc","lang:rust","has_code"],"src_path":"calling-rust.mdx","anchors":["creating-multiple-commands"],"code_languages":["rust"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.080Z"}
{"id":"calling-rust#complete-example","doc_id":"calling-rust","section_title":"Complete Example","doc_title":"Calling Rust from the Frontend","hierarchy":["Calling Rust from the Frontend","Commands","Complete Example"],"content":"### Complete Example\n\nAny or all of the above features can be combined:\n\n```rust title=\"src-tauri/src/lib.rs\"\nstruct Database;\n\n#[derive(serde::Serialize)]\nstruct CustomResponse {\n\tmessage: String,\n\tother_val: usize,\n}\n\nasync fn some_other_function() -> Option<String> {\n\tSome(\"response\".into())\n}\n\n#[tauri::command]\nasync fn my_custom_command(\n\twindow: tauri::Window,\n\tnumber: usize,\n\tdatabase: tauri::State<'_, Database>,\n) -> Result<CustomResponse, String> {\n\tprintln!(\"Called from {}\", window.label());\n\tlet result: Option<String> = some_other_function().await;\n\tif let Some(message) = result {\n\t\tOk(CustomResponse {\n\t\t\tmessage,\n\t\t\tother_val: 42 + number,\n\t\t})\n\t} else {\n\t\tErr(\"No result\".into())\n\t}\n}\n\n#[cfg_attr(mobile, tauri::mobile_entry_point)]\npub fn run() {\n\ttauri::Builder::default()\n\t\t.manage(Database {})\n\t\t.invoke_handler(tauri::generate_handler![my_custom_command])\n\t\t.run(tauri::generate_context!())\n\t\t.expect(\"error while running tauri application\");\n}\n```\n\n```javascript\n// Invocation from JavaScript\ninvoke('my_custom_command', {\n  number: 42,\n})\n  .then((res) =>\n    console.log(`Message: ${res.message}, Other Val: ${res.other_val}`)\n  )\n  .catch((e) => console.error(e));\n```","tokens_est":300,"tags":["commands","windowing","state","ipc","lang:rust","lang:javascript","has_code"],"src_path":"calling-rust.mdx","anchors":["complete-example"],"code_languages":["rust","javascript"],"version":null,"permissions":[],"config_keys":["window.label"],"commands":["my_custom_command"],"plugins":[],"updated_at":"2025-09-01T10:05:53.080Z"}
{"id":"calling-rust#event-system","doc_id":"calling-rust","section_title":"Event System","doc_title":"Calling Rust from the Frontend","hierarchy":["Calling Rust from the Frontend","Event System"],"content":"## Event System\n\nThe event system is a simpler communication mechanism between your frontend and the Rust.\nUnlike commands, events are not type safe, are always async, cannot return values and only supports JSON payloads.","tokens_est":55,"tags":["commands","ipc"],"src_path":"calling-rust.mdx","anchors":["event-system"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.080Z"}
{"id":"calling-rust#global-events","doc_id":"calling-rust","section_title":"Global Events","doc_title":"Calling Rust from the Frontend","hierarchy":["Calling Rust from the Frontend","Event System","Global Events"],"content":"### Global Events\n\nTo trigger a global event you can use the [event.emit] or the [WebviewWindow#emit] functions:\n\n```js\n// emit(eventName, payload)\nemit('file-selected', '/path/to/file');\n\nconst appWebview = getCurrentWebviewWindow();\nappWebview.emit('route-changed', { url: window.location.href });\n```\n\n[NOTE]\n\nGlobal events are delivered to **all** listeners\n:::","tokens_est":91,"tags":["ipc","windowing","commands","lang:js","has_code"],"src_path":"calling-rust.mdx","anchors":["global-events"],"code_languages":["js"],"version":null,"permissions":[],"config_keys":["window.location.href"],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.080Z"}
{"id":"calling-rust#webview-event","doc_id":"calling-rust","section_title":"Webview Event","doc_title":"Calling Rust from the Frontend","hierarchy":["Calling Rust from the Frontend","Event System","Webview Event"],"content":"### Webview Event\n\nTo trigger an event to a listener registered by a specific webview you can use the [event.emitTo] or the [WebviewWindow#emitTo] functions:\n\n```js\n// emitTo(webviewLabel, eventName, payload)\nemitTo('settings', 'settings-update-requested', {\n  key: 'notification',\n  value: 'all',\n});\n\nconst appWebview = getCurrentWebviewWindow();\nappWebview.emitTo('editor', 'file-changed', {\n  path: '/path/to/file',\n  contents: 'file contents',\n});\n```\n\n[NOTE]\n\nWebview-specific events are **not** triggered to regular global event listeners.\nTo listen to **any** event you must provide the `{ target: { kind: 'Any' } }` option to the [event.listen] function,\nwhich defines the listener to act as a catch-all for emitted events:\n\n```js\nlisten(\n  'state-changed',\n  (event) => {\n    console.log('got state changed event', event);\n  },\n  {\n    target: { kind: 'Any' },\n  }\n);\n```\n\n:::","tokens_est":222,"tags":["ipc","windowing","state","commands","lang:js","has_code"],"src_path":"calling-rust.mdx","anchors":["webview-event"],"code_languages":["js"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["notification"],"updated_at":"2025-09-01T10:05:53.080Z"}
{"id":"calling-rust#listening-to-events","doc_id":"calling-rust","section_title":"Listening to Events","doc_title":"Calling Rust from the Frontend","hierarchy":["Calling Rust from the Frontend","Event System","Listening to Events"],"content":"### Listening to Events\n\n<FrontendListen />\n\nTo learn how to listen to events and emit events from your Rust code, see the [Rust Event System documentation].\n\n[Calling the Frontend from Rust]: /develop/calling-frontend/\n[`async_runtime::spawn`]: https://docs.rs/tauri/2.0.0/tauri/async_runtime/fn.spawn.html\n[`serde::serialize`]: https://docs.serde.rs/serde/trait.Serialize.html\n[`serde::deserialize`]: https://docs.serde.rs/serde/trait.Deserialize.html\n[`tauri::ipc::Response`]: https://docs.rs/tauri/2.0.0/tauri/ipc/struct.Response.html\n[`tauri::ipc::Request`]: https://docs.rs/tauri/2.0.0/tauri/ipc/struct.Request.html\n[`thiserror`]: https://github.com/dtolnay/thiserror\n[`result`]: https://doc.rust-lang.org/std/result/index.html\n[event.emit]: /reference/javascript/api/namespaceevent/#emit\n[event.listen]: /reference/javascript/api/namespaceevent/#listen\n[WebviewWindow#emit]: /reference/javascript/api/namespacewebviewwindow/#emit\n[event.emitTo]: /reference/javascript/api/namespaceevent/#emitto\n[WebviewWindow#emitTo]: /reference/javascript/api/namespacewebviewwindow/#emitto\n[Rust Event System documentation]: /develop/calling-frontend/#event-system\n[channels documentation]: /develop/calling-frontend/#channels\n[Calling Rust from the Frontend]: /develop/calling-rust/\n[mock runtime]: https://docs.rs/tauri/2.0.0/tauri/test/struct.MockRuntime.html","tokens_est":339,"tags":["ipc","windowing","commands"],"src_path":"calling-rust.mdx","anchors":["listening-to-events"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.080Z"}
{"id":"capabilities-for-windows-and-platforms#introduction","doc_id":"capabilities-for-windows-and-platforms","section_title":"Introduction","doc_title":"Capabilities for Different Windows and Platforms","hierarchy":["Capabilities for Different Windows and Platforms"],"content":"import ShowSolution from '@components/ShowSolution.astro'\nThis guide will help you customize the capabilities of your Tauri app.","tokens_est":32,"tags":["permissions"],"src_path":"capabilities-for-windows-and-platforms.mdx","anchors":["introduction"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.083Z","raw_frontmatter":"title: Capabilities for Different Windows and Platforms\r\nsidebar:\r\n  order: 11\r\ni18nReady: true\r"}
{"id":"capabilities-for-windows-and-platforms#content-of-this-guide","doc_id":"capabilities-for-windows-and-platforms","section_title":"Content of this guide","doc_title":"Capabilities for Different Windows and Platforms","hierarchy":["Capabilities for Different Windows and Platforms","Content of this guide"],"content":"## Content of this guide\n\n- Create multiple windows in a Tauri app\n- Use different capabilities for different windows\n- Use platform-specific capabilities","tokens_est":39,"tags":["permissions","windowing"],"src_path":"capabilities-for-windows-and-platforms.mdx","anchors":["content-of-this-guide"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.083Z"}
{"id":"capabilities-for-windows-and-platforms#prerequisites","doc_id":"capabilities-for-windows-and-platforms","section_title":"Prerequisites","doc_title":"Capabilities for Different Windows and Platforms","hierarchy":["Capabilities for Different Windows and Platforms","Prerequisites"],"content":"## Prerequisites\n\nThis exercise is meant to be read after completing [`Using Plugin Permissions`](/learn/security/using-plugin-permissions/).","tokens_est":35,"tags":["permissions"],"src_path":"capabilities-for-windows-and-platforms.mdx","anchors":["prerequisites"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.083Z"}
{"id":"capabilities-for-windows-and-platforms#guide","doc_id":"capabilities-for-windows-and-platforms","section_title":"Guide","doc_title":"Capabilities for Different Windows and Platforms","hierarchy":["Capabilities for Different Windows and Platforms","Guide"],"content":"## Guide\n\n1. ### Create Multiple Windows in a Tauri Application\n\n   Here we create an app with two windows labelled `first` and `second`.\n   There are multiple ways to create windows in your Tauri application.\n\n   #### Create Windows with the Tauri Configuration File\n\n   In the Tauri configuration file, usually named `tauri.conf.json`:\n\n    \n    ```javascript\n      \"productName\": \"multiwindow\",\n      ...\n      \"app\": {\n        \"windows\": [\n          {\n            \"label\": \"first\",\n            \"title\": \"First\",\n            \"width\": 800,\n            \"height\": 600\n          },\n          {\n            \"label\": \"second\",\n            \"title\": \"Second\",\n            \"width\": 800,\n            \"height\": 600\n          }\n        ],\n      },\n      ...\n    }\n    ```\n    \n\n   #### Create Windows Programmatically\n\n    In the Rust code to create a Tauri app:\n\n    \n    ```rust\n    tauri::Builder::default()\n        .invoke_handler(tauri::generate_handler![greet])\n        .setup(|app| {\n            let webview_url = tauri::WebviewUrl::App(\"index.html\".into());\n            // First window\n            tauri::WebviewWindowBuilder::new(app, \"first\", webview_url.clone())\n                .title(\"First\")\n                .build()?;\n            // Second window\n            tauri::WebviewWindowBuilder::new(app, \"second\", webview_url)\n                .title(\"Second\")\n                .build()?;\n            Ok(())\n        })\n        .run(context)\n        .expect(\"error while running tauri application\");\n    ```\n    \n\n2. ### Apply Different Capabilities to Different Windows\n\n    The windows of a Tauri app can use different features or plugins of the Tauri backend.\n    For better security it is recommended to only give the necessary capabilities to each window.\n    We simulate a scenario where the `first` windows uses filesystem and dialog functionalities and `second`\n    only needs dialog functionalities.\n\n    #### Separate capability files per category\n\n    It is recommended to separate the capability files per category of actions they enable.\n\n    \n    JSON files in the `src-tauri/capabilities` will be taken into account for the capability system.\n    Here we separate capabilities related to the filesystem and dialog window into `filesystem.json`\n    and `dialog.json`.\n\n    *filetree of the Tauri project:*\n    ```\n    /src\n    /src-tauri\n      /capabilities\n        filesystem.json\n        dialog.json\n      tauri.conf.json\n    package.json\n    README.md\n    ```\n    \n\n    #### Give filesystem capabilities to the `first` window\n\n    We give the `first` window the capability to have read access to the content of the `$HOME` directory.\n\n    \n    Use the `windows` field in a capability file with one or multiple window labels.\n\n    ```json title=\"filesystem.json\"\n    {\n      \"identifier\": \"fs-read-home\",\n      \"description\": \"Allow access file access to home directory\",\n      \"local\": true,\n      \"windows\": [\"first\"],\n      \"permissions\": [\n        \"fs:allow-home-read\",\n      ]\n    }\n    ```\n    \n\n    #### Give dialog capabilities to the `first` and `second` window\n\n    We give to `first` and `second` windows the capability to create a \"Yes/No\" dialog\n\n    \n    Use the `windows` field in a capability file with one or multiple window labels.\n\n    ```json title=\"dialog.json\"\n    {\n      \"identifier\": \"dialog\",\n      \"description\": \"Allow to open a dialog\",\n      \"local\": true,\n      \"windows\": [\"first\", \"second\"],\n      \"permissions\": [\"dialog:allow-ask\"]\n    }\n    ```\n\n    \n\n3. ### Make Capabilities Platform Dependent\n\n    We now want to customize the capabilities to be active only on certain platforms.\n    We make our filesystem capabilities only active on `linux` and `windows`.\n\n    \n    Use the `platforms` field in a capability file to make it platform-specific.\n\n    ```json title=\"filesystem.json\"\n    {\n      \"identifier\": \"fs-read-home\",\n      \"description\": \"Allow access file access to home directory\",\n      \"local\": true,\n      \"windows\": [\"first\"],\n      \"permissions\": [\n        \"fs:allow-home-read\",\n      ],\n      \"platforms\": [\"linux\", \"windows\"]\n    }\n    ```\n\n    The currently available platforms are `linux`, `windows`, `macos`, `android`, and `ios`.","tokens_est":1050,"tags":["permissions","windowing","mobile","configuration","lang:javascript","lang:rust","lang:json","has_code"],"src_path":"capabilities-for-windows-and-platforms.mdx","anchors":["guide"],"code_languages":["javascript","rust","json"],"version":null,"permissions":["fs:allow-home-read","dialog:allow-ask"],"config_keys":[],"commands":[],"plugins":["fs","dialog"],"updated_at":"2025-09-01T10:05:53.083Z"}
{"id":"capabilities-for-windows-and-platforms#conclusion-and-resources","doc_id":"capabilities-for-windows-and-platforms","section_title":"Conclusion and Resources","doc_title":"Capabilities for Different Windows and Platforms","hierarchy":["Capabilities for Different Windows and Platforms","Conclusion and Resources"],"content":"## Conclusion and Resources\n\nWe have learned how to create multiple windows in a Tauri app and give them specific capabilities. Furthermore these capabilities can also be targeted to certain platforms.\n\nAn example application that used window capabilities can be found in the [`api` example](https://github.com/tauri-apps/tauri/tree/dev/examples/api) of the [Tauri Github repository](https://github.com/tauri-apps/tauri).\nThe fields that can be used in a capability file are listed in the [Capability](/reference/acl/capability/) reference.","tokens_est":135,"tags":["permissions","windowing","resources"],"src_path":"capabilities-for-windows-and-platforms.mdx","anchors":["conclusion-and-resources"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.083Z"}
{"id":"configuration-files#introduction","doc_id":"configuration-files","section_title":"Introduction","doc_title":"Configuration Files","hierarchy":["Configuration Files"],"content":"Since Tauri is a toolkit for building applications there can be many files to configure project settings. Some common files that you may run across are `tauri.conf.json`, `package.json` and `Cargo.toml`. We briefly explain each on this page to help point you in the right direction for which files to modify.","tokens_est":77,"tags":["configuration"],"src_path":"configuration-files.mdx","anchors":["introduction"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.084Z","raw_frontmatter":"title: Configuration Files\r\ni18nReady: true\r"}
{"id":"configuration-files#tauri-config","doc_id":"configuration-files","section_title":"Tauri Config","doc_title":"Configuration Files","hierarchy":["Configuration Files","Tauri Config"],"content":"## Tauri Config\n\nThe Tauri configuration is used to define the source of your Web app, describe your application's metadata, configure bundles, set plugin configurations, modify runtime behavior by configuring windows, tray icons, menus and more.\n\nThis file is used by the Tauri runtime and the Tauri CLI. You can define build settings (such as the [command run before `tauri build`][before-build-command] or [`tauri dev`][before-dev-command] kicks in), set the [name](/reference/config/#productname) and [version of your app](/reference/config/#version), [control the Tauri runtime][appconfig], and [configure plugins].\n\n[TIP]\n\nYou can find all of the options in the [configuration reference].\n:::","tokens_est":175,"tags":["commands","windowing","tray","assets","configuration"],"src_path":"configuration-files.mdx","anchors":["tauri-config"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["cli","tray"],"updated_at":"2025-09-01T10:05:53.084Z"}
{"id":"configuration-files#supported-formats","doc_id":"configuration-files","section_title":"Supported Formats","doc_title":"Configuration Files","hierarchy":["Configuration Files","Tauri Config","Supported Formats"],"content":"### Supported Formats\n\nThe default Tauri config format is JSON. The JSON5 or TOML format can be enabled by adding the `config-json5` or `config-toml` feature flag (respectively) to the `tauri` and `tauri-build` dependencies in `Cargo.toml`.\n\n```toml title=Cargo.toml\n[build-dependencies]\ntauri-build = { version = \"2.0.0\", features = [ \"config-json5\" ] }\n\n[dependencies]\ntauri = { version = \"2.0.0\", features = [  \"config-json5\" ] }\n```\n\nThe structure and values are the same across all formats, however, the formatting should be consistent with the respective file's format:\n\n```json5 title=tauri.conf.json or tauri.conf.json5\n{\n  build: {\n    devUrl: 'http://localhost:3000',\n    // start the dev server\n    beforeDevCommand: 'npm run dev',\n  },\n  bundle: {\n    active: true,\n    icon: ['icons/app.png'],\n  },\n  app: {\n    windows: [\n      {\n        title: 'MyApp',\n      },\n    ],\n  },\n  plugins: {\n    updater: {\n      pubkey: 'updater pub key',\n      endpoints: ['https://my.app.updater/{{target}}/{{current_version}}'],\n    },\n  },\n}\n```\n\n```toml title=Tauri.toml\n[build]\ndev-url = \"http://localhost:3000\"\n# start the dev server\nbefore-dev-command = \"npm run dev\"\n\n[bundle]\nactive = true\nicon = [\"icons/app.png\"]\n\n[[app.windows]]\ntitle = \"MyApp\"\n\n[plugins.updater]\npubkey = \"updater pub key\"\nendpoints = [\"https://my.app.updater/{{target}}/{{current_version}}\"]\n```\n\nNote that JSON5 and TOML supports comments, and TOML can use kebab-case for config names which are more idiomatic. Field names are case-sensitive in all 3 formats.","tokens_est":384,"tags":["commands","windowing","assets","configuration","lang:toml","lang:json5","has_code"],"src_path":"configuration-files.mdx","anchors":["supported-formats"],"code_languages":["toml","json5"],"version":null,"permissions":[],"config_keys":["app.png","app.updater","app.windows","plugins.updater"],"commands":[],"plugins":["http","updater"],"updated_at":"2025-09-01T10:05:53.084Z"}
{"id":"configuration-files#platform-specific-configuration","doc_id":"configuration-files","section_title":"Platform-specific Configuration","doc_title":"Configuration Files","hierarchy":["Configuration Files","Tauri Config","Platform-specific Configuration"],"content":"### Platform-specific Configuration\n\nIn addition to the default configuration file, Tauri can read a platform-specific configuration from:\n\n- `tauri.linux.conf.json` or `Tauri.linux.toml` for Linux\n- `tauri.windows.conf.json` or `Tauri.windows.toml` for Windows\n- `tauri.macos.conf.json` or `Tauri.macos.toml` for macOS\n- `tauri.android.conf.json` or `Tauri.android.toml` for Android\n- `tauri.ios.conf.json` or `Tauri.ios.toml` for iOS\n\nThe platform-specific configuration file gets merged with the main configuration object following the [JSON Merge Patch (RFC 7396)] specification.\n\nFor example, given the following base `tauri.conf.json`:\n\n```json title=tauri.conf.json\n{\n  \"productName\": \"MyApp\",\n  \"bundle\": {\n    \"resources\": [\"./resources\"]\n  },\n  \"plugins\": {\n    \"deep-link\": {}\n  }\n}\n```\n\nAnd the given `tauri.linux.conf.json`:\n\n```json title=tauri.linux.conf.json\n{\n  \"productName\": \"my-app\",\n  \"bundle\": {\n    \"resources\": [\"./linux-assets\"]\n  },\n  \"plugins\": {\n    \"cli\": {\n      \"description\": \"My app\",\n      \"subcommands\": {\n        \"update\": {}\n      }\n    },\n    \"deep-link\": {}\n  }\n}\n```\n\nThe resolved configuration for Linux would be the following object:\n\n```json\n{\n  \"productName\": \"my-app\",\n  \"bundle\": {\n    \"resources\": [\"./linux-assets\"]\n  },\n  \"plugins\": {\n    \"cli\": {\n      \"description\": \"My app\",\n      \"subcommands\": {\n        \"update\": {}\n      }\n    },\n    \"deep-link\": {}\n  }\n}\n```\n\nAdditionally you can provide a configuration to be merged via the CLI, see the following section for more information.","tokens_est":384,"tags":["commands","windowing","mobile","resources","configuration","lang:json","has_code"],"src_path":"configuration-files.mdx","anchors":["platform-specific-configuration"],"code_languages":["json"],"version":null,"permissions":[],"config_keys":["windows.conf.json","windows.toml"],"commands":[],"plugins":["cli"],"updated_at":"2025-09-01T10:05:53.084Z"}
{"id":"configuration-files#extending-the-configuration","doc_id":"configuration-files","section_title":"Extending the Configuration","doc_title":"Configuration Files","hierarchy":["Configuration Files","Tauri Config","Extending the Configuration"],"content":"### Extending the Configuration\n\nThe Tauri CLI allows you to extend the Tauri configuration when running one of the `dev`, `android dev`, `ios dev`, `build`, `android build`, `ios build` or `bundle` commands.\nThe configuration extension can be provided by the `--config` argument either as a raw JSON string or as a path to a JSON file.\nTauri uses the [JSON Merge Patch (RFC 7396)] specification to merge the provided configuration value with the originally resolved configuration object.\n\nThis mechanism can be used to define multiple flavours of your application or have more flexibility when configuring your application bundles.\n\nFor instance to distribute a completely isolated _beta_ application you can use this feature to configure a separate application name and identifier:\n\n```json title=src-tauri/tauri.beta.conf.json\n{\n  \"productName\": \"My App Beta\",\n  \"identifier\": \"com.myorg.myappbeta\"\n}\n```\n\nAnd to distribute this separate _beta_ app you provide this configuration file when building it:","tokens_est":251,"tags":["commands","mobile","configuration","lang:json","has_code"],"src_path":"configuration-files.mdx","anchors":["extending-the-configuration"],"code_languages":["json"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["cli"],"updated_at":"2025-09-01T10:05:53.084Z"}
{"id":"configuration-files#cargotoml","doc_id":"configuration-files","section_title":"`Cargo.toml`","doc_title":"Configuration Files","hierarchy":["Configuration Files","`Cargo.toml`"],"content":"## `Cargo.toml`\n\nCargo's manifest file is used to declare Rust crates your app depends on, metadata about your app, and other Rust-related features. If you do not intend to do backend development using Rust for your app then you may not be modifying it much, but it's important to know that it exists and what it does.\n\nBelow is an example of a barebones `Cargo.toml` file for a Tauri project:\n\n```toml title=Cargo.toml\n[package]\nname = \"app\"\nversion = \"0.1.0\"\ndescription = \"A Tauri App\"\nauthors = [\"you\"]\nlicense = \"\"\nrepository = \"\"\ndefault-run = \"app\"\nedition = \"2021\"\nrust-version = \"1.57\"\n\n[build-dependencies]\ntauri-build = { version = \"2.0.0\" }\n\n[dependencies]\nserde_json = \"1.0\"\nserde = { version = \"1.0\", features = [\"derive\"] }\ntauri = { version = \"2.0.0\", features = [ ] }\n```\n\nThe most important parts to take note of are the `tauri-build` and `tauri` dependencies. Generally, they must both be on the latest minor versions as the Tauri CLI, but this is not strictly required. If you encounter issues while trying to run your app you should check that any Tauri versions (`tauri` and `tauri-cli`) are on the latest versions for their respective minor releases.\n\nCargo version numbers use [Semantic Versioning]. Running `cargo update` in the `src-tauri` folder will pull the latest available Semver-compatible versions of all dependencies. For example, if you specify `2.0.0` as the version for `tauri-build`, Cargo will detect and download version `2.0.0.0` because it is the latest Semver-compatible version available. Tauri will update the major version number whenever a breaking change is introduced, meaning you should always be capable of safely upgrading to the latest minor and patch versions without fear of your code breaking.\n\nIf you want to use a specific crate version you can use exact versions instead by prepending `=` to the version number of the dependency:\n\n```\ntauri-build = { version = \"=2.0.0\" }\n```\n\nAn additional thing to take note of is the `features=[]` portion of the `tauri` dependency. Running `tauri dev` and `tauri build` will automatically manage which features need to be enabled in your project based on the your Tauri configuration. For more information about `tauri` feature flags see the [documentation][tauri Cargo features].\n\nWhen you build your application a `Cargo.lock` file is produced. This file is used primarily for ensuring that the same dependencies are used across machines during development (similar to `yarn.lock`, `pnpm-lock.yaml` or `package-lock.json` in Node.js). It is recommended to commit this file to your source repository so you get consistent builds.\n\nTo learn more about the Cargo manifest file please refer to the [official documentation][cargo-manifest].","tokens_est":683,"tags":["configuration","lang:toml","has_code"],"src_path":"configuration-files.mdx","anchors":["cargotoml"],"code_languages":["toml"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["cli"],"updated_at":"2025-09-01T10:05:53.084Z"}
{"id":"configuration-files#packagejson","doc_id":"configuration-files","section_title":"`package.json`","doc_title":"Configuration Files","hierarchy":["Configuration Files","`package.json`"],"content":"## `package.json`\n\nThis is the package file used by Node.js. If the frontend of your Tauri app is developed using Node.js-based technologies (such as `npm`, `yarn`, or `pnpm`) this file is used to configure the frontend dependencies and scripts.\n\nAn example of a barebones `package.json` file for a Tauri project might look a little something like this:\n\n```json title=package.json\n{\n  \"scripts\": {\n    \"dev\": \"command to start your app development mode\",\n    \"build\": \"command to build your app frontend\",\n    \"tauri\": \"tauri\"\n  },\n  \"dependencies\": {\n    \"@tauri-apps/api\": \"^2.0.0.0\",\n    \"@tauri-apps/cli\": \"^2.0.0.0\"\n  }\n}\n```\n\nIt's common to use the `\"scripts\"` section to store the commands used to launch and build the frontend used by your Tauri application. The above `package.json` file specifies the `dev` command that you can run using `yarn dev` or `npm run dev` to start the frontend framework and the `build` command that you can run using `yarn build` or `npm run build` to build your frontend's Web assets to be added by Tauri in production. The most convenient way to use these scripts is to hook them with the Tauri CLI via the Tauri configuration's [beforeDevCommand][before-dev-command] and [beforeBuildCommand][before-build-command] hooks:\n\n```json title=tauri.conf.json\n{\n  \"build\": {\n    \"beforeDevCommand\": \"yarn dev\",\n    \"beforeBuildCommand\": \"yarn build\"\n  }\n}\n```\n\n[NOTE]\n\nThe `\"tauri\"` script is only needed when using `npm`\n:::\n\nThe dependencies object specifies which dependencies Node.js should download when you run either `yarn`, `pnpm install` or `npm install` (in this case the Tauri CLI and API).\n\nIn addition to the `package.json` file you may see either a `yarn.lock`, `pnpm-lock.yaml` or `package-lock.json` file. These files assist in ensuring that when you download the dependencies later you'll get the exact same versions that you have used during development (similar to `Cargo.lock` in Rust).\n\nTo learn more about the `package.json` file format please refer to the [official documentation][npm-package].\n\n[configuration reference]: /reference/config/\n[before-dev-command]: /reference/config/#beforedevcommand-1\n[before-build-command]: /reference/config/#beforebuildcommand\n[appconfig]: /reference/config/#appconfig\n[configure plugins]: /reference/config/#plugins\n[semantic versioning]: https://semver.org\n[cargo-manifest]: https://doc.rust-lang.org/cargo/reference/manifest.html\n[npm-package]: https://docs.npmjs.com/cli/v8/configuring-npm/package-json\n[tauri Cargo features]: https://docs.rs/tauri/2.0.0/tauri/#cargo-features\n[JSON Merge Patch (RFC 7396)]: https://datatracker.ietf.org/doc/html/rfc7396","tokens_est":663,"tags":["commands","configuration","lang:json","has_code"],"src_path":"configuration-files.mdx","anchors":["packagejson"],"code_languages":["json"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["cli"],"updated_at":"2025-09-01T10:05:53.084Z"}
{"id":"core-permissions#introduction","doc_id":"core-permissions","section_title":"Introduction","doc_title":"Core Permissions","hierarchy":["Core Permissions"],"content":"A list of all permissions that can be used with the core of the Tauri framework.\n\nIf you are looking for permissions to specific Tauri plugins, please refer to the [Plugins section](/plugin/) of the documentation.","tokens_est":53,"tags":["permissions"],"src_path":"core-permissions.mdx","anchors":["introduction"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.085Z","raw_frontmatter":"title: Core Permissions\r\nsidebar:\r\n  order: 4\r\ni18nReady: true\r"}
{"id":"core-permissions#default-permissions","doc_id":"core-permissions","section_title":"Default Permissions","doc_title":"Core Permissions","hierarchy":["Core Permissions","Default Permissions"],"content":"## Default Permissions\n\nThe `core:default` permission in Tauri automatically adds:\n\n- `core:app:default`\n- `core:event:default`\n- `core:image:default`\n- `core:menu:default`\n- `core:path:default`\n- `core:resources:default`\n- `core:tray:default`\n- `core:webview:default`\n- `core:window:default`","tokens_est":73,"tags":["permissions","windowing","resources"],"src_path":"core-permissions.mdx","anchors":["default-permissions"],"code_languages":[],"version":null,"permissions":["core:default","core:app:default","core:event:default","core:image:default","core:menu:default","core:path:default","core:resources:default","core:tray:default","core:webview:default","core:window:default"],"config_keys":[],"commands":[],"plugins":["tray"],"updated_at":"2025-09-01T10:05:53.085Z"}
{"id":"core-permissions#app","doc_id":"core-permissions","section_title":"App","doc_title":"Core Permissions","hierarchy":["Core Permissions","App"],"content":"## App","tokens_est":2,"tags":["permissions"],"src_path":"core-permissions.mdx","anchors":["app"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.085Z"}
{"id":"core-permissions#default-permission","doc_id":"core-permissions","section_title":"Default Permission","doc_title":"Core Permissions","hierarchy":["Core Permissions","App","Default Permission"],"content":"### Default Permission\n\nThe default permission, `core:app:default`, includes the following:\n\n- `allow-version`\n- `allow-name`\n- `allow-tauri-version`","tokens_est":37,"tags":["permissions"],"src_path":"core-permissions.mdx","anchors":["default-permission"],"code_languages":[],"version":null,"permissions":["core:app:default"],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.085Z"}
{"id":"core-permissions#permission-table","doc_id":"core-permissions","section_title":"Permission Table","doc_title":"Core Permissions","hierarchy":["Core Permissions","App","Permission Table"],"content":"### Permission Table\n\n| Identifier                           | Description                                                                 |\n| ------------------------------------ | --------------------------------------------------------------------------- |\n| `core:app:allow-app-hide`            | Enables the `app_hide` command without any pre-configured scope.            |\n| `core:app:deny-app-hide`             | Denies the `app_hide` command without any pre-configured scope.             |\n| `core:app:allow-app-show`            | Enables the `app_show` command without any pre-configured scope.            |\n| `core:app:deny-app-show`             | Denies the `app_show` command without any pre-configured scope.             |\n| `core:app:allow-default-window-icon` | Enables the `default_window_icon` command without any pre-configured scope. |\n| `core:app:deny-default-window-icon`  | Denies the `default_window_icon` command without any pre-configured scope.  |\n| `core:app:allow-name`                | Enables the `name` command without any pre-configured scope.                |\n| `core:app:deny-name`                 | Denies the `name` command without any pre-configured scope.                 |\n| `core:app:allow-set-app-theme`       | Enables the `set_app_theme` command without any pre-configured scope.       |\n| `core:app:deny-set-app-theme`        | Denies the `set_app_theme` command without any pre-configured scope.        |\n| `core:app:allow-tauri-version`       | Enables the `tauri_version` command without any pre-configured scope.       |\n| `core:app:deny-tauri-version`        | Denies the `tauri_version` command without any pre-configured scope.        |\n| `core:app:allow-version`             | Enables the `version` command without any pre-configured scope.             |\n| `core:app:deny-version`              | Denies the `version` command without any pre-configured scope.              |","tokens_est":481,"tags":["commands","permissions","windowing","assets"],"src_path":"core-permissions.mdx","anchors":["permission-table"],"code_languages":[],"version":null,"permissions":["core:app:allow-app-hide","core:app:deny-app-hide","core:app:allow-app-show","core:app:deny-app-show","core:app:allow-default-window-icon","core:app:deny-default-window-icon","core:app:allow-name","core:app:deny-name","core:app:allow-set-app-theme","core:app:deny-set-app-theme","core:app:allow-tauri-version","core:app:deny-tauri-version","core:app:allow-version","core:app:deny-version"],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.085Z"}
{"id":"core-permissions#event","doc_id":"core-permissions","section_title":"Event","doc_title":"Core Permissions","hierarchy":["Core Permissions","Event"],"content":"## Event","tokens_est":2,"tags":["permissions"],"src_path":"core-permissions.mdx","anchors":["event"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.085Z"}
{"id":"core-permissions#default-permission-2","doc_id":"core-permissions","section_title":"Default Permission","doc_title":"Core Permissions","hierarchy":["Core Permissions","Event","Default Permission"],"content":"### Default Permission\n\nThe default permission, `core:event:default`, includes the following:\n\n- `allow-listen`\n- `allow-unlisten`\n- `allow-emit`\n- `allow-emit-to`","tokens_est":41,"tags":["ipc","permissions"],"src_path":"core-permissions.mdx","anchors":["default-permission-2"],"code_languages":[],"version":null,"permissions":["core:event:default"],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.085Z"}
{"id":"core-permissions#permission-table-2","doc_id":"core-permissions","section_title":"Permission Table","doc_title":"Core Permissions","hierarchy":["Core Permissions","Event","Permission Table"],"content":"### Permission Table\n\n| Identifier                  | Description                                                      |\n| --------------------------- | ---------------------------------------------------------------- |\n| `core:event:allow-emit`     | Enables the `emit` command without any pre-configured scope.     |\n| `core:event:deny-emit`      | Denies the `emit` command without any pre-configured scope.      |\n| `core:event:allow-emit-to`  | Enables the `emit_to` command without any pre-configured scope.  |\n| `core:event:deny-emit-to`   | Denies the `emit_to` command without any pre-configured scope.   |\n| `core:event:allow-listen`   | Enables the `listen` command without any pre-configured scope.   |\n| `core:event:deny-listen`    | Denies the `listen` command without any pre-configured scope.    |\n| `core:event:allow-unlisten` | Enables the `unlisten` command without any pre-configured scope. |\n| `core:event:deny-unlisten`  | Denies the `unlisten` command without any pre-configured scope.  |","tokens_est":253,"tags":["commands","ipc","permissions"],"src_path":"core-permissions.mdx","anchors":["permission-table-2"],"code_languages":[],"version":null,"permissions":["core:event:allow-emit","core:event:deny-emit","core:event:allow-emit-to","core:event:deny-emit-to","core:event:allow-listen","core:event:deny-listen","core:event:allow-unlisten","core:event:deny-unlisten"],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.085Z"}
{"id":"core-permissions#image","doc_id":"core-permissions","section_title":"Image","doc_title":"Core Permissions","hierarchy":["Core Permissions","Image"],"content":"## Image","tokens_est":2,"tags":["permissions"],"src_path":"core-permissions.mdx","anchors":["image"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.085Z"}
{"id":"core-permissions#default-permission-3","doc_id":"core-permissions","section_title":"Default Permission","doc_title":"Core Permissions","hierarchy":["Core Permissions","Image","Default Permission"],"content":"### Default Permission\n\nThe default permission, `core:image:default`, includes the following:\n\n- `allow-new`\n- `allow-from-bytes`\n- `allow-from-path`\n- `allow-rgba`\n- `allow-size`","tokens_est":45,"tags":["permissions"],"src_path":"core-permissions.mdx","anchors":["default-permission-3"],"code_languages":[],"version":null,"permissions":["core:image:default"],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.085Z"}
{"id":"core-permissions#permission-table-3","doc_id":"core-permissions","section_title":"Permission Table","doc_title":"Core Permissions","hierarchy":["Core Permissions","Image","Permission Table"],"content":"### Permission Table\n\n| Identifier                    | Description                                                        |\n| ----------------------------- | ------------------------------------------------------------------ |\n| `core:image:allow-from-bytes` | Enables the `from_bytes` command without any pre-configured scope. |\n| `core:image:deny-from-bytes`  | Denies the `from_bytes` command without any pre-configured scope.  |\n| `core:image:allow-from-path`  | Enables the `from_path` command without any pre-configured scope.  |\n| `core:image:deny-from-path`   | Denies the `from_path` command without any pre-configured scope.   |\n| `core:image:allow-new`        | Enables the `new` command without any pre-configured scope.        |\n| `core:image:deny-new`         | Denies the `new` command without any pre-configured scope.         |\n| `core:image:allow-rgba`       | Enables the `rgba` command without any pre-configured scope.       |\n| `core:image:deny-rgba`        | Denies the `rgba` command without any pre-configured scope.        |\n| `core:image:allow-size`       | Enables the `size` command without any pre-configured scope.       |\n| `core:image:deny-size`        | Denies the `size` command without any pre-configured scope.        |","tokens_est":314,"tags":["commands","permissions"],"src_path":"core-permissions.mdx","anchors":["permission-table-3"],"code_languages":[],"version":null,"permissions":["core:image:allow-from-bytes","core:image:deny-from-bytes","core:image:allow-from-path","core:image:deny-from-path","core:image:allow-new","core:image:deny-new","core:image:allow-rgba","core:image:deny-rgba","core:image:allow-size","core:image:deny-size"],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.085Z"}
{"id":"core-permissions#menu","doc_id":"core-permissions","section_title":"Menu","doc_title":"Core Permissions","hierarchy":["Core Permissions","Menu"],"content":"## Menu","tokens_est":2,"tags":["permissions"],"src_path":"core-permissions.mdx","anchors":["menu"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.085Z"}
{"id":"core-permissions#default-permission-4","doc_id":"core-permissions","section_title":"Default Permission","doc_title":"Core Permissions","hierarchy":["Core Permissions","Menu","Default Permission"],"content":"### Default Permission\n\nThe default permission, `core:menu:default`, includes the following:\n\n- `allow-new`\n- `allow-append`\n- `allow-prepend`\n- `allow-insert`\n- `allow-remove`\n- `allow-remove-at`\n- `allow-items`\n- `allow-get`\n- `allow-popup`\n- `allow-create-default`\n- `allow-set-as-app-menu`\n- `allow-set-as-window-menu`\n- `allow-text`\n- `allow-set-text`\n- `allow-is-enabled`\n- `allow-set-enabled`\n- `allow-set-accelerator`\n- `allow-set-as-windows-menu-for-nsapp`\n- `allow-set-as-help-menu-for-nsapp`\n- `allow-is-checked`\n- `allow-set-checked`\n- `allow-set-icon`","tokens_est":141,"tags":["permissions","windowing","assets"],"src_path":"core-permissions.mdx","anchors":["default-permission-4"],"code_languages":[],"version":null,"permissions":["core:menu:default"],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.085Z"}
{"id":"core-permissions#permission-table-4-part-1","doc_id":"core-permissions","section_title":"Permission Table","doc_title":"Core Permissions","hierarchy":["Core Permissions","Menu","Permission Table"],"content":"### Permission Table\n\n| Identifier                                      | Description                                                                           |\n| ----------------------------------------------- | ------------------------------------------------------------------------------------- |\n| `core:menu:allow-append`                        | Enables the `append` command without any pre-configured scope.                        |\n| `core:menu:deny-append`                         | Denies the `append` command without any pre-configured scope.                         |\n| `core:menu:allow-create-default`                | Enables the `create_default` command without any pre-configured scope.                |\n| `core:menu:deny-create-default`                 | Denies the `create_default` command without any pre-configured scope.                 |\n| `core:menu:allow-get`                           | Enables the `get` command without any pre-configured scope.                           |\n| `core:menu:deny-get`                            | Denies the `get` command without any pre-configured scope.                            |\n| `core:menu:allow-insert`                        | Enables the `insert` command without any pre-configured scope.                        |\n| `core:menu:deny-insert`                         | Denies the `insert` command without any pre-configured scope.                         |\n| `core:menu:allow-is-checked`                    | Enables the `is_checked` command without any pre-configured scope.                    |\n| `core:menu:deny-is-checked`                     | Denies the `is_checked` command without any pre-configured scope.                     |\n| `core:menu:allow-is-enabled`                    | Enables the `is_enabled` command without any pre-configured scope.                    |\n| `core:menu:deny-is-enabled`                     | Denies the `is_enabled` command without any pre-configured scope.                     |\n| `core:menu:allow-items`                         | Enables the `items` command without any pre-configured scope.                         |\n| `core:menu:deny-items`                          | Denies the `items` command without any pre-configured scope.                          |\n| `core:menu:allow-new`                           | Enables the `new` command without any pre-configured scope.                           |\n| `core:menu:deny-new`                            | Denies the `new` command without any pre-configured scope.                            |\n| `core:menu:allow-popup`                         | Enables the `popup` command without any pre-configured scope.                         |\n| `core:menu:deny-popup`                          | Denies the `popup` command without any pre-configured scope.                          |\n| `core:menu:allow-prepend`                       | Enables the `prepend` command without any pre-configured scope.                       |\n| `core:menu:deny-prepend`                        | Denies the `prepend` command without any pre-configured scope.                        |\n| `core:menu:allow-remove`                        | Enables the `remove` command without any pre-configured scope.                        |\n| `core:menu:deny-remove`                         | Denies the `remove` command without any pre-configured scope.                         |\n| `core:menu:allow-remove-at`                     | Enables the `remove_at` command without any pre-configured scope.                     |\n| `core:menu:deny-remove-at`                      | Denies the `remove_at` command without any pre-configured scope.                      |\n| `core:menu:allow-set-accelerator`               | Enables the `set_accelerator` command without any pre-configured scope.               |\n| `core:menu:deny-set-accelerator`                | Denies the `set_accelerator` command without any pre-configured scope.                |\n| `core:menu:allow-set-as-app-menu`               | Enables the `set_as_app_menu` command without any pre-configured scope.               |\n| `core:menu:deny-set-as-app-menu`                | Denies the `set_as_app_menu` command without any pre-configured scope.                |\n| `core:menu:allow-set-as-help-menu-for-nsapp`    | Enables the `set_as_help_menu_for_nsapp` command without any pre-configured scope.    |\n| `core:menu:deny-set-as-help-menu-for-nsapp`     | Denies the `set_as_help_menu_for_nsapp` command without any pre-configured scope.     |\n| `core:menu:allow-set-as-window-menu`            | Enables the `set_as_window_menu` command without any pre-configured scope.            |\n| `core:menu:deny-set-as-window-menu`             | Denies the `set_as_window_menu` command without any pre-configured scope.             |\n| `core:menu:allow-set-as-windows-menu-for-nsapp` | Enables the `set_as_windows_menu_for_nsapp` command without any pre-configured scope. |\n| `core:menu:deny-set-as-windows-menu-for-nsapp`  | Denies the `set_as_windows_menu_for_nsapp` command without any pre-configured scope.  |\n| `core:menu:allow-set-checked`                   | Enables the `set_checked` command without any pre-configured scope.                   |\n| `core:menu:deny-set-checked`                    | Denies the `set_checked` command without any pre-configured scope.                    |\n| `core:menu:allow-set-enabled`                   | Enables the `set_enabled` command without any pre-configured scope.                   |\n| `core:menu:deny-set-enabled`                    | Denies the `set_enabled` command without any pre-configured scope.                    |\n| `core:menu:allow-set-icon`                      | Enables the `set_icon` command without any pre-configured scope.                      |\n| `core:menu:deny-set-icon`                       | Denies the `set_icon` command without any pre-configured scope.                       |\n| `core:menu:allow-set-text`                      | Enables the `set_text` command without any pre-configured scope.                      |\n| `core:menu:deny-set-text`                       | Denies the `set_text` command without any pre-configured scope.                       |\n| `core:menu:allow-text`                          | Enables the `text` command without any pre-configured scope.                          |\n| `core:menu:deny-text`                           | Denies the `text` command without any pre-configured scope.                           |","tokens_est":1615,"tags":["commands","permissions","windowing","assets"],"src_path":"core-permissions.mdx","anchors":["permission-table-4"],"code_languages":[],"version":null,"permissions":["core:menu:allow-append","core:menu:deny-append","core:menu:allow-create-default","core:menu:deny-create-default","core:menu:allow-get","core:menu:deny-get","core:menu:allow-insert","core:menu:deny-insert","core:menu:allow-is-checked","core:menu:deny-is-checked","core:menu:allow-is-enabled","core:menu:deny-is-enabled","core:menu:allow-items","core:menu:deny-items","core:menu:allow-new","core:menu:deny-new","core:menu:allow-popup","core:menu:deny-popup","core:menu:allow-prepend","core:menu:deny-prepend","core:menu:allow-remove","core:menu:deny-remove","core:menu:allow-remove-at","core:menu:deny-remove-at","core:menu:allow-set-accelerator","core:menu:deny-set-accelerator","core:menu:allow-set-as-app-menu","core:menu:deny-set-as-app-menu","core:menu:allow-set-as-help-menu-for-nsapp","core:menu:deny-set-as-help-menu-for-nsapp","core:menu:allow-set-as-window-menu","core:menu:deny-set-as-window-menu","core:menu:allow-set-as-windows-menu-for-nsapp","core:menu:deny-set-as-windows-menu-for-nsapp","core:menu:allow-set-checked","core:menu:deny-set-checked","core:menu:allow-set-enabled","core:menu:deny-set-enabled","core:menu:allow-set-icon","core:menu:deny-set-icon","core:menu:allow-set-text","core:menu:deny-set-text","core:menu:allow-text","core:menu:deny-text"],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.085Z","part_index":1,"part_total":1}
{"id":"core-permissions#path","doc_id":"core-permissions","section_title":"Path","doc_title":"Core Permissions","hierarchy":["Core Permissions","Path"],"content":"## Path","tokens_est":2,"tags":["permissions"],"src_path":"core-permissions.mdx","anchors":["path"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.085Z"}
{"id":"core-permissions#default-permission-5","doc_id":"core-permissions","section_title":"Default Permission","doc_title":"Core Permissions","hierarchy":["Core Permissions","Path","Default Permission"],"content":"### Default Permission\n\nThe default permission, `core:path:default`, includes the following:\n\n- `allow-resolve-directory`\n- `allow-resolve`\n- `allow-normalize`\n- `allow-join`\n- `allow-dirname`\n- `allow-extname`\n- `allow-basename`\n- `allow-is-absolute`","tokens_est":63,"tags":["permissions"],"src_path":"core-permissions.mdx","anchors":["default-permission-5"],"code_languages":[],"version":null,"permissions":["core:path:default"],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.085Z"}
{"id":"core-permissions#permission-table-5","doc_id":"core-permissions","section_title":"Permission Table","doc_title":"Core Permissions","hierarchy":["Core Permissions","Path","Permission Table"],"content":"### Permission Table\n\n| Identifier                          | Description                                                               |\n| ----------------------------------- | ------------------------------------------------------------------------- |\n| `core:path:allow-basename`          | Enables the `basename` command without any pre-configured scope.          |\n| `core:path:deny-basename`           | Denies the `basename` command without any pre-configured scope.           |\n| `core:path:allow-dirname`           | Enables the `dirname` command without any pre-configured scope.           |\n| `core:path:deny-dirname`            | Denies the `dirname` command without any pre-configured scope.            |\n| `core:path:allow-extname`           | Enables the `extname` command without any pre-configured scope.           |\n| `core:path:deny-extname`            | Denies the `extname` command without any pre-configured scope.            |\n| `core:path:allow-is-absolute`       | Enables the `is_absolute` command without any pre-configured scope.       |\n| `core:path:deny-is-absolute`        | Denies the `is_absolute` command without any pre-configured scope.        |\n| `core:path:allow-join`              | Enables the `join` command without any pre-configured scope.              |\n| `core:path:deny-join`               | Denies the `join` command without any pre-configured scope.               |\n| `core:path:allow-normalize`         | Enables the `normalize` command without any pre-configured scope.         |\n| `core:path:deny-normalize`          | Denies the `normalize` command without any pre-configured scope.          |\n| `core:path:allow-resolve`           | Enables the `resolve` command without any pre-configured scope.           |\n| `core:path:deny-resolve`            | Denies the `resolve` command without any pre-configured scope.            |\n| `core:path:allow-resolve-directory` | Enables the `resolve_directory` command without any pre-configured scope. |\n| `core:path:deny-resolve-directory`  | Denies the `resolve_directory` command without any pre-configured scope.  |","tokens_est":527,"tags":["commands","permissions"],"src_path":"core-permissions.mdx","anchors":["permission-table-5"],"code_languages":[],"version":null,"permissions":["core:path:allow-basename","core:path:deny-basename","core:path:allow-dirname","core:path:deny-dirname","core:path:allow-extname","core:path:deny-extname","core:path:allow-is-absolute","core:path:deny-is-absolute","core:path:allow-join","core:path:deny-join","core:path:allow-normalize","core:path:deny-normalize","core:path:allow-resolve","core:path:deny-resolve","core:path:allow-resolve-directory","core:path:deny-resolve-directory"],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.085Z"}
{"id":"core-permissions#resources","doc_id":"core-permissions","section_title":"Resources","doc_title":"Core Permissions","hierarchy":["Core Permissions","Resources"],"content":"## Resources","tokens_est":3,"tags":["resources","permissions"],"src_path":"core-permissions.mdx","anchors":["resources"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.085Z"}
{"id":"core-permissions#default-permission-6","doc_id":"core-permissions","section_title":"Default Permission","doc_title":"Core Permissions","hierarchy":["Core Permissions","Resources","Default Permission"],"content":"### Default Permission\n\nThe default permission, `core:resources:default`, includes the following:\n\n- `allow-close`","tokens_est":29,"tags":["permissions","resources"],"src_path":"core-permissions.mdx","anchors":["default-permission-6"],"code_languages":[],"version":null,"permissions":["core:resources:default"],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.085Z"}
{"id":"core-permissions#permission-table-6","doc_id":"core-permissions","section_title":"Permission Table","doc_title":"Core Permissions","hierarchy":["Core Permissions","Resources","Permission Table"],"content":"### Permission Table\n\n| Identifier                   | Description                                                   |\n| ---------------------------- | ------------------------------------------------------------- |\n| `core:resources:allow-close` | Enables the `close` command without any pre-configured scope. |\n| `core:resources:deny-close`  | Denies the `close` command without any pre-configured scope.  |","tokens_est":102,"tags":["commands","permissions","resources"],"src_path":"core-permissions.mdx","anchors":["permission-table-6"],"code_languages":[],"version":null,"permissions":["core:resources:allow-close","core:resources:deny-close"],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.085Z"}
{"id":"core-permissions#tray","doc_id":"core-permissions","section_title":"Tray","doc_title":"Core Permissions","hierarchy":["Core Permissions","Tray"],"content":"## Tray","tokens_est":2,"tags":["permissions"],"src_path":"core-permissions.mdx","anchors":["tray"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["tray"],"updated_at":"2025-09-01T10:05:53.085Z"}
{"id":"core-permissions#default-permission-7","doc_id":"core-permissions","section_title":"Default Permission","doc_title":"Core Permissions","hierarchy":["Core Permissions","Tray","Default Permission"],"content":"### Default Permission\n\nThe default permission, `core:tray:default`, includes the following:\n\n- `allow-new`\n- `allow-get-by-id`\n- `allow-remove-by-id`\n- `allow-set-icon`\n- `allow-set-menu`\n- `allow-set-tooltip`\n- `allow-set-title`\n- `allow-set-visible`\n- `allow-set-temp-dir-path`\n- `allow-set-icon-as-template`\n- `allow-set-show-menu-on-left-click`","tokens_est":87,"tags":["permissions","assets"],"src_path":"core-permissions.mdx","anchors":["default-permission-7"],"code_languages":[],"version":null,"permissions":["core:tray:default"],"config_keys":[],"commands":[],"plugins":["tray"],"updated_at":"2025-09-01T10:05:53.085Z"}
{"id":"core-permissions#permission-table-7","doc_id":"core-permissions","section_title":"Permission Table","doc_title":"Core Permissions","hierarchy":["Core Permissions","Tray","Permission Table"],"content":"### Permission Table\n\n| Identifier                                    | Description                                                                         |\n| --------------------------------------------- | ----------------------------------------------------------------------------------- |\n| `core:tray:allow-get-by-id`                   | Enables the `get_by_id` command without any pre-configured scope.                   |\n| `core:tray:deny-get-by-id`                    | Denies the `get_by_id` command without any pre-configured scope.                    |\n| `core:tray:allow-new`                         | Enables the `new` command without any pre-configured scope.                         |\n| `core:tray:deny-new`                          | Denies the `new` command without any pre-configured scope.                          |\n| `core:tray:allow-remove-by-id`                | Enables the `remove_by_id` command without any pre-configured scope.                |\n| `core:tray:deny-remove-by-id`                 | Denies the `remove_by_id` command without any pre-configured scope.                 |\n| `core:tray:allow-set-icon`                    | Enables the `set_icon` command without any pre-configured scope.                    |\n| `core:tray:deny-set-icon`                     | Denies the `set_icon` command without any pre-configured scope.                     |\n| `core:tray:allow-set-icon-as-template`        | Enables the `set_icon_as_template` command without any pre-configured scope.        |\n| `core:tray:deny-set-icon-as-template`         | Denies the `set_icon_as_template` command without any pre-configured scope.         |\n| `core:tray:allow-set-menu`                    | Enables the `set_menu` command without any pre-configured scope.                    |\n| `core:tray:deny-set-menu`                     | Denies the `set_menu` command without any pre-configured scope.                     |\n| `core:tray:allow-set-show-menu-on-left-click` | Enables the `set_show_menu_on_left_click` command without any pre-configured scope. |\n| `core:tray:deny-set-show-menu-on-left-click`  | Denies the `set_show_menu_on_left_click` command without any pre-configured scope.  |\n| `core:tray:allow-set-temp-dir-path`           | Enables the `set_temp_dir_path` command without any pre-configured scope.           |\n| `core:tray:deny-set-temp-dir-path`            | Denies the `set_temp_dir_path` command without any pre-configured scope.            |\n| `core:tray:allow-set-title`                   | Enables the `set_title` command without any pre-configured scope.                   |\n| `core:tray:deny-set-title`                    | Denies the `set_title` command without any pre-configured scope.                    |\n| `core:tray:allow-set-tooltip`                 | Enables the `set_tooltip` command without any pre-configured scope.                 |\n| `core:tray:deny-set-tooltip`                  | Denies the `set_tooltip` command without any pre-configured scope.                  |\n| `core:tray:allow-set-visible`                 | Enables the `set_visible` command without any pre-configured scope.                 |\n| `core:tray:deny-set-visible`                  | Denies the `set_visible` command without any pre-configured scope.                  |","tokens_est":821,"tags":["commands","permissions","assets"],"src_path":"core-permissions.mdx","anchors":["permission-table-7"],"code_languages":[],"version":null,"permissions":["core:tray:allow-get-by-id","core:tray:deny-get-by-id","core:tray:allow-new","core:tray:deny-new","core:tray:allow-remove-by-id","core:tray:deny-remove-by-id","core:tray:allow-set-icon","core:tray:deny-set-icon","core:tray:allow-set-icon-as-template","core:tray:deny-set-icon-as-template","core:tray:allow-set-menu","core:tray:deny-set-menu","core:tray:allow-set-show-menu-on-left-click","core:tray:deny-set-show-menu-on-left-click","core:tray:allow-set-temp-dir-path","core:tray:deny-set-temp-dir-path","core:tray:allow-set-title","core:tray:deny-set-title","core:tray:allow-set-tooltip","core:tray:deny-set-tooltip","core:tray:allow-set-visible","core:tray:deny-set-visible"],"config_keys":[],"commands":[],"plugins":["tray"],"updated_at":"2025-09-01T10:05:53.085Z"}
{"id":"core-permissions#webview","doc_id":"core-permissions","section_title":"Webview","doc_title":"Core Permissions","hierarchy":["Core Permissions","Webview"],"content":"## Webview","tokens_est":3,"tags":["permissions"],"src_path":"core-permissions.mdx","anchors":["webview"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.085Z"}
{"id":"core-permissions#default-permission-8","doc_id":"core-permissions","section_title":"Default Permission","doc_title":"Core Permissions","hierarchy":["Core Permissions","Webview","Default Permission"],"content":"### Default Permission\n\nThe default permission, `core:webview:default`, includes the following:\n\n- `allow-get-all-webviews`\n- `allow-webview-position`\n- `allow-webview-size`\n- `allow-internal-toggle-devtools`","tokens_est":52,"tags":["permissions"],"src_path":"core-permissions.mdx","anchors":["default-permission-8"],"code_languages":[],"version":null,"permissions":["core:webview:default"],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.085Z"}
{"id":"core-permissions#permission-table-8","doc_id":"core-permissions","section_title":"Permission Table","doc_title":"Core Permissions","hierarchy":["Core Permissions","Webview","Permission Table"],"content":"### Permission Table\n\n| Identifier                                    | Description                                                                      |\n| --------------------------------------------- | -------------------------------------------------------------------------------- |\n| `core:webview:allow-clear-all-browsing-data`  | Enables the `clear_all_browsing_data` command without any pre-configured scope.  |\n| `core:webview:deny-clear-all-browsing-data`   | Denies the `clear_all_browsing_data` command without any pre-configured scope.   |\n| `core:webview:allow-create-webview`           | Enables the `create_webview` command without any pre-configured scope.           |\n| `core:webview:deny-create-webview`            | Denies the `create_webview` command without any pre-configured scope.            |\n| `core:webview:allow-create-webview-window`    | Enables the `create_webview_window` command without any pre-configured scope.    |\n| `core:webview:deny-create-webview-window`     | Denies the `create_webview_window` command without any pre-configured scope.     |\n| `core:webview:allow-get-all-webviews`         | Enables the `get_all_webviews` command without any pre-configured scope.         |\n| `core:webview:deny-get-all-webviews`          | Denies the `get_all_webviews` command without any pre-configured scope.          |\n| `core:webview:allow-internal-toggle-devtools` | Enables the `internal_toggle_devtools` command without any pre-configured scope. |\n| `core:webview:deny-internal-toggle-devtools`  | Denies the `internal_toggle_devtools` command without any pre-configured scope.  |\n| `core:webview:allow-print`                    | Enables the `print` command without any pre-configured scope.                    |\n| `core:webview:deny-print`                     | Denies the `print` command without any pre-configured scope.                     |\n| `core:webview:allow-reparent`                 | Enables the `reparent` command without any pre-configured scope.                 |\n| `core:webview:deny-reparent`                  | Denies the `reparent` command without any pre-configured scope.                  |\n| `core:webview:allow-set-webview-focus`        | Enables the `set_webview_focus` command without any pre-configured scope.        |\n| `core:webview:deny-set-webview-focus`         | Denies the `set_webview_focus` command without any pre-configured scope.         |\n| `core:webview:allow-set-webview-position`     | Enables the `set_webview_position` command without any pre-configured scope.     |\n| `core:webview:deny-set-webview-position`      | Denies the `set_webview_position` command without any pre-configured scope.      |\n| `core:webview:allow-set-webview-size`         | Enables the `set_webview_size` command without any pre-configured scope.         |\n| `core:webview:deny-set-webview-size`          | Denies the `set_webview_size` command without any pre-configured scope.          |\n| `core:webview:allow-set-webview-zoom`         | Enables the `set_webview_zoom` command without any pre-configured scope.         |\n| `core:webview:deny-set-webview-zoom`          | Denies the `set_webview_zoom` command without any pre-configured scope.          |\n| `core:webview:allow-webview-close`            | Enables the `webview_close` command without any pre-configured scope.            |\n| `core:webview:deny-webview-close`             | Denies the `webview_close` command without any pre-configured scope.             |\n| `core:webview:allow-webview-hide`             | Enables the `webview_hide` command without any pre-configured scope.             |\n| `core:webview:deny-webview-hide`              | Denies the `webview_hide` command without any pre-configured scope.              |\n| `core:webview:allow-webview-position`         | Enables the `webview_position` command without any pre-configured scope.         |\n| `core:webview:deny-webview-position`          | Denies the `webview_position` command without any pre-configured scope.          |\n| `core:webview:allow-webview-show`             | Enables the `webview_show` command without any pre-configured scope.             |\n| `core:webview:deny-webview-show`              | Denies the `webview_show` command without any pre-configured scope.              |\n| `core:webview:allow-webview-size`             | Enables the `webview_size` command without any pre-configured scope.             |\n| `core:webview:deny-webview-size`              | Denies the `webview_size` command without any pre-configured scope.              |","tokens_est":1136,"tags":["commands","permissions","windowing"],"src_path":"core-permissions.mdx","anchors":["permission-table-8"],"code_languages":[],"version":null,"permissions":["core:webview:allow-clear-all-browsing-data","core:webview:deny-clear-all-browsing-data","core:webview:allow-create-webview","core:webview:deny-create-webview","core:webview:allow-create-webview-window","core:webview:deny-create-webview-window","core:webview:allow-get-all-webviews","core:webview:deny-get-all-webviews","core:webview:allow-internal-toggle-devtools","core:webview:deny-internal-toggle-devtools","core:webview:allow-print","core:webview:deny-print","core:webview:allow-reparent","core:webview:deny-reparent","core:webview:allow-set-webview-focus","core:webview:deny-set-webview-focus","core:webview:allow-set-webview-position","core:webview:deny-set-webview-position","core:webview:allow-set-webview-size","core:webview:deny-set-webview-size","core:webview:allow-set-webview-zoom","core:webview:deny-set-webview-zoom","core:webview:allow-webview-close","core:webview:deny-webview-close","core:webview:allow-webview-hide","core:webview:deny-webview-hide","core:webview:allow-webview-position","core:webview:deny-webview-position","core:webview:allow-webview-show","core:webview:deny-webview-show","core:webview:allow-webview-size","core:webview:deny-webview-size"],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.085Z"}
{"id":"core-permissions#window","doc_id":"core-permissions","section_title":"Window","doc_title":"Core Permissions","hierarchy":["Core Permissions","Window"],"content":"## Window","tokens_est":2,"tags":["windowing","permissions"],"src_path":"core-permissions.mdx","anchors":["window"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.085Z"}
{"id":"core-permissions#default-permission-9","doc_id":"core-permissions","section_title":"Default Permission","doc_title":"Core Permissions","hierarchy":["Core Permissions","Window","Default Permission"],"content":"### Default Permission\n\nThe default permission, `core:window:default`, includes the following:\n\n- `allow-get-all-windows`\n- `allow-scale-factor`\n- `allow-inner-position`\n- `allow-outer-position`\n- `allow-inner-size`\n- `allow-outer-size`\n- `allow-is-fullscreen`\n- `allow-is-minimized`\n- `allow-is-maximized`\n- `allow-is-focused`\n- `allow-is-decorated`\n- `allow-is-resizable`\n- `allow-is-maximizable`\n- `allow-is-minimizable`\n- `allow-is-closable`\n- `allow-is-visible`\n- `allow-is-enabled`\n- `allow-title`\n- `allow-current-monitor`\n- `allow-primary-monitor`\n- `allow-monitor-from-point`\n- `allow-available-monitors`\n- `allow-cursor-position`\n- `allow-theme`\n- `allow-internal-toggle-maximize`","tokens_est":173,"tags":["permissions","windowing"],"src_path":"core-permissions.mdx","anchors":["default-permission-9"],"code_languages":[],"version":null,"permissions":["core:window:default"],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.085Z"}
{"id":"core-permissions#permission-table-9-part-1","doc_id":"core-permissions","section_title":"Permission Table","doc_title":"Core Permissions","hierarchy":["Core Permissions","Window","Permission Table"],"content":"### Permission Table\n\n| Identifier                                        | Description                                                                           |\n| ------------------------------------------------- | ------------------------------------------------------------------------------------- |\n| `core:window:allow-available-monitors`            | Enables the `available_monitors` command without any pre-configured scope.            |\n| `core:window:deny-available-monitors`             | Denies the `available_monitors` command without any pre-configured scope.             |\n| `core:window:allow-center`                        | Enables the `center` command without any pre-configured scope.                        |\n| `core:window:deny-center`                         | Denies the `center` command without any pre-configured scope.                         |\n| `core:window:allow-close`                         | Enables the `close` command without any pre-configured scope.                         |\n| `core:window:deny-close`                          | Denies the `close` command without any pre-configured scope.                          |\n| `core:window:allow-create`                        | Enables the `create` command without any pre-configured scope.                        |\n| `core:window:deny-create`                         | Denies the `create` command without any pre-configured scope.                         |\n| `core:window:allow-current-monitor`               | Enables the `current_monitor` command without any pre-configured scope.               |\n| `core:window:deny-current-monitor`                | Denies the `current_monitor` command without any pre-configured scope.                |\n| `core:window:allow-cursor-position`               | Enables the `cursor_position` command without any pre-configured scope.               |\n| `core:window:deny-cursor-position`                | Denies the `cursor_position` command without any pre-configured scope.                |\n| `core:window:allow-destroy`                       | Enables the `destroy` command without any pre-configured scope.                       |\n| `core:window:deny-destroy`                        | Denies the `destroy` command without any pre-configured scope.                        |\n| `core:window:allow-get-all-windows`               | Enables the `get_all_windows` command without any pre-configured scope.               |\n| `core:window:deny-get-all-windows`                | Denies the `get_all_windows` command without any pre-configured scope.                |\n| `core:window:allow-hide`                          | Enables the `hide` command without any pre-configured scope.                          |\n| `core:window:deny-hide`                           | Denies the `hide` command without any pre-configured scope.                           |\n| `core:window:allow-inner-position`                | Enables the `inner_position` command without any pre-configured scope.                |\n| `core:window:deny-inner-position`                 | Denies the `inner_position` command without any pre-configured scope.                 |\n| `core:window:allow-inner-size`                    | Enables the `inner_size` command without any pre-configured scope.                    |\n| `core:window:deny-inner-size`                     | Denies the `inner_size` command without any pre-configured scope.                     |\n| `core:window:allow-internal-toggle-maximize`      | Enables the `internal_toggle_maximize` command without any pre-configured scope.      |\n| `core:window:deny-internal-toggle-maximize`       | Denies the `internal_toggle_maximize` command without any pre-configured scope.       |\n| `core:window:allow-is-closable`                   | Enables the `is_closable` command without any pre-configured scope.                   |\n| `core:window:deny-is-closable`                    | Denies the `is_closable` command without any pre-configured scope.                    |\n| `core:window:allow-is-decorated`                  | Enables the `is_decorated` command without any pre-configured scope.                  |\n| `core:window:deny-is-decorated`                   | Denies the `is_decorated` command without any pre-configured scope.                   |\n| `core:window:allow-is-enabled`                    | Enables the `is_enabled` command without any pre-configured scope.                    |\n| `core:window:deny-is-enabled`                     | Denies the `is_enabled` command without any pre-configured scope.                     |\n| `core:window:allow-is-focused`                    | Enables the `is_focused` command without any pre-configured scope.                    |\n| `core:window:deny-is-focused`                     | Denies the `is_focused` command without any pre-configured scope.                     |\n| `core:window:allow-is-fullscreen`                 | Enables the `is_fullscreen` command without any pre-configured scope.                 |\n| `core:window:deny-is-fullscreen`                  | Denies the `is_fullscreen` command without any pre-configured scope.                  |\n| `core:window:allow-is-maximizable`                | Enables the `is_maximizable` command without any pre-configured scope.                |\n| `core:window:deny-is-maximizable`                 | Denies the `is_maximizable` command without any pre-configured scope.                 |\n| `core:window:allow-is-maximized`                  | Enables the `is_maximized` command without any pre-configured scope.                  |\n| `core:window:deny-is-maximized`                   | Denies the `is_maximized` command without any pre-configured scope.                   |\n| `core:window:allow-is-minimizable`                | Enables the `is_minimizable` command without any pre-configured scope.                |\n| `core:window:deny-is-minimizable`                 | Denies the `is_minimizable` command without any pre-configured scope.                 |\n| `core:window:allow-is-minimized`                  | Enables the `is_minimized` command without any pre-configured scope.                  |\n| `core:window:deny-is-minimized`                   | Denies the `is_minimized` command without any pre-configured scope.                   |\n| `core:window:allow-is-resizable`                  | Enables the `is_resizable` command without any pre-configured scope.                  |\n| `core:window:deny-is-resizable`                   | Denies the `is_resizable` command without any pre-configured scope.                   |\n| `core:window:allow-is-visible`                    | Enables the `is_visible` command without any pre-configured scope.                    |\n| `core:window:deny-is-visible`                     | Denies the `is_visible` command without any pre-configured scope.                     |\n| `core:window:allow-maximize`                      | Enables the `maximize` command without any pre-configured scope.                      |\n| `core:window:deny-maximize`                       | Denies the `maximize` command without any pre-configured scope.                       |\n| `core:window:allow-minimize`                      | Enables the `minimize` command without any pre-configured scope.                      |\n| `core:window:deny-minimize`                       | Denies the `minimize` command without any pre-configured scope.                       |\n| `core:window:allow-monitor-from-point`            | Enables the `monitor_from_point` command without any pre-configured scope.            |\n| `core:window:deny-monitor-from-point`             | Denies the `monitor_from_point` command without any pre-configured scope.             |\n| `core:window:allow-outer-position`                | Enables the `outer_position` command without any pre-configured scope.                |\n| `core:window:deny-outer-position`                 | Denies the `outer_position` command without any pre-configured scope.                 |\n| `core:window:allow-outer-size`                    | Enables the `outer_size` command without any pre-configured scope.                    |\n| `core:window:deny-outer-size`                     | Denies the `outer_size` command without any pre-configured scope.                     |\n| `core:window:allow-primary-monitor`               | Enables the `primary_monitor` command without any pre-configured scope.               |\n| `core:window:deny-primary-monitor`                | Denies the `primary_monitor` command without any pre-configured scope.                |\n| `core:window:allow-request-user-attention`        | Enables the `request_user_attention` command without any pre-configured scope.        |\n| `core:window:deny-request-user-attention`         | Denies the `request_user_attention` command without any pre-configured scope.         |\n| `core:window:allow-scale-factor`                  | Enables the `scale_factor` command without any pre-configured scope.                  |\n| `core:window:deny-scale-factor`                   | Denies the `scale_factor` command without any pre-configured scope.                   |\n| `core:window:allow-set-always-on-bottom`          | Enables the `set_always_on_bottom` command without any pre-configured scope.          |\n| `core:window:deny-set-always-on-bottom`           | Denies the `set_always_on_bottom` command without any pre-configured scope.           |\n| `core:window:allow-set-always-on-top`             | Enables the `set_always_on_top` command without any pre-configured scope.             |\n| `core:window:deny-set-always-on-top`              | Denies the `set_always_on_top` command without any pre-configured scope.              |\n| `core:window:allow-set-closable`                  | Enables the `set_closable` command without any pre-configured scope.                  |\n| `core:window:deny-set-closable`                   | Denies the `set_closable` command without any pre-configured scope.                   |\n| `core:window:allow-set-content-protected`         | Enables the `set_content_protected` command without any pre-configured scope.         |\n| `core:window:deny-set-content-protected`          | Denies the `set_content_protected` command without any pre-configured scope.          |\n| `core:window:allow-set-cursor-grab`               | Enables the `set_cursor_grab` command without any pre-configured scope.               |\n| `core:window:deny-set-cursor-grab`                | Denies the `set_cursor_grab` command without any pre-configured scope.                |\n| `core:window:allow-set-cursor-icon`               | Enables the `set_cursor_icon` command without any pre-configured scope.               |\n| `core:window:deny-set-cursor-icon`                | Denies the `set_cursor_icon` command without any pre-configured scope.                |\n| `core:window:allow-set-cursor-position`           | Enables the `set_cursor_position` command without any pre-configured scope.           |\n| `core:window:deny-set-cursor-position`            | Denies the `set_cursor_position` command without any pre-configured scope.            |\n| `core:window:allow-set-cursor-visible`            | Enables the `set_cursor_visible` command without any pre-configured scope.            |\n| `core:window:deny-set-cursor-visible`             | Denies the `set_cursor_visible` command without any pre-configured scope.             |\n| `core:window:allow-set-decorations`               | Enables the `set_decorations` command without any pre-configured scope.               |\n| `core:window:deny-set-decorations`                | Denies the `set_decorations` command without any pre-configured scope.                |\n| `core:window:allow-set-effects`                   | Enables the `set_effects` command without any pre-configured scope.                   |\n| `core:window:deny-set-effects`                    | Denies the `set_effects` command without any pre-configured scope.                    |\n| `core:window:allow-set-enabled`                   | Enables the `set_enabled` command without any pre-configured scope.                   |\n| `core:window:deny-set-enabled`                    | Denies the `set_enabled` command without any pre-configured scope.                    |\n| `core:window:allow-set-focus`                     | Enables the `set_focus` command without any pre-configured scope.                     |\n| `core:window:deny-set-focus`                      | Denies the `set_focus` command without any pre-configured scope.                      |\n| `core:window:allow-set-fullscreen`                | Enables the `set_fullscreen` command without any pre-configured scope.                |\n| `core:window:deny-set-fullscreen`                 | Denies the `set_fullscreen` command without any pre-configured scope.                 |\n| `core:window:allow-set-icon`                      | Enables the `set_icon` command without any pre-configured scope.                      |\n| `core:window:deny-set-icon`                       | Denies the `set_icon` command without any pre-configured scope.                       |\n| `core:window:allow-set-ignore-cursor-events`      | Enables the `set_ignore_cursor_events` command without any pre-configured scope.      |\n| `core:window:deny-set-ignore-cursor-events`       | Denies the `set_ignore_cursor_events` command without any pre-configured scope.       |\n| `core:window:allow-set-max-size`                  | Enables the `set_max_size` command without any pre-configured scope.                  |\n| `core:window:deny-set-max-size`                   | Denies the `set_max_size` command without any pre-configured scope.                   |\n| `core:window:allow-set-maximizable`               | Enables the `set_maximizable` command without any pre-configured scope.               |\n| `core:window:deny-set-maximizable`                | Denies the `set_maximizable` command without any pre-configured scope.                |\n| `core:window:allow-set-min-size`                  | Enables the `set_min_size` command without any pre-configured scope.                  |\n| `core:window:deny-set-min-size`                   | Denies the `set_min_size` command without any pre-configured scope.                   |\n| `core:window:allow-set-minimizable`               | Enables the `set_minimizable` command without any pre-configured scope.               |\n| `core:window:deny-set-minimizable`                | Denies the `set_minimizable` command without any pre-configured scope.                |\n| `core:window:allow-set-position`                  | Enables the `set_position` command without any pre-configured scope.                  |\n| `core:window:deny-set-position`                   | Denies the `set_position` command without any pre-configured scope.                   |\n| `core:window:allow-set-progress-bar`              | Enables the `set_progress_bar` command without any pre-configured scope.              |\n| `core:window:deny-set-progress-bar`               | Denies the `set_progress_bar` command without any pre-configured scope.               |\n| `core:window:allow-set-resizable`                 | Enables the `set_resizable` command without any pre-configured scope.                 |\n| `core:window:deny-set-resizable`                  | Denies the `set_resizable` command without any pre-configured scope.                  |\n| `core:window:allow-set-shadow`                    | Enables the `set_shadow` command without any pre-configured scope.                    |\n| `core:window:deny-set-shadow`                     | Denies the `set_shadow` command without any pre-configured scope.                     |\n| `core:window:allow-set-size`                      | Enables the `set_size` command without any pre-configured scope.                      |\n| `core:window:deny-set-size`                       | Denies the `set_size` command without any pre-configured scope.                       |\n| `core:window:allow-set-size-constraints`          | Enables the `set_size_constraints` command without any pre-configured scope.          |\n| `core:window:deny-set-size-constraints`           | Denies the `set_size_constraints` command without any pre-configured scope.           |\n| `core:window:allow-set-skip-taskbar`              | Enables the `set_skip_taskbar` command without any pre-configured scope.              |\n| `core:window:deny-set-skip-taskbar`               | Denies the `set_skip_taskbar` command without any pre-configured scope.               |\n| `core:window:allow-set-theme`                     | Enables the `set_theme` command without any pre-configured scope.                     |\n| `core:window:deny-set-theme`                      | Denies the `set_theme` command without any pre-configured scope.                      |\n| `core:window:allow-set-title`                     | Enables the `set_title` command without any pre-configured scope.                     |\n| `core:window:deny-set-title`                      | Denies the `set_title` command without any pre-configured scope.                      |\n| `core:window:allow-set-title-bar-style`           | Enables the `set_title_bar_style` command without any pre-configured scope.           |\n| `core:window:deny-set-title-bar-style`            | Denies the `set_title_bar_style` command without any pre-configured scope.            |\n| `core:window:allow-set-visible-on-all-workspaces` | Enables the `set_visible_on_all_workspaces` command without any pre-configured scope. |\n| `core:window:deny-set-visible-on-all-workspaces`  | Denies the `set_visible_on_all_workspaces` command without any pre-configured scope.  |\n| `core:window:allow-show`                          | Enables the `show` command without any pre-configured scope.                          |\n| `core:window:deny-show`                           | Denies the `show` command without any pre-configured scope.                           |\n| `core:window:allow-start-dragging`                | Enables the `start_dragging` command without any pre-configured scope.                |\n| `core:window:deny-start-dragging`                 | Denies the `start_dragging` command without any pre-configured scope.                 |\n| `core:window:allow-start-resize-dragging`         | Enables the `start_resize_dragging` command without any pre-configured scope.         |\n| `core:window:deny-start-resize-dragging`          | Denies the `start_resize_dragging` command without any pre-configured scope.          |\n| `core:window:allow-theme`                         | Enables the `theme` command without any pre-configured scope.                         |\n| `core:window:deny-theme`                          | Denies the `theme` command without any pre-configured scope.                          |\n| `core:window:allow-title`                         | Enables the `title` command without any pre-configured scope.                         |\n| `core:window:deny-title`                          | Denies the `title` command without any pre-configured scope.                          |\n| `core:window:allow-toggle-maximize`               | Enables the `toggle_maximize` command without any pre-configured scope.               |\n| `core:window:deny-toggle-maximize`                | Denies the `toggle_maximize` command without any pre-configured scope.                |\n| `core:window:allow-unmaximize`                    | Enables the `unmaximize` command without any pre-configured scope.                    |\n| `core:window:deny-unmaximize`                     | Denies the `unmaximize` command without any pre-configured scope.                     |\n| `core:window:allow-unminimize`                    | Enables the `unminimize` command without any pre-configured scope.                    |\n| `core:window:deny-unminimize`                     | Denies the `unminimize` command without any pre-configured scope.                     |","tokens_est":4975,"tags":["commands","permissions","windowing","assets"],"src_path":"core-permissions.mdx","anchors":["permission-table-9"],"code_languages":[],"version":null,"permissions":["core:window:allow-available-monitors","core:window:deny-available-monitors","core:window:allow-center","core:window:deny-center","core:window:allow-close","core:window:deny-close","core:window:allow-create","core:window:deny-create","core:window:allow-current-monitor","core:window:deny-current-monitor","core:window:allow-cursor-position","core:window:deny-cursor-position","core:window:allow-destroy","core:window:deny-destroy","core:window:allow-get-all-windows","core:window:deny-get-all-windows","core:window:allow-hide","core:window:deny-hide","core:window:allow-inner-position","core:window:deny-inner-position","core:window:allow-inner-size","core:window:deny-inner-size","core:window:allow-internal-toggle-maximize","core:window:deny-internal-toggle-maximize","core:window:allow-is-closable","core:window:deny-is-closable","core:window:allow-is-decorated","core:window:deny-is-decorated","core:window:allow-is-enabled","core:window:deny-is-enabled","core:window:allow-is-focused","core:window:deny-is-focused","core:window:allow-is-fullscreen","core:window:deny-is-fullscreen","core:window:allow-is-maximizable","core:window:deny-is-maximizable","core:window:allow-is-maximized","core:window:deny-is-maximized","core:window:allow-is-minimizable","core:window:deny-is-minimizable","core:window:allow-is-minimized","core:window:deny-is-minimized","core:window:allow-is-resizable","core:window:deny-is-resizable","core:window:allow-is-visible","core:window:deny-is-visible","core:window:allow-maximize","core:window:deny-maximize","core:window:allow-minimize","core:window:deny-minimize","core:window:allow-monitor-from-point","core:window:deny-monitor-from-point","core:window:allow-outer-position","core:window:deny-outer-position","core:window:allow-outer-size","core:window:deny-outer-size","core:window:allow-primary-monitor","core:window:deny-primary-monitor","core:window:allow-request-user-attention","core:window:deny-request-user-attention","core:window:allow-scale-factor","core:window:deny-scale-factor","core:window:allow-set-always-on-bottom","core:window:deny-set-always-on-bottom","core:window:allow-set-always-on-top","core:window:deny-set-always-on-top","core:window:allow-set-closable","core:window:deny-set-closable","core:window:allow-set-content-protected","core:window:deny-set-content-protected","core:window:allow-set-cursor-grab","core:window:deny-set-cursor-grab","core:window:allow-set-cursor-icon","core:window:deny-set-cursor-icon","core:window:allow-set-cursor-position","core:window:deny-set-cursor-position","core:window:allow-set-cursor-visible","core:window:deny-set-cursor-visible","core:window:allow-set-decorations","core:window:deny-set-decorations","core:window:allow-set-effects","core:window:deny-set-effects","core:window:allow-set-enabled","core:window:deny-set-enabled","core:window:allow-set-focus","core:window:deny-set-focus","core:window:allow-set-fullscreen","core:window:deny-set-fullscreen","core:window:allow-set-icon","core:window:deny-set-icon","core:window:allow-set-ignore-cursor-events","core:window:deny-set-ignore-cursor-events","core:window:allow-set-max-size","core:window:deny-set-max-size","core:window:allow-set-maximizable","core:window:deny-set-maximizable","core:window:allow-set-min-size","core:window:deny-set-min-size","core:window:allow-set-minimizable","core:window:deny-set-minimizable","core:window:allow-set-position","core:window:deny-set-position","core:window:allow-set-progress-bar","core:window:deny-set-progress-bar","core:window:allow-set-resizable","core:window:deny-set-resizable","core:window:allow-set-shadow","core:window:deny-set-shadow","core:window:allow-set-size","core:window:deny-set-size","core:window:allow-set-size-constraints","core:window:deny-set-size-constraints","core:window:allow-set-skip-taskbar","core:window:deny-set-skip-taskbar","core:window:allow-set-theme","core:window:deny-set-theme","core:window:allow-set-title","core:window:deny-set-title","core:window:allow-set-title-bar-style","core:window:deny-set-title-bar-style","core:window:allow-set-visible-on-all-workspaces","core:window:deny-set-visible-on-all-workspaces","core:window:allow-show","core:window:deny-show","core:window:allow-start-dragging","core:window:deny-start-dragging","core:window:allow-start-resize-dragging","core:window:deny-start-resize-dragging","core:window:allow-theme","core:window:deny-theme","core:window:allow-title","core:window:deny-title","core:window:allow-toggle-maximize","core:window:deny-toggle-maximize","core:window:allow-unmaximize","core:window:deny-unmaximize","core:window:allow-unminimize","core:window:deny-unminimize"],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.085Z","part_index":1,"part_total":1}
{"id":"create-project#introduction","doc_id":"create-project","section_title":"Introduction","doc_title":"Create a Project","hierarchy":["Create a Project"],"content":"One thing that makes Tauri so flexible is its ability to work with virtually any frontend framework. We've created the [`create-tauri-app`](https://github.com/tauri-apps/create-tauri-app) utility to help you create a new Tauri project using one of the officially maintained framework templates.\n\n`create-tauri-app` currently includes templates for vanilla (HTML, CSS and JavaScript without a framework), [Vue.js](https://vuejs.org), [Svelte](https://svelte.dev), [React](https://reactjs.org/), [SolidJS](https://www.solidjs.com/), [Angular](https://angular.io/), [Preact](https://preactjs.com/), [Yew](https://yew.rs/), [Leptos](https://github.com/leptos-rs/leptos), and [Sycamore](https://sycamore-rs.netlify.app/). You can also find or add your own community templates and frameworks in the [Awesome Tauri repo](https://github.com/tauri-apps/awesome-tauri).\n\n{/* TODO: redirect to integrate to existing front-end project specific docs */}\nAlternatively, you can [add Tauri to an existing project](#manual-setup-tauri-cli) to quickly turn your existing codebase into a Tauri app.","tokens_est":270,"tags":["setup"],"src_path":"create-project.mdx","anchors":["introduction"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["cli"],"updated_at":"2025-09-01T10:05:53.088Z","raw_frontmatter":"title: Create a Project\r\nsidebar:\r\n  order: 3\r\ni18nReady: true\r"}
{"id":"create-project#using-create-tauri-app","doc_id":"create-project","section_title":"Using `create-tauri-app`","doc_title":"Create a Project","hierarchy":["Create a Project","Using `create-tauri-app`"],"content":"## Using `create-tauri-app`\n\nTo get started using `create-tauri-app` run one of the below commands in the folder you'd like to setup your project. If you're not sure which command to use we recommend the Bash command on Linux and macOS and the PowerShell command on Windows.\n\nFollow along with the prompts to choose your project name, frontend language, package manager, and frontend framework, and frontend framework options if applicable.\n\n[TIP]\n\nWe recommend starting with the vanilla template (HTML, CSS, and JavaScript without a frontend framework) to get started. You can always [integrate a frontend framework](/start/frontend/) later.\n\n- Choose which language to use for your frontend: `TypeScript / JavaScript`\n- Choose your package manager: `pnpm`\n- Choose your UI template: `Vanilla`\n- Choose your UI flavor: `TypeScript`\n\n:::","tokens_est":209,"tags":["commands","windowing","setup"],"src_path":"create-project.mdx","anchors":["using-create-tauri-app"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.088Z"}
{"id":"create-project#scaffold-a-new-project","doc_id":"create-project","section_title":"Scaffold a new project","doc_title":"Create a Project","hierarchy":["Create a Project","Using `create-tauri-app`","Scaffold a new project"],"content":"#### Scaffold a new project\n\n1. Choose a name and a bundle identifier (unique-id for your app):\n   ```\n   ? Project name (tauri-app) ›\n   ? Identifier (com.tauri-app.app) ›\n   ```\n2. Select a flavor for your frontend. First the language:\n   ```\n   ? Choose which language to use for your frontend ›\n   Rust  (cargo)\n   TypeScript / JavaScript  (pnpm, yarn, npm, bun)\n   .NET  (dotnet)\n   ```\n3. Select a package manager (if there are multiple available):\n\n   Options for **TypeScript / JavaScript**:\n\n   ```\n   ? Choose your package manager ›\n   pnpm\n   yarn\n   npm\n   bun\n   ```\n\n4. Select a UI Template and flavor (if there are multiple available):\n\n   Options for **Rust**:\n\n   ```\n   ? Choose your UI template ›\n   Vanilla\n   Yew\n   Leptos\n   Sycamore\n   ```\n\n   Options for **TypeScript / JavaScript**:\n\n   ```\n   ? Choose your UI template ›\n   Vanilla\n   Vue\n   Svelte\n   React\n   Solid\n   Angular\n   Preact\n\n   ? Choose your UI flavor ›\n   TypeScript\n   JavaScript\n   ```\n\n   Options for **.NET**:\n\n   ```\n   ? Choose your UI template ›\n   Blazor  (https://dotnet.microsoft.com/en-us/apps/aspnet/web-apps/blazor/)\n   ```\n\nOnce completed, the utility reports that the template has been created and displays how to run it using the configured package manager. If it detects missing dependencies on your system, it prints a list of packages and prompts how to install them.\n\n{/* TODO: Can CTA offer to install the deps? */}","tokens_est":357,"tags":["setup","has_code"],"src_path":"create-project.mdx","anchors":["scaffold-a-new-project"],"code_languages":[],"version":null,"permissions":[],"config_keys":["app.app"],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.088Z"}
{"id":"create-project#start-the-development-server","doc_id":"create-project","section_title":"Start the development server","doc_title":"Create a Project","hierarchy":["Create a Project","Using `create-tauri-app`","Start the development server"],"content":"#### Start the development server\n\nAfter `create-tauri-app` has completed, you can navigate into your project's folder, install dependencies, and then use the [Tauri CLI](/reference/cli/) to start the development server:\n\nYou'll now see a new window open with your app running.\n\n**Congratulations!** You've made your Tauri app! 🚀","tokens_est":83,"tags":["windowing","setup"],"src_path":"create-project.mdx","anchors":["start-the-development-server"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["cli"],"updated_at":"2025-09-01T10:05:53.088Z"}
{"id":"create-project#manual-setup-tauri-cli","doc_id":"create-project","section_title":"Manual Setup (Tauri CLI)","doc_title":"Create a Project","hierarchy":["Create a Project","Manual Setup (Tauri CLI)"],"content":"## Manual Setup (Tauri CLI)\n\nIf you already have an existing frontend or prefer to set it up yourself, you can use the Tauri CLI to initialize the backend for your project separately.\n\n[NOTE]\n\nThe following example assumes you are creating a new project. If you've already initialized the frontend of your application, you can skip the first step.\n:::\n\n    1. Create a new directory for your project and initialize the frontend. You can use plain HTML, CSS, and JavaScript, or any framework you prefer such as Next.js, Nuxt, Svelte, Yew, or Leptos. You just need a way of serving the app in your browser. Just as an example, this is how you would setup a simple Vite app:\n\n        \n\n    2. Then, install Tauri's CLI tool using your package manager of choice. If you are using `cargo` to install the Tauri CLI, you will have to install it globally.\n\n        \n\n    3. Determine the URL of your frontend development server. This is the URL that Tauri will use to load your content. For example, if you are using Vite, the default URL is `http://localhost:5173`.\n\n    4. In your project directory, initialize Tauri:\n\n        \n\n        After running the command it will display a prompt asking you for different options:\n\n        ```sh frame=none\n        ✔ What is your app name? tauri-app\n        ✔ What should the window title be? tauri-app\n        ✔ Where are your web assets located? ..\n        ✔ What is the url of your dev server? http://localhost:5173\n        ✔ What is your frontend dev command? pnpm run dev\n        ✔ What is your frontend build command? pnpm run build\n        ```\n\n        This will create a `src-tauri` directory in your project with the necessary Tauri configuration files.\n\n    5. Verify your Tauri app is working by running the development server:\n\n        \n\n        This command will compile the Rust code and open a window with your web content.\n\n**Congratulations!** You've created a new Tauri project using the Tauri CLI! 🚀","tokens_est":489,"tags":["commands","windowing","tooling","setup","lang:sh","has_code"],"src_path":"create-project.mdx","anchors":["manual-setup-tauri-cli"],"code_languages":["sh"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["http","cli"],"updated_at":"2025-09-01T10:05:53.088Z"}
{"id":"create-project#next-steps","doc_id":"create-project","section_title":"Next Steps","doc_title":"Create a Project","hierarchy":["Create a Project","Next Steps"],"content":"## Next Steps\n\n- [Learn about the project layout and what each file does](/start/project-structure/)\n- [Add and Configure a Frontend Framework](/start/frontend/)\n- [Tauri Command Line Interface (CLI) Reference](/reference/cli/)\n- [Learn how to develop your Tauri app](/develop/)\n- [Discover additional features to extend Tauri](/plugin/)","tokens_est":84,"tags":["commands","setup"],"src_path":"create-project.mdx","anchors":["next-steps"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["cli"],"updated_at":"2025-09-01T10:05:53.088Z"}
{"id":"debug-vscode#introduction","doc_id":"debug-vscode","section_title":"Introduction","doc_title":"Debug in VS Code","hierarchy":["Debug in VS Code"],"content":"This guide will walk you through setting up VS Code for debugging the [Core Process of your Tauri app](/concept/process-model/#the-core-process).","tokens_est":36,"tags":["debugging"],"src_path":"debug-vscode.mdx","anchors":["introduction"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["process"],"updated_at":"2025-09-01T10:05:53.090Z","raw_frontmatter":"title: Debug in VS Code\r\ni18nReady: true\r"}
{"id":"debug-vscode#all-platforms-with-vscode-lldb-extension","doc_id":"debug-vscode","section_title":"All platforms with vscode-lldb extension","doc_title":"Debug in VS Code","hierarchy":["Debug in VS Code","All platforms with vscode-lldb extension"],"content":"## All platforms with vscode-lldb extension","tokens_est":11,"tags":["debugging"],"src_path":"debug-vscode.mdx","anchors":["all-platforms-with-vscode-lldb-extension"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.090Z"}
{"id":"debug-vscode#prerequisites","doc_id":"debug-vscode","section_title":"Prerequisites","doc_title":"Debug in VS Code","hierarchy":["Debug in VS Code","All platforms with vscode-lldb extension","Prerequisites"],"content":"### Prerequisites\n\nInstall the [`vscode-lldb`] extension.\n\n[`vscode-lldb`]: https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb","tokens_est":37,"tags":["debugging"],"src_path":"debug-vscode.mdx","anchors":["prerequisites"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.090Z"}
{"id":"debug-vscode#configure-launchjson","doc_id":"debug-vscode","section_title":"Configure launch.json","doc_title":"Debug in VS Code","hierarchy":["Debug in VS Code","All platforms with vscode-lldb extension","Configure launch.json"],"content":"### Configure launch.json\n\nCreate a `.vscode/launch.json` file and paste the below JSON contents into it:\n\n```json title=\".vscode/launch.json\"\n{\n  // Use IntelliSense to learn about possible attributes.\n  // Hover to view descriptions of existing attributes.\n  // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"type\": \"lldb\",\n      \"request\": \"launch\",\n      \"name\": \"Tauri Development Debug\",\n      \"cargo\": {\n        \"args\": [\n          \"build\",\n          \"--manifest-path=./src-tauri/Cargo.toml\",\n          \"--no-default-features\"\n        ]\n      },\n      // task for the `beforeDevCommand` if used, must be configured in `.vscode/tasks.json`\n      \"preLaunchTask\": \"ui:dev\"\n    },\n    {\n      \"type\": \"lldb\",\n      \"request\": \"launch\",\n      \"name\": \"Tauri Production Debug\",\n      \"cargo\": {\n        \"args\": [\"build\", \"--release\", \"--manifest-path=./src-tauri/Cargo.toml\"]\n      },\n      // task for the `beforeBuildCommand` if used, must be configured in `.vscode/tasks.json`\n      \"preLaunchTask\": \"ui:build\"\n    }\n  ]\n}\n```\n\nThis uses `cargo` directly to build the Rust application and load it in both development and production modes.\n\nNote that it does not use the Tauri CLI, so exclusive CLI features are not executed. The `beforeDevCommand` and `beforeBuildCommand` scripts must be executed beforehand or configured as a task in the `preLaunchTask` field. Below is an example `.vscode/tasks.json` file that has two tasks, one for a `beforeDevCommand` that spawns a development server and one for `beforeBuildCommand`:\n\n```json title=\".vscode/tasks.json\"\n{\n  // See https://go.microsoft.com/fwlink/?LinkId=733558\n  // for the documentation about the tasks.json format\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"label\": \"ui:dev\",\n      \"type\": \"shell\",\n      // `dev` keeps running in the background\n      // ideally you should also configure a `problemMatcher`\n      // see https://code.visualstudio.com/docs/editor/tasks#_can-a-background-task-be-used-as-a-prelaunchtask-in-launchjson\n      \"isBackground\": true,\n      // change this to your `beforeDevCommand`:\n      \"command\": \"yarn\",\n      \"args\": [\"dev\"]\n    },\n    {\n      \"label\": \"ui:build\",\n      \"type\": \"shell\",\n      // change this to your `beforeBuildCommand`:\n      \"command\": \"yarn\",\n      \"args\": [\"build\"]\n    }\n  ]\n}\n```\n\nNow you can set breakpoints in `src-tauri/src/main.rs` or any other Rust file and start debugging by pressing `F5`.","tokens_est":627,"tags":["commands","debugging","configuration","lang:json","has_code"],"src_path":"debug-vscode.mdx","anchors":["configure-launchjson"],"code_languages":["json"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["shell","cli"],"updated_at":"2025-09-01T10:05:53.090Z"}
{"id":"debug-vscode#with-visual-studio-windows-debugger-on-windows","doc_id":"debug-vscode","section_title":"With Visual Studio Windows Debugger on Windows","doc_title":"Debug in VS Code","hierarchy":["Debug in VS Code","With Visual Studio Windows Debugger on Windows"],"content":"## With Visual Studio Windows Debugger on Windows\n\nVisual Studio Windows Debugger is a Windows-only debugger that is generally faster than [`vscode-lldb`] with better support for some Rust features such as enums.","tokens_est":53,"tags":["windowing","debugging"],"src_path":"debug-vscode.mdx","anchors":["with-visual-studio-windows-debugger-on-windows"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.090Z"}
{"id":"debug-vscode#prerequisites-2","doc_id":"debug-vscode","section_title":"Prerequisites","doc_title":"Debug in VS Code","hierarchy":["Debug in VS Code","With Visual Studio Windows Debugger on Windows","Prerequisites"],"content":"### Prerequisites\n\nInstall the [C/C++](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools) extension and follow https://code.visualstudio.com/docs/cpp/config-msvc#_prerequisites to install Visual Studio Windows Debugger.","tokens_est":60,"tags":["windowing","debugging"],"src_path":"debug-vscode.mdx","anchors":["prerequisites-2"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.090Z"}
{"id":"debug-vscode#configure-launchjson-and-tasksjson","doc_id":"debug-vscode","section_title":"Configure launch.json and tasks.json","doc_title":"Debug in VS Code","hierarchy":["Debug in VS Code","With Visual Studio Windows Debugger on Windows","Configure launch.json and tasks.json"],"content":"### Configure launch.json and tasks.json\n\n```json title=\".vscode/launch.json\"\n{\n  // Use IntelliSense to learn about possible attributes.\n  // Hover to view descriptions of existing attributes.\n  // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Launch App Debug\",\n      \"type\": \"cppvsdbg\",\n      \"request\": \"launch\",\n      // change the exe name to your actual exe name\n      // (to debug release builds, change `target/debug` to `release/debug`)\n      \"program\": \"${workspaceRoot}/src-tauri/target/debug/your-app-name-here.exe\",\n      \"cwd\": \"${workspaceRoot}\",\n      \"preLaunchTask\": \"ui:dev\"\n    }\n  ]\n}\n```\n\nNote that it does not use the Tauri CLI, so exclusive CLI features are not executed. The `tasks.json` is the same as with `lldb`, except you need to add a config group and target your `preLaunchTask` from `launch.json` to it if you want it to always compile before launching.\n\nHere is an example of running a dev server (equivalent of `beforeDevCommand`) and the compilation (`cargo build`) as a group, to use it, change the `preLaunchTask` config in `launch.json` to `dev` (or anything you named your group).\n\n```json title=\".vscode/tasks.json\"\n{\n  // See https://go.microsoft.com/fwlink/?LinkId=733558\n  // for the documentation about the tasks.json format\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"label\": \"build:debug\",\n      \"type\": \"cargo\",\n      \"command\": \"build\",\n      \"options\": {\n        \"cwd\": \"${workspaceRoot}/src-tauri\"\n      }\n    },\n    {\n      \"label\": \"ui:dev\",\n      \"type\": \"shell\",\n      // `dev` keeps running in the background\n      // ideally you should also configure a `problemMatcher`\n      // see https://code.visualstudio.com/docs/editor/tasks#_can-a-background-task-be-used-as-a-prelaunchtask-in-launchjson\n      \"isBackground\": true,\n      // change this to your `beforeDevCommand`:\n      \"command\": \"yarn\",\n      \"args\": [\"dev\"]\n    },\n    {\n      \"label\": \"dev\",\n      \"dependsOn\": [\"build:debug\", \"ui:dev\"],\n      \"group\": {\n        \"kind\": \"build\"\n      }\n    }\n  ]\n}\n```","tokens_est":530,"tags":["commands","debugging","lang:json","has_code"],"src_path":"debug-vscode.mdx","anchors":["configure-launchjson-and-tasksjson"],"code_languages":["json"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["shell","cli"],"updated_at":"2025-09-01T10:05:53.090Z"}
{"id":"develop#introduction","doc_id":"develop","section_title":"Introduction","doc_title":"Develop","hierarchy":["Develop"],"content":"Now that you have [everything set up](/start/), you are ready to run your application using Tauri.\n\nIf you are using an UI framework or JavaScript bundler you likely have access to a development server\nthat will speed up your development process, so if you haven't configured your app's dev URL and script\nthat starts it, you can do so via the [devUrl](/reference/config/#devurl) and\n[beforeDevCommand](/reference/config/#beforedevcommand) config values:\n\n```json title=tauri.conf.json\n{\n  \"build\": {\n    \"devUrl\": \"http://localhost:3000\",\n    \"beforeDevCommand\": \"npm run dev\"\n  }\n}\n```\n\n[NOTE]\n\nEvery framework has its own development tooling. It is outside of the scope of this document to cover them all or stay up to date.\n\nPlease refer to your framework's documentation to learn more and determine the correct values to be configured.\n\n:::\n\nOtherwise if you are not using a UI framework or module bundler you can point Tauri to your frontend source code\nand the Tauri CLI will start a development server for you:\n\n```json title=tauri.conf.json\n{\n  \"build\": {\n    \"frontendDist\": \"./src\"\n  }\n}\n```\n\nNote that in this example the `src` folder must include a `index.html` file along any other assets loaded by your frontend.\n\n[CAUTION]\n\nThe built-in Tauri development server does not support mutual authentication\nor encryption. You should never use it for development on untrusted networks.\nSee the [development server security considerations](/security/lifecycle/#development-server)\nfor a more detailed explanation.\n\n:::","tokens_est":382,"tags":["commands","configuration","dev","lang:json","has_code"],"src_path":"develop.mdx","anchors":["introduction"],"code_languages":["json"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["http","cli","process"],"updated_at":"2025-09-01T10:05:53.090Z","raw_frontmatter":"title: Develop\r\ndescription: Core concepts for developing with Tauri.\r\nsidebar:\r\n  label: Overview\r\ni18nReady: true\r"}
{"id":"develop#developing-your-desktop-application","doc_id":"develop","section_title":"Developing Your Desktop Application","doc_title":"Develop","hierarchy":["Develop","Developing Your Desktop Application"],"content":"### Developing Your Desktop Application\n\nTo develop your application for desktop, run the `tauri dev` command.\n\nThe first time you run this command, the Rust package manager may need **several minutes** to download and build all the required packages.\nSince they are cached, subsequent builds are much faster, as only your code needs rebuilding.\n\nOnce Rust has finished building, the webview opens, displaying your web app.\nYou can make changes to your web app, and if your tooling supports it, the webview should update automatically, just like a browser.","tokens_est":139,"tags":["commands","dev"],"src_path":"develop.mdx","anchors":["developing-your-desktop-application"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.090Z"}
{"id":"develop#opening-the-web-inspector","doc_id":"develop","section_title":"Opening the Web Inspector","doc_title":"Develop","hierarchy":["Develop","Developing Your Desktop Application","Opening the Web Inspector"],"content":"#### Opening the Web Inspector\n\nYou can open the Web Inspector to debug your application by performing a right-click on the webview and clicking \"Inspect\" or\nusing the `Ctrl + Shift + I` shortcut on Windows and Linux or `Cmd + Option + I` shortcut on macOS.","tokens_est":64,"tags":["windowing","debugging","dev"],"src_path":"develop.mdx","anchors":["opening-the-web-inspector"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.090Z"}
{"id":"develop#developing-your-mobile-application","doc_id":"develop","section_title":"Developing your Mobile Application","doc_title":"Develop","hierarchy":["Develop","Developing your Mobile Application"],"content":"### Developing your Mobile Application\n\nDeveloping for mobile is similar to how desktop development works, but you must run `tauri android dev` or `tauri ios dev` instead:\n\nThe first time you run this command, the Rust package manager may need **several minutes** to download and build all the required packages.\nSince they are cached, subsequent builds are much faster, as only your code needs rebuilding.","tokens_est":102,"tags":["commands","mobile","dev"],"src_path":"develop.mdx","anchors":["developing-your-mobile-application"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.090Z"}
{"id":"develop#development-server","doc_id":"develop","section_title":"Development Server","doc_title":"Develop","hierarchy":["Develop","Developing your Mobile Application","Development Server"],"content":"#### Development Server\n\nThe development server on mobile works similarly to the desktop one, but if you are trying to run on a physical iOS device,\nyou must configure it to listen to a particular address provided by the Tauri CLI, defined in the `TAURI_DEV_HOST` environment variable.\nThis address is either a public network address (which is the default behavior) or the actual iOS device TUN address - which is more secure, but currently\nneeds Xcode to connect to the device.\n\nTo use the iOS device's address you must open Xcode before running the dev command and ensure your device\nis connected via network in the Window > Devices and Simulators menu.\nThen you must run `tauri ios dev --force-ip-prompt` to select the iOS device address (a IPv6 address ending with **::2**).\n\nTo make your development server listen on the correct host to be accessible by the iOS device you must tweak its configuration\nto use the `TAURI_DEV_HOST` value if it has been provided. Here is an example configuration for Vite:\n\n```js\nconst host = process.env.TAURI_DEV_HOST;\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  clearScreen: false,\n  server: {\n    host: host || false,\n    port: 1420,\n    strictPort: true,\n    hmr: host\n      ? {\n          protocol: 'ws',\n          host,\n          port: 1421,\n        }\n      : undefined,\n  },\n});\n```\n\nCheck your framework's setup guide for more information.\n\n[NOTE]\n\nProjects created with [create-tauri-app](https://github.com/tauri-apps/create-tauri-app) configures\nyour development server for mobile dev out of the box.\n:::","tokens_est":393,"tags":["commands","ipc","windowing","tooling","mobile","config","dev","lang:js","has_code"],"src_path":"develop.mdx","anchors":["development-server"],"code_languages":["js"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["cli","process"],"updated_at":"2025-09-01T10:05:53.090Z"}
{"id":"develop#device-selection","doc_id":"develop","section_title":"Device Selection","doc_title":"Develop","hierarchy":["Develop","Developing your Mobile Application","Device Selection"],"content":"#### Device Selection\n\nBy default the mobile dev command tries to run your application in a connected device,\nand fallbacks to prompting you to select a simulator to use.\nTo define the run target upfront you can provide the device or simulator name as argument:","tokens_est":65,"tags":["commands","dev"],"src_path":"develop.mdx","anchors":["device-selection"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.090Z"}
{"id":"develop#using-xcode-or-android-studio","doc_id":"develop","section_title":"Using Xcode or Android Studio","doc_title":"Develop","hierarchy":["Develop","Developing your Mobile Application","Using Xcode or Android Studio"],"content":"#### Using Xcode or Android Studio\n\nAlternatively you can choose to use Xcode or Android Studio to develop your application.\nThis can help you troubleshoot some development issues by using the IDE instead of the command line tools.\nTo open the mobile IDE instead of running on a connected device or simulator, use the `--open` flag:\n\n[NOTE]\n\nIf you intend on running the application on a physical iOS device you must also provide the `--host` argument\nand your development server must use the `process.env.TAURI_DEV_HOST` value as host.\nSee your framework's setup guide for more information.\n\n:::\n\n[CAUTION]\n\nTo use Xcode or Android Studio the Tauri CLI process **must** be running and **cannot** be killed.\nIt is recommended to use the `tauri [android|ios] dev --open` command and keep the process alive until you close the IDE.\n:::","tokens_est":208,"tags":["commands","mobile","dev"],"src_path":"develop.mdx","anchors":["using-xcode-or-android-studio"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["cli","process"],"updated_at":"2025-09-01T10:05:53.090Z"}
{"id":"develop#opening-the-web-inspector-2","doc_id":"develop","section_title":"Opening the Web Inspector","doc_title":"Develop","hierarchy":["Develop","Developing your Mobile Application","Opening the Web Inspector"],"content":"#### Opening the Web Inspector\n\n- iOS\n\n  Safari must be used to access the Web Inspector for your iOS application.\n\n  Open the Safari on your Mac machine, choose **Safari > Settings** in the menu bar, click **Advanced**, then select **Show features for web developers**.\n\n  If you are running on a physical device you must enable **Web Inspector** in **Settings > Safari > Advanced**.\n\n  After following all steps you should see a **Develop** menu in Safari, where you will find the connected devices and applications to inspect.\n  Select your device or simulator and click on **localhost** to open the Safari Developer Tools window.\n\n- Android\n\n  The inspector is enabled by default for Android emulators, but you must enable it for physical devices.\n  Connect your Android device to the computer, open the **Settings** app in the Android device, select **About**, scroll to Build Number and tap that 7 times.\n  This will enable Developer Mode for your Android device and the **Developer Options** settings.\n\n  To enable application debugging on your device you must enter the **Developer Options** settings, toggle on the developer options switch\n  and enable **USB Debugging**.\n\n  \n[NOTE]\n\n  Each Android distribution has its own way to enable the Developer Mode, please check your manufacturer's documentation for more information.\n  :::\n\n  The Web Inspector for Android is powered by Google Chrome's DevTools and can be accessed by navigating to `chrome://inspect` in the Chrome browser on your computer.\n  Your device or emulator should appear in the remote devices list if your Android application is running, and you can open the developer tools\n  by clicking **inspect** on the entry matching your device.","tokens_est":429,"tags":["windowing","mobile","debugging","dev"],"src_path":"develop.mdx","anchors":["opening-the-web-inspector-2"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.090Z"}
{"id":"develop#troubleshooting","doc_id":"develop","section_title":"Troubleshooting","doc_title":"Develop","hierarchy":["Develop","Developing your Mobile Application","Troubleshooting"],"content":"#### Troubleshooting\n\n1. Error running build script on Xcode\n\nTauri hooks into the iOS Xcode project by creating a build phase that executes the Tauri CLI to compile the Rust source\nas a library that is loaded at runtime. The build phase is executed on the Xcode process context, so it might not be able\nto use shell modifications such as PATH additions, so be careful when using tools such as Node.js version managers which may not be compatible.\n\n2. Network permission prompt on first iOS app execution\n\nOn the first time you execute `tauri ios dev` you might see iOS prompting you for permission to find and connect\nto devices on your local network. This permission is required because to access your development server from an iOS device,\nwe must expose it in the local network. To run your app in your device you must click Allow and restart your application.","tokens_est":216,"tags":["permissions","mobile","dev"],"src_path":"develop.mdx","anchors":["troubleshooting"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["shell","cli","process"],"updated_at":"2025-09-01T10:05:53.090Z"}
{"id":"develop#reacting-to-source-code-changes","doc_id":"develop","section_title":"Reacting to Source Code Changes","doc_title":"Develop","hierarchy":["Develop","Reacting to Source Code Changes"],"content":"### Reacting to Source Code Changes\n\nSimilarly to how your webview reflects changes in real time,\nTauri watches your Rust files for changes so when you modify any of them your application is automatically rebuilt and restarted.\n\nYou can disable this behavior by using the `--no-watch` flag on the `tauri dev` command.\n\nTo restrict the files that are watched for changes you can create a `.taurignore` file in the src-tauri folder.\nThis file works just like a regular Git ignore file, so you can ignore any folder or file:\n\n```filename=.taurignore\nbuild/\nsrc/generated/*.rs\ndeny.toml\n```","tokens_est":147,"tags":["commands","dev","lang:filename","has_code"],"src_path":"develop.mdx","anchors":["reacting-to-source-code-changes"],"code_languages":["filename"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.090Z"}
{"id":"develop#using-the-browser-devtools","doc_id":"develop","section_title":"Using the Browser DevTools","doc_title":"Develop","hierarchy":["Develop","Using the Browser DevTools"],"content":"### Using the Browser DevTools\n\nTauri's APIs only work in your app window, so once you start using them you won't be able to open your frontend in your system's browser anymore.\n\nIf you prefer using your browser's developer tooling, you must configure [tauri-invoke-http](https://github.com/tauri-apps/tauri-invoke-http)\nto bridge Tauri API calls through a HTTP server.","tokens_est":92,"tags":["windowing","dev"],"src_path":"develop.mdx","anchors":["using-the-browser-devtools"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["http"],"updated_at":"2025-09-01T10:05:53.090Z"}
{"id":"develop#source-control","doc_id":"develop","section_title":"Source Control","doc_title":"Develop","hierarchy":["Develop","Source Control"],"content":"### Source Control\n\nIn your project repository, you **SHOULD** commit the `src-tauri/Cargo.lock` along with the `src-tauri/Cargo.toml` to git\nbecause Cargo uses the lockfile to provide deterministic builds. As a result, it is recommended that all applications check in\ntheir `Cargo.lock`. You **SHOULD NOT** commit the `src-tauri/target` folder or any of its contents.","tokens_est":92,"tags":["configuration","dev"],"src_path":"develop.mdx","anchors":["source-control"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.090Z"}
{"id":"environment-variables#introduction","doc_id":"environment-variables","section_title":"Introduction","doc_title":"Environment Variables","hierarchy":["Environment Variables"],"content":"This is a documentation of all environment variables used by tauri core crates and tauri CLI.","tokens_est":23,"tags":["config","configuration"],"src_path":"environment-variables.mdx","anchors":["introduction"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["cli"],"updated_at":"2025-09-01T10:05:53.091Z","raw_frontmatter":"title: Environment Variables\r\nsidebar:\r\n  order: 1\r\ni18nReady: true\r"}
{"id":"environment-variables#tauri-cli-part-1","doc_id":"environment-variables","section_title":"Tauri CLI","doc_title":"Environment Variables","hierarchy":["Environment Variables","Tauri CLI"],"content":"## Tauri CLI\n\nThese environment variables are inputs to the CLI which may have an equivalent CLI flag.\n\n[TIP]\n\nIf both environment variable and CLI flag are used, the CLI flag will have priority.\n\n:::\n\n- `CI` — If set, the CLI will run in CI mode and won't require any user interaction.\n- `TAURI_CLI_CONFIG_DEPTH` — Number of levels to traverse and find tauri configuration file.\n- `TAURI_CLI_PORT` — Port to use for the CLI built-in dev server.\n- `TAURI_CLI_WATCHER_IGNORE_FILENAME` — Name of a `.gitignore`-style file to control which files should be watched by the CLI in `dev` command. The CLI will look for this file name in each directory.\n- `TAURI_CLI_NO_DEV_SERVER_WAIT` — Skip waiting for the frontend dev server to start before building the tauri application.\n- `TAURI_LINUX_AYATANA_APPINDICATOR` — Set this var to `true` or `1` to force usage of `libayatana-appindicator` for system tray on Linux.\n- `TAURI_BUNDLER_WIX_FIPS_COMPLIANT` — Specify the bundler's WiX `FipsCompliant` option.\n- `TAURI_BUNDLER_TOOLS_GITHUB_MIRROR` - Specify a GitHub mirror to download files and tools used by tauri bundler.\n- `TAURI_BUNDLER_TOOLS_GITHUB_MIRROR_TEMPLATE` - Specify a GitHub mirror template to download files and tools used by tauri bundler, for example: `https://mirror.example.com/<owner>/<repo>/releases/download/<version>/<asset>`.\n- `TAURI_SKIP_SIDECAR_SIGNATURE_CHECK` - Skip signing sidecars.\n- `TAURI_SIGNING_PRIVATE_KEY` — Private key used to sign your app bundles, can be either a string or a path to the file.\n- `TAURI_SIGNING_PRIVATE_KEY_PASSWORD` — The signing private key password, see `TAURI_SIGNING_PRIVATE_KEY`.\n- `TAURI_SIGNING_RPM_KEY` — The private GPG key used to sign the RPM bundle, exported to its ASCII-armored format.\n- `TAURI_SIGNING_RPM_KEY_PASSPHRASE` — The GPG key passphrase for `TAURI_SIGNING_RPM_KEY`, if needed.\n- `TAURI_WINDOWS_SIGNTOOL_PATH` — Specify a path to `signtool.exe` used for code signing the application on Windows.\n- `APPLE_CERTIFICATE` — Base64 encoded of the `.p12` certificate for code signing. To get this value, run `openssl base64 -in MyCertificate.p12 -out MyCertificate-base64.txt`.\n- `APPLE_CERTIFICATE_PASSWORD` — The password you used to export the certificate.\n- `APPLE_ID` — The Apple ID used to notarize the application. If this environment variable is provided, `APPLE_PASSWORD` and `APPLE_TEAM_ID` must also be set. Alternatively, `APPLE_API_KEY` and `APPLE_API_ISSUER` can be used to authenticate.\n- `APPLE_PASSWORD` — The Apple password used to authenticate for application notarization. Required if `APPLE_ID` is specified. An [app-specific password](https://support.apple.com/en-ca/HT204397) can be used. Alternatively to entering the password in plaintext, it may also be specified using a '@keychain:' or '@env:' prefix followed by a keychain password item name or environment variable name.\n- `APPLE_TEAM_ID`: Developer team ID. To find your Team ID, go to the [Account](https://developer.apple.com/account) page on the Apple Developer website, and check your membership details.\n- `APPLE_API_KEY` — Alternative to `APPLE_ID` and `APPLE_PASSWORD` for notarization authentication using JWT. Also an option to allow automated iOS certificate and provisioning profile management.\n  - See [creating API keys](https://developer.apple.com/documentation/appstoreconnectapi/creating_api_keys_for_app_store_connect_api) for more information.\n- `API_PRIVATE_KEYS_DIR` — Specify the directory where your AuthKey file is located. See `APPLE_API_KEY`.\n- `APPLE_API_ISSUER` — Issuer ID. Required if `APPLE_API_KEY` is specified.\n- `APPLE_API_KEY_PATH` - path to the API key `.p8` file. If not specified, for macOS apps the bundler searches the following directories in sequence for a private key file with the name of 'AuthKey\\_\\<api_key>.p8': './private_keys', '~/private_keys', '~/.private_keys', and '~/.appstoreconnect/private_keys'. **For iOS this variable is required**.\n- `APPLE_SIGNING_IDENTITY` — The identity used to code sign. Overwrites `tauri.conf.json > bundle > macOS > signingIdentity`. If neither are set, it is inferred from `APPLE_CERTIFICATE` when provided.\n- `APPLE_PROVIDER_SHORT_NAME` — If your Apple ID is connected to multiple teams, you have to specify the provider short name of the team you want to use to notarize your app. Overwrites `tauri.conf.json > bundle > macOS > providerShortName`.\n- `APPLE_DEVELOPMENT_TEAM` — The team ID used to code sign on iOS. Overwrites `tauri.conf.json > bundle > iOS > developmentTeam`. Can be found in https://developer.apple.com/account#MembershipDetailsCard.\n- `TAURI_WEBVIEW_AUTOMATION` — Enables webview automation (Linux Only).\n- `TAURI_ANDROID_PROJECT_PATH` — Path of the tauri android project, usually will be `<project>/src-tauri/gen/android`.\n- `TAURI_IOS_PROJECT_PATH` — Path of the tauri iOS project, usually will be `<project>/src-tauri/gen/ios`.","tokens_est":1221,"tags":["commands","windowing","sidecar","mobile","tray","config","configuration"],"src_path":"environment-variables.mdx","anchors":["tauri-cli"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["cli","tray"],"updated_at":"2025-09-01T10:05:53.091Z","part_index":1,"part_total":1}
{"id":"environment-variables#tauri-cli-hook-commands","doc_id":"environment-variables","section_title":"Tauri CLI Hook Commands","doc_title":"Environment Variables","hierarchy":["Environment Variables","Tauri CLI Hook Commands"],"content":"## Tauri CLI Hook Commands\n\nThese environment variables are set for each hook command (`beforeDevCommand`, `beforeBuildCommand`, ...etc) which could be useful to conditionally build your frontend or execute a specific action.\n\n- `TAURI_ENV_DEBUG` — `true` for `dev` command or `build --debug`, `false` otherwise.\n- `TAURI_ENV_TARGET_TRIPLE` — Target triple the CLI is building.\n- `TAURI_ENV_ARCH` — Target arch, `x86_64`, `aarch64`...etc.\n- `TAURI_ENV_PLATFORM` — Target platform, `windows`, `darwin`, `linux`...etc.\n- `TAURI_ENV_PLATFORM_VERSION` — Build platform version\n- `TAURI_ENV_FAMILY` — Target platform family `unix` or `windows`.","tokens_est":160,"tags":["commands","windowing","debugging","config","configuration"],"src_path":"environment-variables.mdx","anchors":["tauri-cli-hook-commands"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["cli"],"updated_at":"2025-09-01T10:05:53.091Z"}
{"id":"frontend-listen#introduction","doc_id":"frontend-listen","section_title":"Introduction","doc_title":"Calling the Frontend from Rust","hierarchy":["Calling the Frontend from Rust"],"content":"The `@tauri-apps/api` NPM package offers APIs to listen to both global and webview-specific events.\n\n- Listening to global events\n\n  ```ts\n  type DownloadStarted = {\n    url: string;\n    downloadId: number;\n    contentLength: number;\n  };\n\n  listen<DownloadStarted>('download-started', (event) => {\n    console.log(\n      `downloading ${event.payload.contentLength} bytes from ${event.payload.url}`\n    );\n  });\n  ```\n\n- Listening to webview-specific events\n\n  ```ts\n  const appWebview = getCurrentWebviewWindow();\n  appWebview.listen<string>('logged-in', (event) => {\n    localStorage.setItem('session-token', event.payload);\n  });\n  ```\n\nThe `listen` function keeps the event listener registered for the entire lifetime of the application.\nTo stop listening on an event you can use the `unlisten` function which is returned by the `listen` function:\n\n```js\nconst unlisten = await listen('download-started', (event) => {});\nunlisten();\n```\n\n[NOTE]\n\nAlways use the unlisten function when your execution context goes out of scope\nsuch as when a component is unmounted.\n\nWhen the page is reloaded or you navigate to another URL the listeners are unregistered automatically.\nThis does not apply to a Single Page Application (SPA) router though.\n:::\n\nAdditionally Tauri provides a utility function for listening to an event exactly once:\n\n```js\nonce('ready', (event) => {});\n\nconst appWebview = getCurrentWebviewWindow();\nappWebview.once('ready', () => {});\n```\n\n[NOTE]\n\nEvents emitted in the frontend also triggers listeners registed by these APIs.\nFor more information see the [Calling Rust from the Frontend] documentation.\n:::","tokens_est":407,"tags":["ipc","windowing","lang:ts","lang:js","has_code"],"src_path":"frontend-listen.mdx","anchors":["introduction"],"code_languages":["ts","js"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.092Z","raw_frontmatter":"title: Calling the Frontend from Rust\r"}
{"id":"frontend-listen#listening-to-events-on-rust","doc_id":"frontend-listen","section_title":"Listening to Events on Rust","doc_title":"Calling the Frontend from Rust","hierarchy":["Calling the Frontend from Rust","Listening to Events on Rust"],"content":"#### Listening to Events on Rust\n\nGlobal and webview-specific events are also delivered to listeners registered in Rust.\n\n- Listening to global events\n\n  ```rust title=\"src-tauri/src/lib.rs\"\n  use tauri::Listener;\n\n  #[cfg_attr(mobile, tauri::mobile_entry_point)]\n  pub fn run() {\n    tauri::Builder::default()\n      .setup(|app| {\n        app.listen(\"download-started\", |event| {\n          if let Ok(payload) = serde_json::from_str::<DownloadStarted>(&event.payload()) {\n            println!(\"downloading {}\", payload.url);\n          }\n        });\n        Ok(())\n      })\n      .run(tauri::generate_context!())\n      .expect(\"error while running tauri application\");\n  }\n  ```\n\n- Listening to webview-specific events\n\n  ```rust title=\"src-tauri/src/lib.rs\"\n  use tauri::{Listener, Manager};\n\n  #[cfg_attr(mobile, tauri::mobile_entry_point)]\n  pub fn run() {\n    tauri::Builder::default()\n      .setup(|app| {\n        let webview = app.get_webview_window(\"main\").unwrap();\n        webview.listen(\"logged-in\", |event| {\n          let session_token = event.data;\n          // save token..\n        });\n        Ok(())\n      })\n      .run(tauri::generate_context!())\n      .expect(\"error while running tauri application\");\n  }\n  ```\n\nThe `listen` function keeps the event listener registered for the entire lifetime of the application.\nTo stop listening on an event you can use the `unlisten` function:\n\n```rust\n// unlisten outside of the event handler scope:\nlet event_id = app.listen(\"download-started\", |event| {});\napp.unlisten(event_id);\n\n// unlisten when some event criteria is matched\nlet handle = app.handle().clone();\napp.listen(\"status-changed\", |event| {\n  if event.data == \"ready\" {\n    handle.unlisten(event.id);\n  }\n});\n```\n\nAdditionally Tauri provides a utility function for listening to an event exactly once:\n\n```rust\napp.once(\"ready\", |event| {\n  println!(\"app is ready\");\n});\n```\n\nIn this case the event listener is immediately unregistered after its first trigger.\n\n[Calling Rust from the Frontend]: /develop/calling-rust/","tokens_est":509,"tags":["ipc","windowing","lang:rust","has_code"],"src_path":"frontend-listen.mdx","anchors":["listening-to-events-on-rust"],"code_languages":["rust"],"version":null,"permissions":[],"config_keys":["app.listen","app.get_webview_window","app.unlisten","app.handle","app.once"],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.092Z"}
{"id":"icons - copy#introduction","doc_id":"icons - copy","section_title":"Introduction","doc_title":"App Icons","hierarchy":["App Icons"],"content":"{/* TODO: More platform specific explanations like macOS requiring padding in the icon (waiting for https://github.com/tauri-apps/tauri/pull/11037) */}\nTauri ships with a default iconset based on its logo. This is NOT what you want when you ship your application. To remedy this common situation, Tauri provides the `icon` command that will take an input file (`\"./app-icon.png\"` by default) and create all the icons needed for the various platforms.\n\n[NOTE]\n\n- `icon.icns` = macOS\n- `icon.ico` = Windows\n- `*.png` = Linux\n- `Square*Logo.png` & `StoreLogo.png` = Currently unused but intended for AppX/MS Store targets.\n\nSome icon types may be used on platforms other than those listed above (especially `png`). Therefore we recommend including all icons even if you intend to only build for a subset of platforms.\n\n:::","tokens_est":205,"tags":["commands","windowing","assets"],"src_path":"icons - Copy.mdx","anchors":["introduction"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.092Z","raw_frontmatter":"title: App Icons\r\nsidebar:\r\n  order: 1\r"}
{"id":"icons - copy#command-usage","doc_id":"icons - copy","section_title":"Command Usage","doc_title":"App Icons","hierarchy":["App Icons","Command Usage"],"content":"## Command Usage\n\n```console\n> pnpm tauri icon --help\n\nGenerate various icons for all major platforms\n\nUsage: pnpm run tauri icon [OPTIONS] [INPUT]\n\nArguments:\n  [INPUT]  Path to the source icon (squared PNG or SVG file with transparency) [default: ./app-icon.png]\n\nOptions:\n  -o, --output <OUTPUT>        Output directory. Default: 'icons' directory next to the tauri.conf.json file\n  -v, --verbose...             Enables verbose logging\n  -p, --png <PNG>              Custom PNG icon sizes to generate. When set, the default icons are not generated\n      --ios-color <IOS_COLOR>  The background color of the iOS icon - string as defined in the W3C's CSS Color Module Level 4 <https://www.w3.org/TR/css-color-4/> [default: #fff]\n  -h, --help                   Print help\n  -V, --version                Print version\n```\n\nThe **desktop** icons will be placed in your `src-tauri/icons` folder by default, where they will be included in your built app automatically. If you want to source your icons from a different location, you can edit this part of the `tauri.conf.json` file:\n\n```json\n{\n  \"bundle\": {\n    \"icon\": [\n      \"icons/32x32.png\",\n      \"icons/128x128.png\",\n      \"icons/128x128@2x.png\",\n      \"icons/icon.icns\",\n      \"icons/icon.ico\"\n    ]\n  }\n}\n```\n\nThe **mobile** icons will be placed into the Xcode and Android Studio projects directly!","tokens_est":338,"tags":["commands","mobile","assets","configuration","lang:console","lang:json","has_code"],"src_path":"icons - Copy.mdx","anchors":["command-usage"],"code_languages":["console","json"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.092Z"}
{"id":"icons - copy#creating-icons-manually","doc_id":"icons - copy","section_title":"Creating icons manually","doc_title":"App Icons","hierarchy":["App Icons","Creating icons manually"],"content":"## Creating icons manually\n\nIf you prefer to build these icons yourself, for example if you want to have a simpler design for small sizes or because you don't want to depend on the CLI's internal image resizing, you must make sure your icons meet some requirements:\n\n- `icon.icns`: The required layer sizes and names for the [`icns`] file are described [in the Tauri repo]\n- `icon.ico`: The [`ico`] file must include layers for 16, 24, 32, 48, 64 and 256 pixels. For an optimal display of the ICO image _in development_, the 32px layer should be the first layer.\n- `png`: The requirements for the png icons are: width == height, RGBA (RGB + Transparency), and 32bit per pixel (8bit per channel). Commonly expected sizes on desktop are 32, 128, 256, and 512 pixels. We recommend to at least match the output of `tauri icon`: `32x32.png`, `128x128.png`, `128x128@2x.png`, and `icon.png`.","tokens_est":221,"tags":["assets"],"src_path":"icons - Copy.mdx","anchors":["creating-icons-manually"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["cli"],"updated_at":"2025-09-01T10:05:53.092Z"}
{"id":"icons - copy#android","doc_id":"icons - copy","section_title":"Android","doc_title":"App Icons","hierarchy":["App Icons","Creating icons manually","Android"],"content":"### Android\n\nOn Android you will need png icons with the same requirements but in different sizes. They will also need to be placed directly in the Android Studio project:\n\n- `src-tauri/gen/android/app/src/main/res/`\n  - `mipmap-hdpi/`\n    - `ic_launcher.png` & `ic_launcher_round.png`: 49x49px\n    - `ic_launcher_foreground.png`: 162x162px\n  - `mipmap-mdpi/`\n    - `ic_launcher.png` & `ic_launcher_round.png`: 48x48px\n    - `ic_launcher_foreground.png`: 108x108px\n  - `mipmap-xhdpi/`\n    - `ic_launcher.png` & `ic_launcher_round.png`: 96x96px\n    - `ic_launcher_foreground.png`: 216x216px\n  - `mipmap-xxhdpi/`\n    - `ic_launcher.png` & `ic_launcher_round.png`: 144x144px\n    - `ic_launcher_foreground.png`: 324x324px\n  - `mipmap-xxxhdpi/`\n    - `ic_launcher.png` & `ic_launcher_round.png`: 192x192px\n    - `ic_launcher_foreground.png`: 432x432px\n\nIf `tauri icon` cannot be used, we recommend checking out Android Studio's [Image Asset Studio] instead.","tokens_est":238,"tags":["mobile","assets"],"src_path":"icons - Copy.mdx","anchors":["android"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.092Z"}
{"id":"icons - copy#ios","doc_id":"icons - copy","section_title":"iOS","doc_title":"App Icons","hierarchy":["App Icons","Creating icons manually","iOS"],"content":"### iOS\n\nOn iOS you will need png icons with the same requirements but **without transparency** and in different sizes. They will also need to be placed directly in the Xcode project into `src-tauri/gen/apple/Assets.xcassets/AppIcon.appiconset/`. The following icons are expected:\n\n- 20px in 1x, 2x, 3x, with an extra icon\n- 29px in 1x, 2x, 3x, with an extra icon\n- 40px in 1x, 2x, 3x, with an extra icon\n- 60px in 2x, 3x\n- 76px in 1x, 2x\n- 83.5px in 2x\n- 512px in 2x saved as `AppIcon-512@2x.png`\n\nThe file names are in the format of `AppIcon-{size}x{size}@{scaling}{extra}.png`. For the 20px icons this means you need icons in sizes 20x20, 40x40 and 60x60 named as `AppIcon-20x20@1x.png`, `AppIcon-20x20@2x.png`, `AppIcon-20x20@3x.png` and `2x` saved additionally as `AppIcon-20x20@2x-1.png` (\"extra icon\").\n\n[in the tauri repo]: https://github.com/tauri-apps/tauri/blob/1.x/tooling/cli/src/helpers/icns.json\n[`icns`]: https://en.wikipedia.org/wiki/Apple_Icon_Image_format\n[`ico`]: https://en.wikipedia.org/wiki/ICO_(file_format)\n[image asset studio]: https://developer.android.com/studio/write/create-app-icons","tokens_est":278,"tags":["mobile","assets"],"src_path":"icons - Copy.mdx","anchors":["ios"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["cli"],"updated_at":"2025-09-01T10:05:53.092Z"}
{"id":"icons#introduction","doc_id":"icons","section_title":"Introduction","doc_title":"App Icons","hierarchy":["App Icons"],"content":"{/* TODO: More platform specific explanations like macOS requiring padding in the icon (waiting for https://github.com/tauri-apps/tauri/pull/11037) */}\nTauri ships with a default iconset based on its logo. This is NOT what you want when you ship your application. To remedy this common situation, Tauri provides the `icon` command that will take an input file (`\"./app-icon.png\"` by default) and create all the icons needed for the various platforms.\n\n[NOTE]\n\n- `icon.icns` = macOS\n- `icon.ico` = Windows\n- `*.png` = Linux\n- `Square*Logo.png` & `StoreLogo.png` = Currently unused but intended for AppX/MS Store targets.\n\nSome icon types may be used on platforms other than those listed above (especially `png`). Therefore we recommend including all icons even if you intend to only build for a subset of platforms.\n\n:::","tokens_est":205,"tags":["commands","windowing","assets"],"src_path":"icons.mdx","anchors":["introduction"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.093Z","raw_frontmatter":"title: App Icons\r\nsidebar:\r\n  order: 1\r"}
{"id":"icons#command-usage","doc_id":"icons","section_title":"Command Usage","doc_title":"App Icons","hierarchy":["App Icons","Command Usage"],"content":"## Command Usage\n\n```console\n> pnpm tauri icon --help\n\nGenerate various icons for all major platforms\n\nUsage: pnpm run tauri icon [OPTIONS] [INPUT]\n\nArguments:\n  [INPUT]  Path to the source icon (squared PNG or SVG file with transparency) [default: ./app-icon.png]\n\nOptions:\n  -o, --output <OUTPUT>        Output directory. Default: 'icons' directory next to the tauri.conf.json file\n  -v, --verbose...             Enables verbose logging\n  -p, --png <PNG>              Custom PNG icon sizes to generate. When set, the default icons are not generated\n      --ios-color <IOS_COLOR>  The background color of the iOS icon - string as defined in the W3C's CSS Color Module Level 4 <https://www.w3.org/TR/css-color-4/> [default: #fff]\n  -h, --help                   Print help\n  -V, --version                Print version\n```\n\nThe **desktop** icons will be placed in your `src-tauri/icons` folder by default, where they will be included in your built app automatically. If you want to source your icons from a different location, you can edit this part of the `tauri.conf.json` file:\n\n```json\n{\n  \"bundle\": {\n    \"icon\": [\n      \"icons/32x32.png\",\n      \"icons/128x128.png\",\n      \"icons/128x128@2x.png\",\n      \"icons/icon.icns\",\n      \"icons/icon.ico\"\n    ]\n  }\n}\n```\n\nThe **mobile** icons will be placed into the Xcode and Android Studio projects directly!","tokens_est":338,"tags":["commands","mobile","assets","configuration","lang:console","lang:json","has_code"],"src_path":"icons.mdx","anchors":["command-usage"],"code_languages":["console","json"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.093Z"}
{"id":"icons#creating-icons-manually","doc_id":"icons","section_title":"Creating icons manually","doc_title":"App Icons","hierarchy":["App Icons","Creating icons manually"],"content":"## Creating icons manually\n\nIf you prefer to build these icons yourself, for example if you want to have a simpler design for small sizes or because you don't want to depend on the CLI's internal image resizing, you must make sure your icons meet some requirements:\n\n- `icon.icns`: The required layer sizes and names for the [`icns`] file are described [in the Tauri repo]\n- `icon.ico`: The [`ico`] file must include layers for 16, 24, 32, 48, 64 and 256 pixels. For an optimal display of the ICO image _in development_, the 32px layer should be the first layer.\n- `png`: The requirements for the png icons are: width == height, RGBA (RGB + Transparency), and 32bit per pixel (8bit per channel). Commonly expected sizes on desktop are 32, 128, 256, and 512 pixels. We recommend to at least match the output of `tauri icon`: `32x32.png`, `128x128.png`, `128x128@2x.png`, and `icon.png`.","tokens_est":221,"tags":["assets"],"src_path":"icons.mdx","anchors":["creating-icons-manually"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["cli"],"updated_at":"2025-09-01T10:05:53.093Z"}
{"id":"icons#android","doc_id":"icons","section_title":"Android","doc_title":"App Icons","hierarchy":["App Icons","Creating icons manually","Android"],"content":"### Android\n\nOn Android you will need png icons with the same requirements but in different sizes. They will also need to be placed directly in the Android Studio project:\n\n- `src-tauri/gen/android/app/src/main/res/`\n  - `mipmap-hdpi/`\n    - `ic_launcher.png` & `ic_launcher_round.png`: 49x49px\n    - `ic_launcher_foreground.png`: 162x162px\n  - `mipmap-mdpi/`\n    - `ic_launcher.png` & `ic_launcher_round.png`: 48x48px\n    - `ic_launcher_foreground.png`: 108x108px\n  - `mipmap-xhdpi/`\n    - `ic_launcher.png` & `ic_launcher_round.png`: 96x96px\n    - `ic_launcher_foreground.png`: 216x216px\n  - `mipmap-xxhdpi/`\n    - `ic_launcher.png` & `ic_launcher_round.png`: 144x144px\n    - `ic_launcher_foreground.png`: 324x324px\n  - `mipmap-xxxhdpi/`\n    - `ic_launcher.png` & `ic_launcher_round.png`: 192x192px\n    - `ic_launcher_foreground.png`: 432x432px\n\nIf `tauri icon` cannot be used, we recommend checking out Android Studio's [Image Asset Studio] instead.","tokens_est":238,"tags":["mobile","assets"],"src_path":"icons.mdx","anchors":["android"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.093Z"}
{"id":"icons#ios","doc_id":"icons","section_title":"iOS","doc_title":"App Icons","hierarchy":["App Icons","Creating icons manually","iOS"],"content":"### iOS\n\nOn iOS you will need png icons with the same requirements but **without transparency** and in different sizes. They will also need to be placed directly in the Xcode project into `src-tauri/gen/apple/Assets.xcassets/AppIcon.appiconset/`. The following icons are expected:\n\n- 20px in 1x, 2x, 3x, with an extra icon\n- 29px in 1x, 2x, 3x, with an extra icon\n- 40px in 1x, 2x, 3x, with an extra icon\n- 60px in 2x, 3x\n- 76px in 1x, 2x\n- 83.5px in 2x\n- 512px in 2x saved as `AppIcon-512@2x.png`\n\nThe file names are in the format of `AppIcon-{size}x{size}@{scaling}{extra}.png`. For the 20px icons this means you need icons in sizes 20x20, 40x40 and 60x60 named as `AppIcon-20x20@1x.png`, `AppIcon-20x20@2x.png`, `AppIcon-20x20@3x.png` and `2x` saved additionally as `AppIcon-20x20@2x-1.png` (\"extra icon\").\n\n[in the tauri repo]: https://github.com/tauri-apps/tauri/blob/1.x/tooling/cli/src/helpers/icns.json\n[`icns`]: https://en.wikipedia.org/wiki/Apple_Icon_Image_format\n[`ico`]: https://en.wikipedia.org/wiki/ICO_(file_format)\n[image asset studio]: https://developer.android.com/studio/write/create-app-icons","tokens_est":278,"tags":["mobile","assets"],"src_path":"icons.mdx","anchors":["ios"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["cli"],"updated_at":"2025-09-01T10:05:53.093Z"}
{"id":"migrate-from-tauri-1#introduction","doc_id":"migrate-from-tauri-1","section_title":"Introduction","doc_title":"Upgrade from Tauri 1.0","hierarchy":["Upgrade from Tauri 1.0"],"content":"This guide walks you through upgrading your Tauri 1.0 application to Tauri 2.0.","tokens_est":20,"tags":["migration"],"src_path":"migrate-from-tauri-1.mdx","anchors":["introduction"],"code_languages":[],"version":"1.0","permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.093Z","raw_frontmatter":"title: Upgrade from Tauri 1.0\r\ni18nReady: true\r\nsidebar:\r\n  order: 15\r"}
{"id":"migrate-from-tauri-1#preparing-for-mobile","doc_id":"migrate-from-tauri-1","section_title":"Preparing for Mobile","doc_title":"Upgrade from Tauri 1.0","hierarchy":["Upgrade from Tauri 1.0","Preparing for Mobile"],"content":"## Preparing for Mobile\n\nThe mobile interface of Tauri requires your project to output a shared library. If you are targeting mobile for your existing application, you must change your crate to produce that kind of artifact along with the desktop executable.\n\n1. Change the Cargo manifest to produce the library. Append the following block:\n\n```toml\n// src-tauri/Cargo.toml\n[lib]\nname = \"app_lib\"\ncrate-type = [\"staticlib\", \"cdylib\", \"rlib\"]\n```\n\n2. Rename `src-tauri/src/main.rs` to `src-tauri/src/lib.rs`. This file will be shared by both desktop and mobile targets.\n\n3. Rename the `main` function header in `lib.rs` to the following:\n\n```rust\n// src-tauri/src/lib.rs\n#[cfg_attr(mobile, tauri::mobile_entry_point)]\npub fn run() {\n    // your code here\n}\n```\n\nThe `tauri::mobile_entry_point` macro prepares your function to be executed on mobile.\n\n4. Recreate the `main.rs` file calling the shared run function:\n\n```rust\n// src-tauri/src/main.rs\n#![cfg_attr(not(debug_assertions), windows_subsystem = \"windows\")]\n\nfn main() {\n  app_lib::run();\n}\n```","tokens_est":263,"tags":["windowing","debugging","configuration","migration","lang:toml","lang:rust","has_code"],"src_path":"migrate-from-tauri-1.mdx","anchors":["preparing-for-mobile"],"code_languages":["toml","rust"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.093Z"}
{"id":"migrate-from-tauri-1#automated-migration","doc_id":"migrate-from-tauri-1","section_title":"Automated Migration","doc_title":"Upgrade from Tauri 1.0","hierarchy":["Upgrade from Tauri 1.0","Automated Migration"],"content":"## Automated Migration\n\n[DANGER]\n\nThis command is not a substitude for this guide! Please read the _whole_ page regardless of whether you chose to use the command.\n\n:::\n\nThe Tauri v2 CLI includes a `migrate` command that automates most of the process and helps you finish the migration:\n\nLearn more about the `migrate` command in the [Command Line Interface reference](/reference/cli/#migrate)","tokens_est":98,"tags":["commands","migration"],"src_path":"migrate-from-tauri-1.mdx","anchors":["automated-migration"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["cli","process"],"updated_at":"2025-09-01T10:05:53.093Z"}
{"id":"migrate-from-tauri-1#summary-of-changes","doc_id":"migrate-from-tauri-1","section_title":"Summary of Changes","doc_title":"Upgrade from Tauri 1.0","hierarchy":["Upgrade from Tauri 1.0","Summary of Changes"],"content":"## Summary of Changes\n\nBelow is a summary of the changes from Tauri 1.0 to Tauri 2.0:","tokens_est":21,"tags":["migration"],"src_path":"migrate-from-tauri-1.mdx","anchors":["summary-of-changes"],"code_languages":[],"version":"1.0","permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.093Z"}
{"id":"migrate-from-tauri-1#tauri-configuration","doc_id":"migrate-from-tauri-1","section_title":"Tauri Configuration","doc_title":"Upgrade from Tauri 1.0","hierarchy":["Upgrade from Tauri 1.0","Summary of Changes","Tauri Configuration"],"content":"### Tauri Configuration\n\n- `package > productName` and `package > version` moved to top-level object.\n- the binary name is no longer renamed to match `productName` automatically, so you must add a `mainBinaryName` string to the top-level object matching `productName`.\n- `package` removed.\n- `tauri` key renamed to `app`.\n- `tauri > allowlist` removed. Refer to [Migrate Permissions](#migrate-permissions).\n- `tauri > allowlist > protocol > assetScope` moved to `app > security > assetProtocol > scope`.\n- `tauri > cli` moved to `plugins > cli`.\n- `tauri > windows > fileDropEnabled` renamed to `app > windows > dragDropEnabled`.\n- `tauri > updater > active` removed.\n- `tauri > updater > dialog` removed.\n- `tauri > updater` moved to `plugins > updater`.\n- `bundle > createUpdaterArtifacts` added, must be set when using the app updater.\n  - set it to `v1Compatible` when upgrading from v1 apps that were already distributed. See the [updater guide](/plugin/updater/) for more information.\n- `tauri > systemTray` renamed to `app > trayIcon`.\n- `tauri > pattern` moved to `app > security > pattern`.\n- `tauri > bundle` moved top-level.\n- `tauri > bundle > identifier` moved to top-level object.\n- `tauri > bundle > dmg` moved to `bundle > macOS > dmg`\n- `tauri > bundle > deb` moved to `bundle > linux > deb`\n- `tauri > bundle > appimage` moved to `bundle > linux > appimage`\n- `tauri > bundle > macOS > license` removed, use `bundle > licenseFile` instead.\n- `tauri > bundle > windows > wix > license` removed, use `bundle > licenseFile` instead.\n- `tauri > bundle > windows > nsis > license` removed, use `bundle > licenseFile` instead.\n- `tauri > bundle > windows > webviewFixedRuntimePath` removed, use `bundle > windows > webviewInstallMode` instead.\n- `build > withGlobalTauri` moved to `app > withGlobalTauri`.\n- `build > distDir` renamed to `frontendDist`.\n- `build > devPath` renamed to `devUrl`.\n\n[Tauri 2.0 Configuration API reference](/reference/config/)","tokens_est":492,"tags":["permissions","windowing","tray","assets","migration"],"src_path":"migrate-from-tauri-1.mdx","anchors":["tauri-configuration"],"code_languages":[],"version":"2.0","permissions":[],"config_keys":[],"commands":[],"plugins":["dialog","cli","updater"],"updated_at":"2025-09-01T10:05:53.093Z"}
{"id":"migrate-from-tauri-1#new-cargo-features","doc_id":"migrate-from-tauri-1","section_title":"New Cargo Features","doc_title":"Upgrade from Tauri 1.0","hierarchy":["Upgrade from Tauri 1.0","Summary of Changes","New Cargo Features"],"content":"### New Cargo Features\n\n- linux-protocol-body: Enables custom protocol request body parsing, allowing the IPC to use it. Requires webkit2gtk 2.40.","tokens_est":37,"tags":["migration"],"src_path":"migrate-from-tauri-1.mdx","anchors":["new-cargo-features"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.093Z"}
{"id":"migrate-from-tauri-1#removed-cargo-features","doc_id":"migrate-from-tauri-1","section_title":"Removed Cargo Features","doc_title":"Upgrade from Tauri 1.0","hierarchy":["Upgrade from Tauri 1.0","Summary of Changes","Removed Cargo Features"],"content":"### Removed Cargo Features\n\n- reqwest-client: reqwest is now the only supported client.\n- reqwest-native-tls-vendored: use `native-tls-vendored` instead.\n- process-command-api: use the `shell` plugin instead (see instructions in the following section).\n- shell-open-api: use the `shell` plugin instead (see instructions in the following section).\n- windows7-compat: moved to the `notification` plugin.\n- updater: Updater is now a plugin.\n- linux-protocol-headers: Now enabled by default since we upgraded our minimum webkit2gtk version.\n- system-tray: renamed to `tray-icon`.","tokens_est":144,"tags":["commands","migration","windowing","assets"],"src_path":"migrate-from-tauri-1.mdx","anchors":["removed-cargo-features"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["shell","updater","notification","process","tray"],"updated_at":"2025-09-01T10:05:53.093Z"}
{"id":"migrate-from-tauri-1#rust-crate-changes","doc_id":"migrate-from-tauri-1","section_title":"Rust Crate Changes","doc_title":"Upgrade from Tauri 1.0","hierarchy":["Upgrade from Tauri 1.0","Summary of Changes","Rust Crate Changes"],"content":"### Rust Crate Changes\n\n- `api` module removed. Each API module can be found in a Tauri plugin.\n- `api::dialog` module removed. Use `tauri-plugin-dialog` instead. [Migration](#migrate-to-dialog-plugin)\n- `api::file` module removed. Use Rust's [`std::fs`](https://doc.rust-lang.org/std/fs/) instead.\n- `api::http` module removed. Use `tauri-plugin-http` instead. [Migration](#migrate-to-http-plugin)\n- `api::ip` module rewritten and moved to `tauri::ipc`. Check out the new APIs, specially `tauri::ipc::Channel`.\n- `api::path` module functions and `tauri::PathResolved` moved to `tauri::Manager::path`. [Migration](#migrate-path-to-tauri-manager)\n- `api::process::Command`, `tauri::api::shell` and `tauri::Manager::shell_scope` APIs removed. Use `tauri-plugin-shell` instead. [Migration](#migrate-to-shell-plugin)\n- `api::process::current_binary` and `tauri::api::process::restart` moved to `tauri::process`.\n- `api::version` module has been removed. Use the [semver crate](https://docs.rs/semver/latest/semver/) instead.\n- `App::clipboard_manager` and `AppHandle::clipboard_manager` removed. Use `tauri-plugin-clipboard` instead. [Migration](#migrate-to-clipboard-plugin)\n- `App::get_cli_matches` removed. Use `tauri-plugin-cli` instead. [Migration](#migrate-to-cli-plugin)\n- `App::global_shortcut_manager` and `AppHandle::global_shortcut_manager` removed. Use `tauri-plugin-global-shortcut` instead. [Migration](#migrate-to-global-shortcut-plugin)\n- `Manager::fs_scope` removed. The file system scope can be accessed via `tauri_plugin_fs::FsExt`.\n- `Plugin::PluginApi` now receives a plugin configuration as a second argument.\n- `Plugin::setup_with_config` removed. Use the updated `tauri::Plugin::PluginApi` instead.\n- `scope::ipc::RemoteDomainAccessScope::enable_tauri_api` and `scope::ipc::RemoteDomainAccessScope::enables_tauri_api` removed. Enable each core plugin individually via `scope::ipc::RemoteDomainAccessScope::add_plugin` instead.\n- `scope::IpcScope` removed, use `scope::ipc::Scope` instead.\n- `scope::FsScope`, `scope::GlobPattern` and `scope::FsScopeEvent` removed, use `scope::fs::Scope`, `scope::fs::Pattern` and `scope::fs::Event` respectively.\n- `updater` module removed. Use `tauri-plugin-updater` instead. [Migration](#migrate-to-updater-plugin)\n- `Env.args` field has been removed, use `Env.args_os` field instead.\n- `Menu`, `MenuEvent`, `CustomMenuItem`, `Submenu`, `WindowMenuEvent`, `MenuItem` and `Builder::on_menu_event` APIs removed. [Migration](#migrate-to-menu)\n- `SystemTray`, `SystemTrayHandle`, `SystemTrayMenu`, `SystemTrayMenuItemHandle`, `SystemTraySubmenu`, `MenuEntry` and `SystemTrayMenuItem` APIs removed. [Migration](#migrate-to-tray-icon-module)","tokens_est":673,"tags":["commands","migration","windowing","assets"],"src_path":"migrate-from-tauri-1.mdx","anchors":["rust-crate-changes"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["fs","shell","dialog","http","cli","updater","global-shortcut","clipboard","process","tray"],"updated_at":"2025-09-01T10:05:53.093Z"}
{"id":"migrate-from-tauri-1#javascript-api-changes","doc_id":"migrate-from-tauri-1","section_title":"JavaScript API Changes","doc_title":"Upgrade from Tauri 1.0","hierarchy":["Upgrade from Tauri 1.0","Summary of Changes","JavaScript API Changes"],"content":"### JavaScript API Changes\n\nThe `@tauri-apps/api` package no longer provides non-core modules. Only the previous `tauri` (now `core`), `path`, `event` and `window` modules are exported. All others have been moved to plugins.\n\n- `@tauri-apps/api/tauri` module renamed to `@tauri-apps/api/core`. [Migration](#migrate-to-core-module)\n- `@tauri-apps/api/cli` module removed. Use `@tauri-apps/plugin-cli` instead. [Migration](#migrate-to-cli-plugin)\n- `@tauri-apps/api/clipboard` module removed. Use `@tauri-apps/plugin-clipboard` instead. [Migration](#migrate-to-clipboard-plugin)\n- `@tauri-apps/api/dialog` module removed. Use `@tauri-apps/plugin-dialog` instead. [Migration](#migrate-to-dialog-plugin)\n- `@tauri-apps/api/fs` module removed. Use `@tauri-apps/plugin-fs` instead. [Migration](#migrate-to-file-system-plugin)\n- `@tauri-apps/api/global-shortcut` module removed. Use `@tauri-apps/plugin-global-shortcut` instead. [Migration](#migrate-to-global-shortcut-plugin)\n- `@tauri-apps/api/http` module removed. Use `@tauri-apps/plugin-http` instead. [Migration](#migrate-to-http-plugin)\n- `@tauri-apps/api/os` module removed. Use `@tauri-apps/plugin-os` instead. [Migration](#migrate-to-os-plugin)\n- `@tauri-apps/api/notification` module removed. Use `@tauri-apps/plugin-notification` instead. [Migration](#migrate-to-notification-plugin)\n- `@tauri-apps/api/process` module removed. Use `@tauri-apps/plugin-process` instead. [Migration](#migrate-to-process-plugin)\n- `@tauri-apps/api/shell` module removed. Use `@tauri-apps/plugin-shell` instead. [Migration](#migrate-to-shell-plugin)\n- `@tauri-apps/api/updater` module removed. Use `@tauri-apps/plugin-updater` instead [Migration](#migrate-to-updater-plugin)\n- `@tauri-apps/api/window` module renamed to `@tauri-apps/api/webviewWindow`. [Migration](#migrate-to-new-window-api)\n\nThe v1 plugins are now published as `@tauri-apps/plugin-<plugin-name>`. Previously they were available from git as `tauri-plugin-<plugin-name>-api`.","tokens_est":494,"tags":["migration","windowing"],"src_path":"migrate-from-tauri-1.mdx","anchors":["javascript-api-changes"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["fs","shell","dialog","http","cli","updater","global-shortcut","clipboard","notification","process","os"],"updated_at":"2025-09-01T10:05:53.093Z"}
{"id":"migrate-from-tauri-1#environment-variables-changes","doc_id":"migrate-from-tauri-1","section_title":"Environment Variables Changes","doc_title":"Upgrade from Tauri 1.0","hierarchy":["Upgrade from Tauri 1.0","Summary of Changes","Environment Variables Changes"],"content":"### Environment Variables Changes\n\nMost of the environment variables read and written by the Tauri CLI were renamed for consistency and prevention of mistakes:\n\n- `TAURI_PRIVATE_KEY` -> `TAURI_SIGNING_PRIVATE_KEY`\n- `TAURI_KEY_PASSWORD` -> `TAURI_SIGNING_PRIVATE_KEY_PASSWORD`\n- `TAURI_SKIP_DEVSERVER_CHECK` -> `TAURI_CLI_NO_DEV_SERVER_WAIT`\n- `TAURI_DEV_SERVER_PORT` -> `TAURI_CLI_PORT`\n- `TAURI_PATH_DEPTH` -> `TAURI_CLI_CONFIG_DEPTH`\n- `TAURI_FIPS_COMPLIANT` -> `TAURI_BUNDLER_WIX_FIPS_COMPLIANT`\n- `TAURI_DEV_WATCHER_IGNORE_FILE` -> `TAURI_CLI_WATCHER_IGNORE_FILENAME`\n- `TAURI_TRAY` -> `TAURI_LINUX_AYATANA_APPINDICATOR`\n- `TAURI_APPLE_DEVELOPMENT_TEAM` -> `APPLE_DEVELOPMENT_TEAM`\n- `TAURI_PLATFORM` -> `TAURI_ENV_PLATFORM`\n- `TAURI_ARCH` -> `TAURI_ENV_ARCH`\n- `TAURI_FAMILY` -> `TAURI_ENV_FAMILY`\n- `TAURI_PLATFORM_VERSION` -> `TAURI_ENV_PLATFORM_VERSION`\n- `TAURI_PLATFORM_TYPE` -> `TAURI_ENV_PLATFORM_TYPE`\n- `TAURI_DEBUG` -> `TAURI_ENV_DEBUG`","tokens_est":238,"tags":["debugging","config","migration"],"src_path":"migrate-from-tauri-1.mdx","anchors":["environment-variables-changes"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["cli"],"updated_at":"2025-09-01T10:05:53.093Z"}
{"id":"migrate-from-tauri-1#event-system","doc_id":"migrate-from-tauri-1","section_title":"Event System","doc_title":"Upgrade from Tauri 1.0","hierarchy":["Upgrade from Tauri 1.0","Summary of Changes","Event System"],"content":"### Event System\n\nThe event system was redesigned to be easier to use. Instead of relying on the source of the event, it now has a simpler implementation that relies on event targets.\n\n- The `emit` function now emits the event to all event listeners.\n- Added a new `emit_to`/`emitTo` function to trigger an event to a specific target.\n- `emit_filter` now filters based on [`EventTarget`](https://docs.rs/tauri/2.0.0/tauri/event/enum.EventTarget.html) instead of a window.\n- Renamed `listen_global` to `listen_any`. It now listens to all events regardless of their filters and targets.\n- JavaScript: `event.listen()` behaves similar to `listen_any`. It now listens to all events regardless of their filters and targets, unless a target is set in the `Options`.\n- JavaScript: `WebviewWindow.listen` etc. only listen to events emitted to the respective `EventTarget`.","tokens_est":216,"tags":["ipc","windowing","migration"],"src_path":"migrate-from-tauri-1.mdx","anchors":["event-system"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.093Z"}
{"id":"migrate-from-tauri-1#multiwebview-support","doc_id":"migrate-from-tauri-1","section_title":"Multiwebview support","doc_title":"Upgrade from Tauri 1.0","hierarchy":["Upgrade from Tauri 1.0","Summary of Changes","Multiwebview support"],"content":"### Multiwebview support\n\nTauri v2 introduces multiwebview support currently behind an `unstable` feature flag.\nIn order to support it, we renamed the Rust `Window` type to `WebviewWindow` and the Manager `get_window` function to `get_webview_window`.\n\nThe `WebviewWindow` JS API type is now re-exported from `@tauri-apps/api/webviewWindow` instead of `@tauri-apps/api/window`.","tokens_est":94,"tags":["windowing","migration"],"src_path":"migrate-from-tauri-1.mdx","anchors":["multiwebview-support"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.093Z"}
{"id":"migrate-from-tauri-1#new-origin-url-on-windows","doc_id":"migrate-from-tauri-1","section_title":"New origin URL on Windows","doc_title":"Upgrade from Tauri 1.0","hierarchy":["Upgrade from Tauri 1.0","Summary of Changes","New origin URL on Windows"],"content":"### New origin URL on Windows\n\nOn Windows the frontend files in production apps are now hosted on `http://tauri.localhost` instead of `https://tauri.localhost`. Because of this IndexedDB, LocalStorage and Cookies will be reset unless `dangerousUseHttpScheme` was used in v1. To prevent this you can set `app > windows > useHttpsScheme` to `true` or use `WebviewWindowBuilder::use_https_scheme` to keep using the `https` scheme.","tokens_est":107,"tags":["windowing","migration"],"src_path":"migrate-from-tauri-1.mdx","anchors":["new-origin-url-on-windows"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["http"],"updated_at":"2025-09-01T10:05:53.093Z"}
{"id":"migrate-from-tauri-1#detailed-migration-steps","doc_id":"migrate-from-tauri-1","section_title":"Detailed Migration Steps","doc_title":"Upgrade from Tauri 1.0","hierarchy":["Upgrade from Tauri 1.0","Detailed Migration Steps"],"content":"## Detailed Migration Steps\n\nCommon scenarios you may encounter when migrating your Tauri 1.0 app to Tauri 2.0.","tokens_est":28,"tags":["migration","mobile"],"src_path":"migrate-from-tauri-1.mdx","anchors":["detailed-migration-steps"],"code_languages":[],"version":"1.0","permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.093Z"}
{"id":"migrate-from-tauri-1#migrate-to-core-module","doc_id":"migrate-from-tauri-1","section_title":"Migrate to Core Module","doc_title":"Upgrade from Tauri 1.0","hierarchy":["Upgrade from Tauri 1.0","Detailed Migration Steps","Migrate to Core Module"],"content":"### Migrate to Core Module\n\nThe `@tauri-apps/api/tauri` module was renamed to `@tauri-apps/api/core`.\nSimply rename the module import:\n\n```diff\n- import { invoke } from \"@tauri-apps/api/tauri\"\n+ import { invoke } from \"@tauri-apps/api/core\"\n```","tokens_est":61,"tags":["migration","lang:diff","has_code"],"src_path":"migrate-from-tauri-1.mdx","anchors":["migrate-to-core-module"],"code_languages":["diff"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.093Z"}
{"id":"migrate-from-tauri-1#migrate-to-cli-plugin","doc_id":"migrate-from-tauri-1","section_title":"Migrate to CLI Plugin","doc_title":"Upgrade from Tauri 1.0","hierarchy":["Upgrade from Tauri 1.0","Detailed Migration Steps","Migrate to CLI Plugin"],"content":"### Migrate to CLI Plugin\n\nThe Rust `App::get_cli_matches` JavaScript `@tauri-apps/api/cli` APIs have been removed. Use the `@tauri-apps/plugin-cli` plugin instead:\n\n1. Add to cargo dependencies:\n\n```toml\n# Cargo.toml\n[dependencies]\ntauri-plugin-cli = \"2\"\n```\n\n2. Use in JavaScript or Rust project:\n\n```rust\nfn main() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_cli::init())\n}\n```\n\n```json\n// package.json\n{\n  \"dependencies\": {\n    \"@tauri-apps/plugin-cli\": \"^2.0.0\"\n  }\n}\n```\n\n```javascript\nconst matches = await getMatches();\n```\n\n```rust\nfn main() {\n    use tauri_plugin_cli::CliExt;\n    tauri::Builder::default()\n        .plugin(tauri_plugin_cli::init())\n        .setup(|app| {\n            let cli_matches = app.cli().matches()?;\n            Ok(())\n        })\n}\n```","tokens_est":197,"tags":["configuration","migration","lang:toml","lang:rust","lang:json","lang:javascript","has_code"],"src_path":"migrate-from-tauri-1.mdx","anchors":["migrate-to-cli-plugin"],"code_languages":["toml","rust","json","javascript"],"version":null,"permissions":[],"config_keys":["app.cli"],"commands":[],"plugins":["cli"],"updated_at":"2025-09-01T10:05:53.093Z"}
{"id":"migrate-from-tauri-1#migrate-to-clipboard-plugin","doc_id":"migrate-from-tauri-1","section_title":"Migrate to Clipboard Plugin","doc_title":"Upgrade from Tauri 1.0","hierarchy":["Upgrade from Tauri 1.0","Detailed Migration Steps","Migrate to Clipboard Plugin"],"content":"### Migrate to Clipboard Plugin\n\nThe Rust `App::clipboard_manager` and `AppHandle::clipboard_manager` and JavaScript `@tauri-apps/api/clipboard` APIs have been removed. Use the `@tauri-apps/plugin-clipboard-manager` plugin instead:\n\n```toml\n[dependencies]\ntauri-plugin-clipboard-manager = \"2\"\n```\n\n```rust\nfn main() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_clipboard_manager::init())\n}\n```\n\n```json\n// package.json\n{\n  \"dependencies\": {\n    \"@tauri-apps/plugin-clipboard-manager\": \"^2.0.0\"\n  }\n}\n```\n\n```javascript\nawait writeText('Tauri is awesome!');\nassert(await readText(), 'Tauri is awesome!');\n```\n\n```rust\nuse tauri_plugin_clipboard::{ClipboardExt, ClipKind};\ntauri::Builder::default()\n    .plugin(tauri_plugin_clipboard::init())\n    .setup(|app| {\n        app.clipboard().write(ClipKind::PlainText {\n            label: None,\n            text: \"Tauri is awesome!\".into(),\n        })?;\n        Ok(())\n    })\n```","tokens_est":234,"tags":["configuration","migration","lang:toml","lang:rust","lang:json","lang:javascript","has_code"],"src_path":"migrate-from-tauri-1.mdx","anchors":["migrate-to-clipboard-plugin"],"code_languages":["toml","rust","json","javascript"],"version":null,"permissions":[],"config_keys":["app.clipboard"],"commands":[],"plugins":["clipboard"],"updated_at":"2025-09-01T10:05:53.093Z"}
{"id":"migrate-from-tauri-1#migrate-to-dialog-plugin","doc_id":"migrate-from-tauri-1","section_title":"Migrate to Dialog Plugin","doc_title":"Upgrade from Tauri 1.0","hierarchy":["Upgrade from Tauri 1.0","Detailed Migration Steps","Migrate to Dialog Plugin"],"content":"### Migrate to Dialog Plugin\n\nThe Rust `tauri::api::dialog` JavaScript `@tauri-apps/api/dialog` APIs have been removed. Use the `@tauri-apps/plugin-dialog` plugin instead:\n\n1. Add to cargo dependencies:\n\n```toml\n# Cargo.toml\n[dependencies]\ntauri-plugin-dialog = \"2\"\n```\n\n2. Use in JavaScript or Rust project:\n\n```rust\nfn main() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_dialog::init())\n}\n```\n\n```json\n// package.json\n{\n  \"dependencies\": {\n    \"@tauri-apps/plugin-dialog\": \"^2.0.0\"\n  }\n}\n```\n\n```javascript\nconst filePath = await save({\n  filters: [\n    {\n      name: 'Image',\n      extensions: ['png', 'jpeg'],\n    },\n  ],\n});\n```\n\n```rust\nuse tauri_plugin_dialog::DialogExt;\ntauri::Builder::default()\n    .plugin(tauri_plugin_dialog::init())\n    .setup(|app| {\n        app.dialog().file().pick_file(|file_path| {\n            // do something with the optional file path here\n            // the file path is `None` if the user closed the dialog\n        });\n\n        app.dialog().message(\"Tauri is Awesome!\").show();\n        Ok(())\n     })\n```","tokens_est":265,"tags":["assets","configuration","migration","lang:toml","lang:rust","lang:json","lang:javascript","has_code"],"src_path":"migrate-from-tauri-1.mdx","anchors":["migrate-to-dialog-plugin"],"code_languages":["toml","rust","json","javascript"],"version":null,"permissions":[],"config_keys":["app.dialog"],"commands":[],"plugins":["dialog"],"updated_at":"2025-09-01T10:05:53.093Z"}
{"id":"migrate-from-tauri-1#migrate-to-file-system-plugin","doc_id":"migrate-from-tauri-1","section_title":"Migrate to File System Plugin","doc_title":"Upgrade from Tauri 1.0","hierarchy":["Upgrade from Tauri 1.0","Detailed Migration Steps","Migrate to File System Plugin"],"content":"### Migrate to File System Plugin\n\nThe Rust `App::get_cli_matches` JavaScript `@tauri-apps/api/fs` APIs have been removed. Use the [`std::fs`](https://doc.rust-lang.org/std/fs/) for Rust and `@tauri-apps/plugin-fs` plugin for JavaScript instead:\n\n1. Add to cargo dependencies:\n\n```toml\n# Cargo.toml\n[dependencies]\ntauri-plugin-fs = \"2\"\n```\n\n2. Use in JavaScript or Rust project:\n\n```rust\nfn main() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_fs::init())\n}\n```\n\n```json\n// package.json\n{\n  \"dependencies\": {\n    \"@tauri-apps/plugin-fs\": \"^2.0.0\"\n  }\n}\n```\n\n```javascript\nawait mkdir('db', { baseDir: BaseDirectory.AppLocalData });\n```\n\nSome functions and types have been renamed or removed:\n\n- `Dir` enum alias removed, use `BaseDirectory`.\n- `FileEntry`, `FsBinaryFileOption`, `FsDirOptions`, `FsOptions`, `FsTextFileOption` and `BinaryFileContents` interfaces and type aliases have been removed and replaced with new interfaces suited for each function.\n- `createDir` renamed to `mkdir`.\n- `readBinaryFile` renamed to `readFile`.\n- `removeDir` removed and replaced with `remove`.\n- `removeFile` removed and replaced with `remove`.\n- `renameFile` removed and replaced with `rename`.\n- `writeBinaryFile` renamed to `writeFile`.\n\nUse the Rust [`std::fs`](https://doc.rust-lang.org/std/fs/) functions.","tokens_est":329,"tags":["configuration","migration","lang:toml","lang:rust","lang:json","lang:javascript","has_code"],"src_path":"migrate-from-tauri-1.mdx","anchors":["migrate-to-file-system-plugin"],"code_languages":["toml","rust","json","javascript"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["fs"],"updated_at":"2025-09-01T10:05:53.093Z"}
{"id":"migrate-from-tauri-1#migrate-to-global-shortcut-plugin","doc_id":"migrate-from-tauri-1","section_title":"Migrate to Global Shortcut Plugin","doc_title":"Upgrade from Tauri 1.0","hierarchy":["Upgrade from Tauri 1.0","Detailed Migration Steps","Migrate to Global Shortcut Plugin"],"content":"### Migrate to Global Shortcut Plugin\n\nThe Rust `App::global_shortcut_manager` and `AppHandle::global_shortcut_manager` and JavaScript `@tauri-apps/api/global-shortcut` APIs have been removed. Use the `@tauri-apps/plugin-global-shortcut` plugin instead:\n\n1. Add to cargo dependencies:\n\n```toml\n# Cargo.toml\n[dependencies]\n[target.\"cfg(not(any(target_os = \\\"android\\\", target_os = \\\"ios\\\")))\".dependencies]\ntauri-plugin-global-shortcut = \"2\"\n```\n\n2. Use in JavaScript or Rust project:\n\n```rust\nfn main() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_global_shortcut::Builder::default().build())\n}\n```\n\n```json\n// package.json\n{\n  \"dependencies\": {\n    \"@tauri-apps/plugin-global-shortcut\": \"^2.0.0\"\n  }\n}\n```\n\n```javascript\nawait register('CommandOrControl+Shift+C', () => {\n  console.log('Shortcut triggered');\n});\n```\n\n```rust\nuse tauri_plugin_global_shortcut::GlobalShortcutExt;\n\ntauri::Builder::default()\n    .plugin(\n        tauri_plugin_global_shortcut::Builder::new().with_handler(|app, shortcut| {\n            println!(\"Shortcut triggered: {:?}\", shortcut);\n        })\n        .build(),\n    )\n    .setup(|app| {\n        // register a global shortcut\n        // on macOS, the Cmd key is used\n        // on Windows and Linux, the Ctrl key is used\n        app.global_shortcut().register(\"CmdOrCtrl+Y\")?;\n        Ok(())\n    })\n```","tokens_est":337,"tags":["windowing","mobile","configuration","migration","lang:toml","lang:rust","lang:json","lang:javascript","has_code"],"src_path":"migrate-from-tauri-1.mdx","anchors":["migrate-to-global-shortcut-plugin"],"code_languages":["toml","rust","json","javascript"],"version":null,"permissions":[],"config_keys":["app.global_shortcut"],"commands":[],"plugins":["global-shortcut"],"updated_at":"2025-09-01T10:05:53.093Z"}
{"id":"migrate-from-tauri-1#migrate-to-http-plugin","doc_id":"migrate-from-tauri-1","section_title":"Migrate to HTTP Plugin","doc_title":"Upgrade from Tauri 1.0","hierarchy":["Upgrade from Tauri 1.0","Detailed Migration Steps","Migrate to HTTP Plugin"],"content":"### Migrate to HTTP Plugin\n\nThe Rust `tauri::api::http` JavaScript `@tauri-apps/api/http` APIs have been removed. Use the `@tauri-apps/plugin-http` plugin instead:\n\n1. Add to cargo dependencies:\n\n```toml\n# Cargo.toml\n[dependencies]\ntauri-plugin-http = \"2\"\n```\n\n2. Use in JavaScript or Rust project:\n\n```rust\nfn main() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_http::init())\n}\n```\n\n```json\n// package.json\n{\n  \"dependencies\": {\n    \"@tauri-apps/plugin-http\": \"^2.0.0\"\n  }\n}\n```\n\n```javascript\nconst response = await fetch(\n  'https://raw.githubusercontent.com/tauri-apps/tauri/dev/package.json'\n);\n```\n\n```rust\nuse tauri_plugin_http::reqwest;\n\ntauri::Builder::default()\n    .plugin(tauri_plugin_http::init())\n    .setup(|app| {\n        let response_data = tauri::async_runtime::block_on(async {\n            let response = reqwest::get(\n                \"https://raw.githubusercontent.com/tauri-apps/tauri/dev/package.json\",\n            )\n            .await\n            .unwrap();\n            response.text().await\n        })?;\n        Ok(())\n    })\n```\n\nThe HTTP plugin re-exports [reqwest](https://docs.rs/reqwest/latest/reqwest/) so you can check out their documentation for more information.","tokens_est":303,"tags":["configuration","migration","lang:toml","lang:rust","lang:json","lang:javascript","has_code"],"src_path":"migrate-from-tauri-1.mdx","anchors":["migrate-to-http-plugin"],"code_languages":["toml","rust","json","javascript"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["http"],"updated_at":"2025-09-01T10:05:53.093Z"}
{"id":"migrate-from-tauri-1#migrate-to-notification-plugin","doc_id":"migrate-from-tauri-1","section_title":"Migrate to Notification Plugin","doc_title":"Upgrade from Tauri 1.0","hierarchy":["Upgrade from Tauri 1.0","Detailed Migration Steps","Migrate to Notification Plugin"],"content":"### Migrate to Notification Plugin\n\nThe Rust `tauri::api::notification` JavaScript `@tauri-apps/api/notification` APIs have been removed. Use the `@tauri-apps/plugin-notification` plugin instead:\n\n1. Add to cargo dependencies:\n\n```toml\n# Cargo.toml\n[dependencies]\ntauri-plugin-notification = \"2\"\n```\n\n2. Use in JavaScript or Rust project:\n\n```rust\nfn main() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_notification::init())\n}\n```\n\n```json\n// package.json\n{\n  \"dependencies\": {\n    \"@tauri-apps/plugin-notification\": \"^2.0.0\"\n  }\n}\n```\n\n```javascript\nsendNotification('Tauri is awesome!');\n```\n\n```rust\nuse tauri_plugin_notification::NotificationExt;\nuse tauri::plugin::PermissionState;\n\nfn main() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_notification::init())\n        .setup(|app| {\n            if app.notification().permission_state()? == PermissionState::Unknown {\n                app.notification().request_permission()?;\n            }\n            if app.notification().permission_state()? == PermissionState::Granted {\n                app.notification()\n                    .builder()\n                    .body(\"Tauri is awesome!\")\n                    .show()?;\n            }\n            Ok(())\n        })\n}\n```","tokens_est":313,"tags":["permissions","state","configuration","migration","lang:toml","lang:rust","lang:json","lang:javascript","has_code"],"src_path":"migrate-from-tauri-1.mdx","anchors":["migrate-to-notification-plugin"],"code_languages":["toml","rust","json","javascript"],"version":null,"permissions":[],"config_keys":["app.notification"],"commands":[],"plugins":["notification"],"updated_at":"2025-09-01T10:05:53.093Z"}
{"id":"migrate-from-tauri-1#migrate-to-menu-module","doc_id":"migrate-from-tauri-1","section_title":"Migrate to Menu Module","doc_title":"Upgrade from Tauri 1.0","hierarchy":["Upgrade from Tauri 1.0","Detailed Migration Steps","Migrate to Menu Module"],"content":"### Migrate to Menu Module\n\nThe Rust `Menu` APIs were moved to the `tauri::menu` module and refactored to use the [muda crate](https://github.com/tauri-apps/muda).","tokens_est":41,"tags":["migration"],"src_path":"migrate-from-tauri-1.mdx","anchors":["migrate-to-menu-module"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.093Z"}
{"id":"migrate-from-tauri-1#use-taurimenumenubuilder","doc_id":"migrate-from-tauri-1","section_title":"Use `tauri::menu::MenuBuilder`","doc_title":"Upgrade from Tauri 1.0","hierarchy":["Upgrade from Tauri 1.0","Detailed Migration Steps","Migrate to Menu Module","Use `tauri::menu::MenuBuilder`"],"content":"#### Use `tauri::menu::MenuBuilder`\n\nUse `tauri::menu::MenuBuilder` instead of `tauri::Menu`. Note that its constructor takes a Manager instance (one of `App`, `AppHandle` or `WebviewWindow`) as an argument:\n\n```rust\nuse tauri::menu::MenuBuilder;\n\ntauri::Builder::default()\n    .setup(|app| {\n        let menu = MenuBuilder::new(app)\n            .copy()\n            .paste()\n            .separator()\n            .undo()\n            .redo()\n            .text(\"open-url\", \"Open URL\")\n            .check(\"toggle\", \"Toggle\")\n            .icon(\"show-app\", \"Show App\", app.default_window_icon().cloned().unwrap())\n            .build()?;\n        Ok(())\n    })\n```","tokens_est":164,"tags":["windowing","assets","migration","lang:rust","has_code"],"src_path":"migrate-from-tauri-1.mdx","anchors":["use-taurimenumenubuilder"],"code_languages":["rust"],"version":null,"permissions":[],"config_keys":["app.default_window_icon"],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.093Z"}
{"id":"migrate-from-tauri-1#use-taurimenupredefinedmenuitem","doc_id":"migrate-from-tauri-1","section_title":"Use `tauri::menu::PredefinedMenuItem`","doc_title":"Upgrade from Tauri 1.0","hierarchy":["Upgrade from Tauri 1.0","Detailed Migration Steps","Migrate to Menu Module","Use `tauri::menu::PredefinedMenuItem`"],"content":"#### Use `tauri::menu::PredefinedMenuItem`\n\nUse `tauri::menu::PredefinedMenuItem` instead of `tauri::MenuItem`:\n\n```rust\nuse tauri::menu::{MenuBuilder, PredefinedMenuItem};\n\ntauri::Builder::default()\n    .setup(|app| {\n        let menu = MenuBuilder::new(app).item(&PredefinedMenuItem::copy(app)?).build()?;\n        Ok(())\n    })\n```\n\n[TIP]\n\nThe menu builder has dedicated methods to add each predefined menu item so you can call `.copy()` instead of `.item(&PredefinedMenuItem::copy(app, None)?)`.\n:::","tokens_est":126,"tags":["migration","lang:rust","has_code"],"src_path":"migrate-from-tauri-1.mdx","anchors":["use-taurimenupredefinedmenuitem"],"code_languages":["rust"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.093Z"}
{"id":"migrate-from-tauri-1#use-taurimenumenuitembuilder","doc_id":"migrate-from-tauri-1","section_title":"Use `tauri::menu::MenuItemBuilder`","doc_title":"Upgrade from Tauri 1.0","hierarchy":["Upgrade from Tauri 1.0","Detailed Migration Steps","Migrate to Menu Module","Use `tauri::menu::MenuItemBuilder`"],"content":"#### Use `tauri::menu::MenuItemBuilder`\n\nUse `tauri::menu::MenuItemBuilder` instead of `tauri::CustomMenuItem`:\n\n```rust\nuse tauri::menu::MenuItemBuilder;\n\ntauri::Builder::default()\n    .setup(|app| {\n        let toggle = MenuItemBuilder::new(\"Toggle\").accelerator(\"Ctrl+Shift+T\").build(app)?;\n        Ok(())\n    })\n```","tokens_est":80,"tags":["migration","lang:rust","has_code"],"src_path":"migrate-from-tauri-1.mdx","anchors":["use-taurimenumenuitembuilder"],"code_languages":["rust"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.093Z"}
{"id":"migrate-from-tauri-1#use-taurimenusubmenubuilder","doc_id":"migrate-from-tauri-1","section_title":"Use `tauri::menu::SubmenuBuilder`","doc_title":"Upgrade from Tauri 1.0","hierarchy":["Upgrade from Tauri 1.0","Detailed Migration Steps","Migrate to Menu Module","Use `tauri::menu::SubmenuBuilder`"],"content":"#### Use `tauri::menu::SubmenuBuilder`\n\nUse `tauri::menu::SubmenuBuilder` instead of `tauri::Submenu`:\n\n```rust\nuse tauri::menu::{MenuBuilder, SubmenuBuilder};\n\ntauri::Builder::default()\n    .setup(|app| {\n        let submenu = SubmenuBuilder::new(app, \"Sub\")\n            .text(\"Tauri\")\n            .separator()\n            .check(\"Is Awesome\")\n            .build()?;\n        let menu = MenuBuilder::new(app).item(&submenu).build()?;\n        Ok(())\n    })\n```\n\n`tauri::Builder::menu` now takes a closure because the menu needs a Manager instance to be built. See [the documentation](https://docs.rs/tauri/2.0.0/tauri/struct.Builder.html#method.menu) for more information.","tokens_est":168,"tags":["migration","lang:rust","has_code"],"src_path":"migrate-from-tauri-1.mdx","anchors":["use-taurimenusubmenubuilder"],"code_languages":["rust"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.093Z"}
{"id":"migrate-from-tauri-1#menu-events","doc_id":"migrate-from-tauri-1","section_title":"Menu Events","doc_title":"Upgrade from Tauri 1.0","hierarchy":["Upgrade from Tauri 1.0","Detailed Migration Steps","Migrate to Menu Module","Menu Events"],"content":"#### Menu Events\n\nThe Rust `tauri::Builder::on_menu_event` API was removed. Use `tauri::App::on_menu_event` or `tauri::AppHandle::on_menu_event` instead:\n\n```rust\nuse tauri::menu::{CheckMenuItemBuilder, MenuBuilder, MenuItemBuilder};\n\ntauri::Builder::default()\n    .setup(|app| {\n        let toggle = MenuItemBuilder::with_id(\"toggle\", \"Toggle\").build(app)?;\n        let check = CheckMenuItemBuilder::new(\"Mark\").build(app)?;\n        let menu = MenuBuilder::new(app).items(&[&toggle, &check]).build()?;\n\n        app.set_menu(menu)?;\n\n        app.on_menu_event(move |app, event| {\n            if event.id() == check.id() {\n                println!(\"`check` triggered, do something! is checked? {}\", check.is_checked().unwrap());\n            } else if event.id() == \"toggle\" {\n                println!(\"toggle triggered!\");\n            }\n        });\n        Ok(())\n    })\n```\n\nNote that there are two ways to check which menu item was selected: move the item to the event handler closure and compare IDs, or define a custom ID for the item through the `with_id` constructor and use that ID string to compare.\n\n[TIP]\n\nMenu items can be shared across menus, and the menu event is bound to a menu item instead of a menu or window.\nIf you don't want all listeners to be triggered when a menu item is selected, do not share menu items and use dedicated instances instead, that you could move into `tauri::WebviewWindow/WebviewWindowBuilder::on_menu_event` closure.\n:::","tokens_est":365,"tags":["windowing","migration","lang:rust","has_code"],"src_path":"migrate-from-tauri-1.mdx","anchors":["menu-events"],"code_languages":["rust"],"version":null,"permissions":[],"config_keys":["app.set_menu","app.on_menu_event"],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.093Z"}
{"id":"migrate-from-tauri-1#migrate-to-os-plugin","doc_id":"migrate-from-tauri-1","section_title":"Migrate to OS Plugin","doc_title":"Upgrade from Tauri 1.0","hierarchy":["Upgrade from Tauri 1.0","Detailed Migration Steps","Migrate to OS Plugin"],"content":"### Migrate to OS Plugin\n\nThe Rust `tauri::api::os` JavaScript `@tauri-apps/api/os` APIs have been removed. Use the `@tauri-apps/plugin-os` plugin instead:\n\n1. Add to cargo dependencies:\n\n```toml\n# Cargo.toml\n[dependencies]\ntauri-plugin-os = \"2\"\n```\n\n2. Use in JavaScript or Rust project:\n\n```rust\nfn main() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_os::init())\n}\n```\n\n```json\n// package.json\n{\n  \"dependencies\": {\n    \"@tauri-apps/plugin-os\": \"^2.0.0\"\n  }\n}\n```\n\n```javascript\nconst architecture = await arch();\n```\n\n```rust\nfn main() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_os::init())\n        .setup(|app| {\n            let os_arch = tauri_plugin_os::arch();\n            Ok(())\n        })\n}\n```","tokens_est":184,"tags":["configuration","migration","lang:toml","lang:rust","lang:json","lang:javascript","has_code"],"src_path":"migrate-from-tauri-1.mdx","anchors":["migrate-to-os-plugin"],"code_languages":["toml","rust","json","javascript"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["os"],"updated_at":"2025-09-01T10:05:53.093Z"}
{"id":"migrate-from-tauri-1#migrate-to-process-plugin","doc_id":"migrate-from-tauri-1","section_title":"Migrate to Process Plugin","doc_title":"Upgrade from Tauri 1.0","hierarchy":["Upgrade from Tauri 1.0","Detailed Migration Steps","Migrate to Process Plugin"],"content":"### Migrate to Process Plugin\n\nThe Rust `tauri::api::process` JavaScript `@tauri-apps/api/process` APIs have been removed. Use the `@tauri-apps/plugin-process` plugin instead:\n\n1. Add to cargo dependencies:\n\n```toml\n# Cargo.toml\n[dependencies]\ntauri-plugin-process = \"2\"\n```\n\n2. Use in JavaScript or Rust project:\n\n```rust\nfn main() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_process::init())\n}\n```\n\n```json\n// package.json\n{\n  \"dependencies\": {\n    \"@tauri-apps/plugin-process\": \"^2.0.0\"\n  }\n}\n```\n\n```javascript\nawait exit(0);\nawait relaunch();\n```\n\n```rust\nfn main() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_process::init())\n        .setup(|app| {\n            // exit the app with a status code\n            app.handle().exit(1);\n            // restart the app\n            app.handle().restart();\n            Ok(())\n        })\n}\n```","tokens_est":218,"tags":["configuration","migration","lang:toml","lang:rust","lang:json","lang:javascript","has_code"],"src_path":"migrate-from-tauri-1.mdx","anchors":["migrate-to-process-plugin"],"code_languages":["toml","rust","json","javascript"],"version":null,"permissions":[],"config_keys":["app.handle"],"commands":[],"plugins":["process"],"updated_at":"2025-09-01T10:05:53.093Z"}
{"id":"migrate-from-tauri-1#migrate-to-shell-plugin","doc_id":"migrate-from-tauri-1","section_title":"Migrate to Shell Plugin","doc_title":"Upgrade from Tauri 1.0","hierarchy":["Upgrade from Tauri 1.0","Detailed Migration Steps","Migrate to Shell Plugin"],"content":"### Migrate to Shell Plugin\n\nThe Rust `tauri::api::shell` JavaScript `@tauri-apps/api/shell` APIs have been removed. Use the `@tauri-apps/plugin-shell` plugin instead:\n\n1. Add to cargo dependencies:\n\n```toml\n# Cargo.toml\n[dependencies]\ntauri-plugin-shell = \"2\"\n```\n\n2. Use in JavaScript or Rust project:\n\n```rust\nfn main() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_shell::init())\n}\n```\n\n```json\n// package.json\n{\n  \"dependencies\": {\n    \"@tauri-apps/plugin-shell\": \"^2.0.0\"\n  }\n}\n```\n\n```javascript\nconst output = await Command.create('echo', 'message').execute();\n\nawait open('https://github.com/tauri-apps/tauri');\n```\n\n- Open an URL\n\n```rust\nuse tauri_plugin_shell::ShellExt;\n\nfn main() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_shell::init())\n        .setup(|app| {\n            app.shell().open(\"https://github.com/tauri-apps/tauri\", None)?;\n            Ok(())\n        })\n}\n```\n\n- Spawn a child process and retrieve the status code\n\n```rust\nuse tauri_plugin_shell::ShellExt;\n\nfn main() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_shell::init())\n        .setup(|app| {\n            let status = tauri::async_runtime::block_on(async move { app.shell().command(\"which\").args([\"ls\"]).status().await.unwrap() });\n            println!(\"`which` finished with status: {:?}\", status.code());\n            Ok(())\n        })\n}\n```\n\n- Spawn a child process and capture its output\n\n```rust\nuse tauri_plugin_shell::ShellExt;\n\nfn main() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_shell::init())\n        .setup(|app| {\n            let output = tauri::async_runtime::block_on(async move { app.shell().command(\"echo\").args([\"TAURI\"]).output().await.unwrap() });\n            assert!(output.status.success());\n            assert_eq!(String::from_utf8(output.stdout).unwrap(), \"TAURI\");\n            Ok(())\n        })\n}\n```\n\n- Spawn a child process and read its events asynchronously:\n\n```rust\nuse tauri_plugin_shell::{ShellExt, process::CommandEvent};\n\nfn main() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_shell::init())\n        .setup(|app| {\n            let handle = app.handle().clone();\n            tauri::async_runtime::spawn(async move {\n                let (mut rx, mut child) = handle.shell().command(\"cargo\")\n                    .args([\"tauri\", \"dev\"])\n                    .spawn()\n                    .expect(\"Failed to spawn cargo\");\n\n                let mut i = 0;\n                while let Some(event) = rx.recv().await {\n                    if let CommandEvent::Stdout(line) = event {\n                        println!(\"got: {}\", String::from_utf8(line).unwrap());\n                       i += 1;\n                       if i == 4 {\n                           child.write(\"message from Rust\\n\".as_bytes()).unwrap();\n                           i = 0;\n                       }\n                   }\n                }\n            });\n            Ok(())\n        })\n}\n```","tokens_est":737,"tags":["commands","configuration","migration","lang:toml","lang:rust","lang:json","lang:javascript","has_code"],"src_path":"migrate-from-tauri-1.mdx","anchors":["migrate-to-shell-plugin"],"code_languages":["toml","rust","json","javascript"],"version":null,"permissions":[],"config_keys":["app.shell","app.handle"],"commands":[],"plugins":["shell","process"],"updated_at":"2025-09-01T10:05:53.093Z"}
{"id":"migrate-from-tauri-1#migrate-to-tray-icon-module","doc_id":"migrate-from-tauri-1","section_title":"Migrate to Tray Icon Module","doc_title":"Upgrade from Tauri 1.0","hierarchy":["Upgrade from Tauri 1.0","Detailed Migration Steps","Migrate to Tray Icon Module"],"content":"### Migrate to Tray Icon Module\n\nThe Rust `SystemTray` APIs were renamed to `TrayIcon` for consistency. The new APIs can be found in the Rust `tray` module.","tokens_est":39,"tags":["tray","assets","migration"],"src_path":"migrate-from-tauri-1.mdx","anchors":["migrate-to-tray-icon-module"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["tray"],"updated_at":"2025-09-01T10:05:53.093Z"}
{"id":"migrate-from-tauri-1#use-tauritraytrayiconbuilder","doc_id":"migrate-from-tauri-1","section_title":"Use `tauri::tray::TrayIconBuilder`","doc_title":"Upgrade from Tauri 1.0","hierarchy":["Upgrade from Tauri 1.0","Detailed Migration Steps","Migrate to Tray Icon Module","Use `tauri::tray::TrayIconBuilder`"],"content":"#### Use `tauri::tray::TrayIconBuilder`\n\nUse `tauri::tray::TrayIconBuilder` instead of `tauri::SystemTray`:\n\n```rust\nlet tray = tauri::tray::TrayIconBuilder::with_id(\"my-tray\").build(app)?;\n```\n\nSee [TrayIconBuilder](https://docs.rs/tauri/2.0.0/tauri/tray/struct.TrayIconBuilder.html) for more information.","tokens_est":77,"tags":["tray","assets","migration","lang:rust","has_code"],"src_path":"migrate-from-tauri-1.mdx","anchors":["use-tauritraytrayiconbuilder"],"code_languages":["rust"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["tray"],"updated_at":"2025-09-01T10:05:53.093Z"}
{"id":"migrate-from-tauri-1#migrate-to-menu","doc_id":"migrate-from-tauri-1","section_title":"Migrate to Menu","doc_title":"Upgrade from Tauri 1.0","hierarchy":["Upgrade from Tauri 1.0","Detailed Migration Steps","Migrate to Tray Icon Module","Migrate to Menu"],"content":"#### Migrate to Menu\n\nUse `tauri::menu::Menu` instead of `tauri::SystemTrayMenu`, `tauri::menu::Submenu` instead of `tauri::SystemTraySubmenu` and `tauri::menu::PredefinedMenuItem` instead of `tauri::SystemTrayMenuItem`.","tokens_est":55,"tags":["migration"],"src_path":"migrate-from-tauri-1.mdx","anchors":["migrate-to-menu"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.093Z"}
{"id":"migrate-from-tauri-1#tray-events","doc_id":"migrate-from-tauri-1","section_title":"Tray Events","doc_title":"Upgrade from Tauri 1.0","hierarchy":["Upgrade from Tauri 1.0","Detailed Migration Steps","Migrate to Tray Icon Module","Tray Events"],"content":"#### Tray Events\n\n`tauri::SystemTray::on_event` have been split into `tauri::tray::TrayIconBuilder::on_menu_event` and `tauri::tray::TrayIconBuilder::on_tray_icon_event`:\n\n```rust\nuse tauri::{\n    menu::{MenuBuilder, MenuItemBuilder},\n    tray::{MouseButton, MouseButtonState, TrayIconBuilder, TrayIconEvent},\n};\n\ntauri::Builder::default()\n    .setup(|app| {\n        let toggle = MenuItemBuilder::with_id(\"toggle\", \"Toggle\").build(app)?;\n        let menu = MenuBuilder::new(app).items(&[&toggle]).build()?;\n        let tray = TrayIconBuilder::new()\n            .menu(&menu)\n            .on_menu_event(move |app, event| match event.id().as_ref() {\n                \"toggle\" => {\n                    println!(\"toggle clicked\");\n                }\n                _ => (),\n            })\n            .on_tray_icon_event(|tray, event| {\n                if let TrayIconEvent::Click {\n                        button: MouseButton::Left,\n                        button_state: MouseButtonState::Up,\n                        ..\n                } = event\n                {\n                    let app = tray.app_handle();\n                    if let Some(webview_window) = app.get_webview_window(\"main\") {\n                       let _ = webview_window.unminimize();\n                       let _ = webview_window.show();\n                       let _ = webview_window.set_focus();\n                    }\n                }\n            })\n            .build(app)?;\n\n        Ok(())\n    })\n```","tokens_est":368,"tags":["windowing","state","tray","assets","migration","lang:rust","has_code"],"src_path":"migrate-from-tauri-1.mdx","anchors":["tray-events"],"code_languages":["rust"],"version":null,"permissions":[],"config_keys":["app.get_webview_window"],"commands":[],"plugins":["tray"],"updated_at":"2025-09-01T10:05:53.093Z"}
{"id":"migrate-from-tauri-1#migrate-to-updater-plugin","doc_id":"migrate-from-tauri-1","section_title":"Migrate to Updater Plugin","doc_title":"Upgrade from Tauri 1.0","hierarchy":["Upgrade from Tauri 1.0","Detailed Migration Steps","Migrate to Updater Plugin"],"content":"### Migrate to Updater Plugin\n\n[CAUTION]\n\nThe built-in dialog with an automatic update check was removed, use the Rust and JS APIs to check for and install updates instead. Failing to do so will prevent your users from getting further updates!\n\n:::\n\nThe Rust `tauri::updater` and JavaScript `@tauri-apps/api-updater` APIs have been removed. To set a custom updater target with the `@tauri-apps/plugin-updater`:\n\n1. Add to cargo dependencies:\n\n```toml\n[dependencies]\ntauri-plugin-updater = \"2\"\n```\n\n2. Use in JavaScript or Rust project:\n\n```rust\nfn main() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_updater::Builder::new().build())\n}\n```\n\n```json\n// package.json\n{\n  \"dependencies\": {\n    \"@tauri-apps/plugin-updater\": \"^2.0.0\"\n  }\n}\n```\n\n```javascript\nconst update = await check();\nif (update?.available) {\n  console.log(`Update to ${update.version} available! Date: ${update.date}`);\n  console.log(`Release notes: ${update.body}`);\n  await update.downloadAndInstall();\n  // requires the `process` plugin\n  await relaunch();\n}\n```\n\nTo check for updates:\n\n```rust\nuse tauri_plugin_updater::UpdaterExt;\n\nfn main() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_updater::Builder::new().build())\n        .setup(|app| {\n            let handle = app.handle();\n            tauri::async_runtime::spawn(async move {\n                let response = handle.updater().check().await;\n            });\n            Ok(())\n        })\n}\n```\n\nTo set a custom updater target:\n\n```rust\nfn main() {\n    let mut updater = tauri_plugin_updater::Builder::new();\n    #[cfg(target_os = \"macos\")]\n    {\n        updater = updater.target(\"darwin-universal\");\n    }\n    tauri::Builder::default()\n        .plugin(updater.build())\n}\n```","tokens_est":434,"tags":["configuration","migration","lang:toml","lang:rust","lang:json","lang:javascript","has_code"],"src_path":"migrate-from-tauri-1.mdx","anchors":["migrate-to-updater-plugin"],"code_languages":["toml","rust","json","javascript"],"version":null,"permissions":[],"config_keys":["app.handle"],"commands":[],"plugins":["dialog","updater","process"],"updated_at":"2025-09-01T10:05:53.093Z"}
{"id":"migrate-from-tauri-1#migrate-path-to-tauri-manager","doc_id":"migrate-from-tauri-1","section_title":"Migrate Path to Tauri Manager","doc_title":"Upgrade from Tauri 1.0","hierarchy":["Upgrade from Tauri 1.0","Detailed Migration Steps","Migrate Path to Tauri Manager"],"content":"### Migrate Path to Tauri Manager\n\nThe Rust `tauri::api::path` module functions and `tauri::PathResolver` have been moved to `tauri::Manager::path`:\n\n```rust\nuse tauri::{path::BaseDirectory, Manager};\n\ntauri::Builder::default()\n    .setup(|app| {\n        let home_dir_path = app.path().home_dir().expect(\"failed to get home dir\");\n\n        let path = app.path().resolve(\"path/to/something\", BaseDirectory::Config)?;\n\n        Ok(())\n  })\n```","tokens_est":110,"tags":["migration","lang:rust","has_code"],"src_path":"migrate-from-tauri-1.mdx","anchors":["migrate-path-to-tauri-manager"],"code_languages":["rust"],"version":null,"permissions":[],"config_keys":["app.path"],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.093Z"}
{"id":"migrate-from-tauri-1#migrate-to-new-window-api","doc_id":"migrate-from-tauri-1","section_title":"Migrate to new Window API","doc_title":"Upgrade from Tauri 1.0","hierarchy":["Upgrade from Tauri 1.0","Detailed Migration Steps","Migrate to new Window API"],"content":"### Migrate to new Window API\n\nOn the Rust side, `Window` was renamed to `WebviewWindow`, its builder `WindowBuilder` is now named `WebviewWindowBuilder` and `WindowUrl` is now named `WebviewUrl`.\n\nAdditionally, the `Manager::get_window` function was renamed to `get_webview_window` and\nthe window's `parent_window` API was renamed to `parent_raw` to support a high level window parent API.\n\nOn the JavaScript side, the `WebviewWindow` class is now exported in the `@tauri-apps/api/webviewWindow` path.\n\nThe `onMenuClicked` function was removed, you can intercept menu events when creating a menu in JavaScript instead.","tokens_est":155,"tags":["windowing","migration"],"src_path":"migrate-from-tauri-1.mdx","anchors":["migrate-to-new-window-api"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.093Z"}
{"id":"migrate-from-tauri-1#migrate-embedded-additional-files-resources","doc_id":"migrate-from-tauri-1","section_title":"Migrate Embedded Additional Files (Resources)","doc_title":"Upgrade from Tauri 1.0","hierarchy":["Upgrade from Tauri 1.0","Detailed Migration Steps","Migrate Embedded Additional Files (Resources)"],"content":"### Migrate Embedded Additional Files (Resources)\n\nOn the JavaScript side, make sure you [Migrate to File System Plugin](#migrate-to-file-system-plugin).\nAdditionally, note the changes made to the v1 allowlist in [Migrate Permissions](#migrate-permissions).\n\nOn the Rust side, make sure you [Migrate Path to Tauri Manager](#migrate-path-to-tauri-manager).","tokens_est":89,"tags":["permissions","resources","migration"],"src_path":"migrate-from-tauri-1.mdx","anchors":["migrate-embedded-additional-files-resources"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.093Z"}
{"id":"migrate-from-tauri-1#migrate-embedded-external-binaries-sidecar","doc_id":"migrate-from-tauri-1","section_title":"Migrate Embedded External Binaries (Sidecar)","doc_title":"Upgrade from Tauri 1.0","hierarchy":["Upgrade from Tauri 1.0","Detailed Migration Steps","Migrate Embedded External Binaries (Sidecar)"],"content":"### Migrate Embedded External Binaries (Sidecar)\n\nIn Tauri v1, the external binaries and their arguments were defined in the allowlist. In v2, use the new permissions system. Read [Migrate Permissions](#migrate-permissions) for more information.\n\nOn the JavaScript side, make sure you [Migrate to Shell Plugin](#migrate-to-shell-plugin).\n\nOn the Rust side, `tauri::api::process` API has been removed. Use `tauri_plugin_shell::ShellExt` and `tauri_plugin_shell::process::CommandEvent` APIs instead. Read the [Embedding External Binaries](/develop/sidecar/#running-it-from-rust) guide to see how.\n\nThe \"process-command-api\" features flag has been removed in v2. So running the external binaries does not require this feature to be defined in the Tauri config anymore.","tokens_est":191,"tags":["commands","permissions","sidecar","migration"],"src_path":"migrate-from-tauri-1.mdx","anchors":["migrate-embedded-external-binaries-sidecar"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["shell","process"],"updated_at":"2025-09-01T10:05:53.093Z"}
{"id":"migrate-from-tauri-1#migrate-permissions","doc_id":"migrate-from-tauri-1","section_title":"Migrate Permissions","doc_title":"Upgrade from Tauri 1.0","hierarchy":["Upgrade from Tauri 1.0","Detailed Migration Steps","Migrate Permissions"],"content":"### Migrate Permissions\n\nThe v1 allowlist have been rewritten to a completely new system for permissions that works for individual plugins and is much more configurable for multiwindow and remote URL support.\nThis new system works like an access control list (ACL) where you can allow or deny commands, allocate permissions to a specific set of windows and domains, and define access scopes.\n\nTo enable permissions for your app, you must create capability files inside the `src-tauri/capabilities` folder, and Tauri will automatically configure everything else for you.\n\nThe `migrate` CLI command automatically parses your v1 allowlist and generates the associated capability file.\n\nTo learn more about permissions and capabilities, see [the security documentation](/security/).","tokens_est":195,"tags":["commands","permissions","windowing","migration"],"src_path":"migrate-from-tauri-1.mdx","anchors":["migrate-permissions"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["cli"],"updated_at":"2025-09-01T10:05:53.093Z"}
{"id":"migrate-from-tauri-2-beta#introduction","doc_id":"migrate-from-tauri-2-beta","section_title":"Introduction","doc_title":"Upgrade from Tauri 2.0 Beta","hierarchy":["Upgrade from Tauri 2.0 Beta"],"content":"This guide walks you through upgrading your Tauri 2.0 beta application to Tauri 2.0 release candidate.","tokens_est":26,"tags":["migration"],"src_path":"migrate-from-tauri-2-beta.mdx","anchors":["introduction"],"code_languages":[],"version":"2.0","permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.097Z","raw_frontmatter":"title: Upgrade from Tauri 2.0 Beta\r\ni18nReady: false\r\nsidebar:\r\n  order: 16\r"}
{"id":"migrate-from-tauri-2-beta#automated-migration","doc_id":"migrate-from-tauri-2-beta","section_title":"Automated Migration","doc_title":"Upgrade from Tauri 2.0 Beta","hierarchy":["Upgrade from Tauri 2.0 Beta","Automated Migration"],"content":"## Automated Migration\n\nThe Tauri v2 CLI includes a `migrate` command that automates most of the process and helps you finish the migration:\n\nLearn more about the `migrate` command in the [Command Line Interface reference](/reference/cli/#migrate)","tokens_est":62,"tags":["commands","migration"],"src_path":"migrate-from-tauri-2-beta.mdx","anchors":["automated-migration"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["cli","process"],"updated_at":"2025-09-01T10:05:53.097Z"}
{"id":"migrate-from-tauri-2-beta#breaking-changes","doc_id":"migrate-from-tauri-2-beta","section_title":"Breaking Changes","doc_title":"Upgrade from Tauri 2.0 Beta","hierarchy":["Upgrade from Tauri 2.0 Beta","Breaking Changes"],"content":"## Breaking Changes\n\nWe have had several breaking changes going from beta to release candidate. These can be either auto-migrated (see above) or manually performed.","tokens_est":41,"tags":["migration"],"src_path":"migrate-from-tauri-2-beta.mdx","anchors":["breaking-changes"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.097Z"}
{"id":"migrate-from-tauri-2-beta#tauri-core-plugins","doc_id":"migrate-from-tauri-2-beta","section_title":"Tauri Core Plugins","doc_title":"Upgrade from Tauri 2.0 Beta","hierarchy":["Upgrade from Tauri 2.0 Beta","Breaking Changes","Tauri Core Plugins"],"content":"### Tauri Core Plugins\n\nWe changed how Tauri built-in plugins are addressed in the capabilities [PR #10390](https://github.com/tauri-apps/tauri/pull/10390).\n\nTo migrate from the latest beta version you need to prepend all core permission identifiers in your capabilities with `core:` or switch to the `core:default` permission and remove old core plugin identifiers.\n\n```json\n...\n\"permissions\": [\n    \"path:default\",\n    \"event:default\",\n    \"window:default\",\n    \"app:default\",\n    \"image:default\",\n    \"resources:default\",\n    \"menu:default\",\n    \"tray:default\",\n]\n...\n```\n\n```json\n...\n\"permissions\": [\n    \"core:path:default\",\n    \"core:event:default\",\n    \"core:window:default\",\n    \"core:app:default\",\n    \"core:image:default\",\n    \"core:resources:default\",\n    \"core:menu:default\",\n    \"core:tray:default\",\n]\n...\n```\n\nWe also added a new special `core:default` permission set which will contain all default permissions of all core plugins, so you can simplify the permissions boilerplate in your capabilities config.\n\n```json\n...\n\"permissions\": [\n    \"core:default\"\n]\n...\n```","tokens_est":270,"tags":["permissions","windowing","resources","migration","lang:json","has_code"],"src_path":"migrate-from-tauri-2-beta.mdx","anchors":["tauri-core-plugins"],"code_languages":["json"],"version":null,"permissions":["core:default","core:path:default","core:event:default","core:window:default","core:app:default","core:image:default","core:resources:default","core:menu:default","core:tray:default"],"config_keys":[],"commands":[],"plugins":["tray"],"updated_at":"2025-09-01T10:05:53.097Z"}
{"id":"migrate-from-tauri-2-beta#built-in-development-server","doc_id":"migrate-from-tauri-2-beta","section_title":"Built-In Development Server","doc_title":"Upgrade from Tauri 2.0 Beta","hierarchy":["Upgrade from Tauri 2.0 Beta","Breaking Changes","Built-In Development Server"],"content":"### Built-In Development Server\n\nWe introduced changes to the network exposure of the built-in development server [PR #10437](https://github.com/tauri-apps/tauri/pull/10437) and [PR #10456](https://github.com/tauri-apps/tauri/pull/10456).\n\nThe built-in mobile development server no longer exposes network wide and tunnels traffic from the local machine directly to the device.\n\nCurrently this improvement does not automatically apply when running on iOS devices (either directly or from Xcode).\nIn this case we default to using the public network address for the development server,\nbut there's a way around it which involves opening Xcode to automatically start a connection between your macOS machine and your connected iOS device,\nthen running `tauri ios dev --force-ip-prompt` to select the iOS device's TUN address (ends with **::2**).\n\nYour development server configuration needs to adapt to this change if running on a physical iOS device is intended.\nPreviously we recommended checking if the `TAURI_ENV_PLATFORM` environment variable matches either `android` or `ios`,\nbut since we can now connect to localhost unless using an iOS device, you should instead check the `TAURI_DEV_HOST` environment variable.\nHere's an example of a Vite configuration migration:\n\n- 2.0.0-beta:\n\n```js\nconst mobile = !!/android|ios/.exec(process.env.TAURI_ENV_PLATFORM);\n\nexport default defineConfig({\n  plugins: [svelte()],\n  clearScreen: false,\n  server: {\n    host: mobile ? '0.0.0.0' : false,\n    port: 1420,\n    strictPort: true,\n    hmr: mobile\n      ? {\n          protocol: 'ws',\n          host: internalIpV4Sync(),\n          port: 1421,\n        }\n      : undefined,\n  },\n});\n```\n\n- 2.0.0:\n\n```js\nconst host = process.env.TAURI_DEV_HOST;\n\nexport default defineConfig({\n  plugins: [svelte()],\n  clearScreen: false,\n  server: {\n    host: host || false,\n    port: 1420,\n    strictPort: true,\n    hmr: host\n      ? {\n          protocol: 'ws',\n          host: host,\n          port: 1430,\n        }\n      : undefined,\n  },\n});\n```\n\n[NOTE]\n\nThe `internal-ip` NPM package is no longer required, you can directly use the TAURI_DEV_HOST value instead.\n:::","tokens_est":535,"tags":["migration","tooling","mobile","config","lang:js","has_code"],"src_path":"migrate-from-tauri-2-beta.mdx","anchors":["built-in-development-server"],"code_languages":["js"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["process"],"updated_at":"2025-09-01T10:05:53.097Z"}
{"id":"prerequisites#introduction","doc_id":"prerequisites","section_title":"Introduction","doc_title":"Prerequisites","hierarchy":["Prerequisites"],"content":"In order to get started building your project with Tauri you'll first need to install a few dependencies:\n\n1. [System Dependencies](#system-dependencies)\n2. [Rust](#rust)\n3. [Configure for Mobile Targets](#configure-for-mobile-targets) (only required if developing for mobile)","tokens_est":69,"tags":["setup"],"src_path":"prerequisites.mdx","anchors":["introduction"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.097Z","raw_frontmatter":"title: Prerequisites\r\ni18nReady: true\r\nsidebar:\r\n  order: 0\r"}
{"id":"prerequisites#system-dependencies","doc_id":"prerequisites","section_title":"System Dependencies","doc_title":"Prerequisites","hierarchy":["Prerequisites","System Dependencies"],"content":"## System Dependencies\n\nFollow the link to get started for your respective operating system:\n\n- [Linux](#linux) (see below for specific distributions)\n- [macOS Catalina (10.15) and later](#macos)\n- [Windows 7 and later](#windows)","tokens_est":57,"tags":["windowing","setup"],"src_path":"prerequisites.mdx","anchors":["system-dependencies"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.097Z"}
{"id":"prerequisites#linux","doc_id":"prerequisites","section_title":"Linux","doc_title":"Prerequisites","hierarchy":["Prerequisites","System Dependencies","Linux"],"content":"### Linux\n\nTauri requires various system dependencies for development on Linux. These may be different depending on your distribution but we've included some popular distributions below to help you get setup.\n\n  \n\n```sh\nsudo apt update\nsudo apt install libwebkit2gtk-4.1-dev \\\n  build-essential \\\n  curl \\\n  wget \\\n  file \\\n  libxdo-dev \\\n  libssl-dev \\\n  libayatana-appindicator3-dev \\\n  librsvg2-dev\n```\n\n  \n  \n\n```sh\nsudo pacman -Syu\nsudo pacman -S --needed \\\n  webkit2gtk-4.1 \\\n  base-devel \\\n  curl \\\n  wget \\\n  file \\\n  openssl \\\n  appmenu-gtk-module \\\n  libappindicator-gtk3 \\\n  librsvg \\\n  xdotool\n```\n\n  \n  \n\n```sh\nsudo dnf check-update\nsudo dnf install webkit2gtk4.1-devel \\\n  openssl-devel \\\n  curl \\\n  wget \\\n  file \\\n  libappindicator-gtk3-devel \\\n  librsvg2-devel \\\n  libxdo-devel\nsudo dnf group install \"c-development\"\n```\n\n  \n  \n\n```sh\nsudo emerge --ask \\\n  net-libs/webkit-gtk:4.1 \\\n  dev-libs/libappindicator \\\n  net-misc/curl \\\n  net-misc/wget \\\n  sys-apps/file\n```\n\n  \n  \n\n```sh\nsudo zypper up\nsudo zypper in webkit2gtk3-devel \\\n  libopenssl-devel \\\n  curl \\\n  wget \\\n  file \\\n  libappindicator3-1 \\\n  librsvg-devel\nsudo zypper in -t pattern devel_basis\n```\n\n  \n  \n```sh\nsudo apk add \\\n  build-base \\\n  webkit2gtk \\\n  curl \\\n  wget \\\n  file \\\n  openssl \\\n  libayatana-appindicator-dev \\\n  librsvg\n```\n  \n  \n\n[NOTE]\n\nInstructions for Nix/NixOS can be found in the [NixOS Wiki](https://wiki.nixos.org/wiki/Tauri).\n:::\n\n  \n\nIf your distribution isn't included above then you may want to check [Awesome Tauri on GitHub](https://github.com/tauri-apps/awesome-tauri#guides) to see if a guide has been created.\n\nNext: [Install Rust](#rust)","tokens_est":413,"tags":["setup","lang:sh","has_code"],"src_path":"prerequisites.mdx","anchors":["linux"],"code_languages":["sh"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.097Z"}
{"id":"prerequisites#macos","doc_id":"prerequisites","section_title":"macOS","doc_title":"Prerequisites","hierarchy":["Prerequisites","System Dependencies","macOS"],"content":"### macOS\n\nTauri uses [Xcode](https://developer.apple.com/xcode/resources/) and various macOS and iOS development dependencies.\n\nDownload and install Xcode from one of the following places:\n\n- [Mac App Store](https://apps.apple.com/gb/app/xcode/id497799835?mt=12)\n- [Apple Developer website](https://developer.apple.com/xcode/resources/).\n\nBe sure to launch Xcode after installing so that it can finish setting up.\n\n<details>\n<summary>Only developing for desktop targets?</summary>\nIf you're only planning to develop desktop apps and not targeting iOS then you can install Xcode Command Line Tools instead:\n\n```sh\nxcode-select --install\n```\n\n</details>\n\nNext: [Install Rust](#rust)","tokens_est":170,"tags":["commands","mobile","resources","setup","lang:sh","has_code"],"src_path":"prerequisites.mdx","anchors":["macos"],"code_languages":["sh"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.097Z"}
{"id":"prerequisites#windows","doc_id":"prerequisites","section_title":"Windows","doc_title":"Prerequisites","hierarchy":["Prerequisites","System Dependencies","Windows"],"content":"### Windows\n\nTauri uses the Microsoft C++ Build Tools for development as well as Microsoft Edge WebView2. These are both required for development on Windows.\n\nFollow the steps below to install the required dependencies.","tokens_est":55,"tags":["windowing","setup"],"src_path":"prerequisites.mdx","anchors":["windows"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.097Z"}
{"id":"prerequisites#microsoft-c-build-tools","doc_id":"prerequisites","section_title":"Microsoft C++ Build Tools","doc_title":"Prerequisites","hierarchy":["Prerequisites","System Dependencies","Windows","Microsoft C++ Build Tools"],"content":"#### Microsoft C++ Build Tools\n\n1. Download the [Microsoft C++ Build Tools](https://visualstudio.microsoft.com/visual-cpp-build-tools/) installer and open it to begin installation.\n2. During installation check the \"Desktop development with C++\" option.\n\n![Visual Studio C++ Build Tools installer screenshot](@assets/start/prerequisites/visual-studio-build-tools-installer.png)\n\nNext: [Install WebView2](#webview2).","tokens_est":104,"tags":["assets","setup"],"src_path":"prerequisites.mdx","anchors":["microsoft-c-build-tools"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.097Z"}
{"id":"prerequisites#webview2","doc_id":"prerequisites","section_title":"WebView2","doc_title":"Prerequisites","hierarchy":["Prerequisites","System Dependencies","Windows","WebView2"],"content":"#### WebView2\n\n[TIP]\n\nWebView 2 is already installed on Windows 10 (from version 1803 onward) and later versions of Windows. If you are developing on one of these versions then you can skip this step and go directly to [installing Rust](#rust).\n:::\n\nTauri uses Microsoft Edge WebView2 to render content on Windows.\n\nInstall WebView2 by visiting the [WebView2 Runtime download section](https://developer.microsoft.com/en-us/microsoft-edge/webview2/#download-section). Download the \"Evergreen Bootstrapper\" and install it.\n\nNext: [Check VBSCRIPT](#vbscript-for-msi-installers)","tokens_est":144,"tags":["windowing","setup"],"src_path":"prerequisites.mdx","anchors":["webview2"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.097Z"}
{"id":"prerequisites#vbscript-for-msi-installers","doc_id":"prerequisites","section_title":"VBSCRIPT (for MSI installers)","doc_title":"Prerequisites","hierarchy":["Prerequisites","System Dependencies","Windows","VBSCRIPT (for MSI installers)"],"content":"#### VBSCRIPT (for MSI installers)\n\n[NOTE]\n\nThis is only required if you plan to build MSI installer packages (`\"targets\": \"msi\"` or `\"targets\": \"all\"` in `tauri.conf.json`).\n:::\n\nBuilding MSI packages on Windows requires the VBSCRIPT optional feature to be enabled. This feature is enabled by default on most Windows installations, but may have been disabled on some systems.\n\nIf you encounter errors like `failed to run light.exe` when building MSI packages, you may need to enable the VBSCRIPT feature:\n\n1. Open **Settings** → **Apps** → **Optional features** → **More Windows features**\n2. Locate **VBSCRIPT** in the list and ensure it's checked\n3. Click **Next** and restart your computer if prompted\n\n**Note:** VBSCRIPT is currently enabled by default on most Windows installations, but is [being deprecated](https://techcommunity.microsoft.com/blog/windows-itpro-blog/vbscript-deprecation-timelines-and-next-steps/4148301) and may be disabled in future Windows versions.\n\nNext: [Install Rust](#rust)","tokens_est":252,"tags":["windowing","configuration","setup"],"src_path":"prerequisites.mdx","anchors":["vbscript-for-msi-installers"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.097Z"}
{"id":"prerequisites#rust","doc_id":"prerequisites","section_title":"Rust","doc_title":"Prerequisites","hierarchy":["Prerequisites","Rust"],"content":"## Rust\n\nTauri is built with [Rust](https://www.rust-lang.org) and requires it for development. Install Rust using one of following methods. You can view more installation methods at https://www.rust-lang.org/tools/install.\n\n  \n\nInstall via [`rustup`](https://github.com/rust-lang/rustup) using the following command:\n\n```sh\ncurl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh\n```\n\n[TIP]\n\nWe have audited this bash script, and it does what it says it is supposed to do. Nevertheless, before blindly curl-bashing a script, it is always wise to look at it first.\n\nHere is the file as a plain script: [rustup.sh](https://sh.rustup.rs/)\n:::\n\n  \n  \n\nVisit https://www.rust-lang.org/tools/install to install `rustup`.\n\nAlternatively, you can use `winget` to install rustup using the following command in PowerShell:\n\n```powershell\nwinget install --id Rustlang.Rustup\n```\n\n[CAUTION]\n\nFor full support for Tauri and tools like [`trunk`](https://trunkrs.dev/) make sure the MSVC Rust toolchain is the selected `default host triple` in the installer dialog. Depending on your system it should be either `x86_64-pc-windows-msvc`, `i686-pc-windows-msvc`, or `aarch64-pc-windows-msvc`.\n\nIf you already have Rust installed, you can make sure the correct toolchain is installed by running this command:\n\n```powershell\nrustup default stable-msvc\n```\n\n:::\n\n  \n\n**Be sure to restart your Terminal (and in some cases your system) for the changes to take affect.**\n\nNext: [Configure for Mobile Targets](#configure-for-mobile-targets) if you'd like to build for Android and iOS, or, if you'd like to use a JavaScript framework, [install Node](#nodejs). Otherwise [Create a Project](/start/create-project/).","tokens_est":424,"tags":["commands","windowing","mobile","setup","lang:sh","lang:powershell","has_code"],"src_path":"prerequisites.mdx","anchors":["rust"],"code_languages":["sh","powershell"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["dialog"],"updated_at":"2025-09-01T10:05:53.097Z"}
{"id":"prerequisites#nodejs","doc_id":"prerequisites","section_title":"Node.js","doc_title":"Prerequisites","hierarchy":["Prerequisites","Node.js"],"content":"## Node.js\n\n[NOTE]\n\nOnly if you intend to use a JavaScript frontend framework\n:::\n\n1. Go to the [Node.js website](https://nodejs.org), download the Long Term Support (LTS) version and install it.\n2. Check if Node was successfully installed by running:\n\n```sh\nnode -v\n# v20.10.0\nnpm -v\n# 10.2.3\n```\n\nIt's important to restart your Terminal to ensure it recognizes the new installation. In some cases, you might need to restart your computer.\n\nWhile npm is the default package manager for Node.js, you can also use others like pnpm or yarn. To enable these, run `corepack enable` in your Terminal. This step is optional and only needed if you prefer using a package manager other than npm.\n\nNext: [Configure for Mobile Targets](#configure-for-mobile-targets) or [Create a project](/start/create-project/).","tokens_est":201,"tags":["setup","lang:sh","has_code"],"src_path":"prerequisites.mdx","anchors":["nodejs"],"code_languages":["sh"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.097Z"}
{"id":"prerequisites#configure-for-mobile-targets","doc_id":"prerequisites","section_title":"Configure for Mobile Targets","doc_title":"Prerequisites","hierarchy":["Prerequisites","Configure for Mobile Targets"],"content":"## Configure for Mobile Targets\n\nIf you'd like to target your app for Android or iOS then there are a few additional dependencies that you need to install:\n\n- [Android](#android)\n- [iOS](#ios)","tokens_est":48,"tags":["mobile","setup"],"src_path":"prerequisites.mdx","anchors":["configure-for-mobile-targets"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.097Z"}
{"id":"prerequisites#android","doc_id":"prerequisites","section_title":"Android","doc_title":"Prerequisites","hierarchy":["Prerequisites","Configure for Mobile Targets","Android"],"content":"### Android\n\n1. Download and install [Android Studio from the Android Developers website](https://developer.android.com/studio)\n2. Set the `JAVA_HOME` environment variable:\n\n{/* TODO: Can this be done in the 4th step? */}\n\n```sh\nexport JAVA_HOME=/opt/android-studio/jbr\n```\n\n```sh\nexport JAVA_HOME=\"/Applications/Android Studio.app/Contents/jbr/Contents/Home\"\n```\n\n```ps\n[System.Environment]::SetEnvironmentVariable(\"JAVA_HOME\", \"C:\\Program Files\\Android\\Android Studio\\jbr\", \"User\")\n```\n\n3. Use the SDK Manager in Android Studio to install the following:\n\n- Android SDK Platform\n- Android SDK Platform-Tools\n- NDK (Side by side)\n- Android SDK Build-Tools\n- Android SDK Command-line Tools\n\nSelecting \"Show Package Details\" in the SDK Manager enables the installation of older package versions. Only install older versions if necessary, as they may introduce compatibility issues or security risks.\n\n4. Set `ANDROID_HOME` and `NDK_HOME` environment variables.\n\n```sh\nexport ANDROID_HOME=\"$HOME/Android/Sdk\"\nexport NDK_HOME=\"$ANDROID_HOME/ndk/$(ls -1 $ANDROID_HOME/ndk)\"\n```\n\n```sh\nexport ANDROID_HOME=\"$HOME/Library/Android/sdk\"\nexport NDK_HOME=\"$ANDROID_HOME/ndk/$(ls -1 $ANDROID_HOME/ndk)\"\n```\n\n```ps\n[System.Environment]::SetEnvironmentVariable(\"ANDROID_HOME\", \"$env:LocalAppData\\Android\\Sdk\", \"User\")\n$VERSION = Get-ChildItem -Name \"$env:LocalAppData\\Android\\Sdk\\ndk\" | Select-Object -Last 1\n[System.Environment]::SetEnvironmentVariable(\"NDK_HOME\", \"$env:LocalAppData\\Android\\Sdk\\ndk\\$VERSION\", \"User\")\n```\n\n[TIP]\n\nMost apps don't refresh their environment variables automatically, so to let them pickup the changes,\nyou can either restart your terminal and IDE or for your current PowerShell session, you can refresh it with\n\n```ps\n[System.Environment]::GetEnvironmentVariables(\"User\").GetEnumerator() | % { Set-Item -Path \"Env:\\$($_.key)\" -Value $_.value }\n```\n\n:::\n\n5. Add the Android targets with `rustup`:\n\n```sh\nrustup target add aarch64-linux-android armv7-linux-androideabi i686-linux-android x86_64-linux-android\n```\n\nNext: [Setup for iOS](#ios) or [Create a project](/start/create-project/).","tokens_est":526,"tags":["commands","mobile","config","setup","lang:sh","lang:ps","has_code"],"src_path":"prerequisites.mdx","anchors":["android"],"code_languages":["sh","ps"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.097Z"}
{"id":"prerequisites#ios","doc_id":"prerequisites","section_title":"iOS","doc_title":"Prerequisites","hierarchy":["Prerequisites","Configure for Mobile Targets","iOS"],"content":"### iOS\n\n[CAUTION]\n\niOS development requires Xcode and is only available on macOS. Be sure that you've installed Xcode and not Xcode Command Line Tools in the [macOS system dependencies section](#macos).\n:::\n\n1. Add the iOS targets with `rustup` in Terminal:\n\n```sh\nrustup target add aarch64-apple-ios x86_64-apple-ios aarch64-apple-ios-sim\n```\n\n2. Install [Homebrew](https://brew.sh):\n\n```sh\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\n3. Install [Cocoapods](https://cocoapods.org) using Homebrew:\n\n```sh\nbrew install cocoapods\n```\n\nNext: [Create a project](/start/create-project/).","tokens_est":160,"tags":["commands","mobile","setup","lang:sh","has_code"],"src_path":"prerequisites.mdx","anchors":["ios"],"code_languages":["sh"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.097Z"}
{"id":"prerequisites#troubleshooting","doc_id":"prerequisites","section_title":"Troubleshooting","doc_title":"Prerequisites","hierarchy":["Prerequisites","Troubleshooting"],"content":"## Troubleshooting\n\nIf you run into any issues during installation be sure to check the [Troubleshooting Guide](/develop/debug/) or reach out on the [Tauri Discord](https://discord.com/invite/tauri).\n\n<Card title=\"Next Steps\" icon=\"rocket\">\n\nNow that you've installed all of the prerequisites you're ready to [create your first Tauri project](/start/create-project/)!\n\n</Card>","tokens_est":94,"tags":["tooling","assets","debugging","setup"],"src_path":"prerequisites.mdx","anchors":["troubleshooting"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.097Z"}
{"id":"project-structure#introduction","doc_id":"project-structure","section_title":"Introduction","doc_title":"Project Structure","hierarchy":["Project Structure"],"content":"A Tauri project is usually made of 2 parts, a Rust project and a JavaScript project (optional),\nand typically the setup looks something like this:\n\n```\n.\n├── package.json\n├── index.html\n├── src/\n│   ├── main.js\n├── src-tauri/\n│   ├── Cargo.toml\n│   ├── Cargo.lock\n│   ├── build.rs\n│   ├── tauri.conf.json\n│   ├── src/\n│   │   ├── main.rs\n│   │   └── lib.rs\n│   ├── icons/\n│   │   ├── icon.png\n│   │   ├── icon.icns\n│   │   └── icon.ico\n│   └── capabilities/\n│       └── default.json\n```\n\nIn this case, the JavaScript project is at the top level, and the Rust project is inside `src-tauri/`,\nthe Rust project is a normal [Cargo project](https://doc.rust-lang.org/cargo/guide/project-layout.html) with some extra files:\n\n- `tauri.conf.json` is the main configuration file for Tauri, it contains everything from the application identifier to dev server url,\n  this file is also a marker for the [Tauri CLI](/reference/cli/) to find the Rust project,\n  to learn more about it, see [Tauri Config](/develop/configuration-files/#tauri-config)\n- `capabilities/` directory is the default folder Tauri reads [capability files](/security/capabilities/) from (in short, you need to allow commands here to use them in your JavaScript code),\n  to learn more about it, see [Security](/security/)\n- `icons/` directory is the default output directory of the [`tauri icon`](/reference/cli/#icon) command, it's usually referenced in `tauri.conf.json > bundle > icon` and used for the app's icons\n- `build.rs` contains `tauri_build::build()` which is used for tauri's build system\n- `src/lib.rs` contains the Rust code and the mobile entry point (the function marked with `#[cfg_attr(mobile, tauri::mobile_entry_point)]`),\n  the reason we don't write directly in `main.rs` is because we compile your app to a library in mobile builds and load them through the platform frameworks\n- `src/main.rs` is the main entry point for the desktop, and we run `tauri_app_lib::run()` in `main` to use the same entry point as mobile,\n  so to keep it simple, don't modify this file, modify `lib.rs` instead\n\nTauri works similar to a static web host, and the way it builds is that you would compile your JavaScript project to static files first,\nand then compile the Rust project that will bundle those static files in,\nso the JavaScript project setup is basically the same as if you were to build a static website,\nto learn more, see [Frontend Configuration](/start/frontend/)\n\nIf you want to work with Rust code only, simply remove everything else and use the `src-tauri/` folder as your top level project or as a member of your Rust workspace","tokens_est":652,"tags":["commands","permissions","assets","configuration","setup","has_code"],"src_path":"project-structure.mdx","anchors":["introduction"],"code_languages":[],"version":null,"permissions":[],"config_keys":["build.rs"],"commands":[],"plugins":["cli"],"updated_at":"2025-09-01T10:05:53.098Z","raw_frontmatter":"title: Project Structure\r\ni18nReady: true\r"}
{"id":"project-structure#next-steps","doc_id":"project-structure","section_title":"Next Steps","doc_title":"Project Structure","hierarchy":["Project Structure","Next Steps"],"content":"## Next Steps\n\n- [Add and Configure a Frontend Framework](/start/frontend/)\n- [Tauri Command Line Interface (CLI) Reference](/reference/cli/)\n- [Learn how to develop your Tauri app](/develop/)\n- [Discover additional features to extend Tauri](/plugin/)","tokens_est":63,"tags":["commands","setup"],"src_path":"project-structure.mdx","anchors":["next-steps"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["cli"],"updated_at":"2025-09-01T10:05:53.098Z"}
{"id":"resources#introduction","doc_id":"resources","section_title":"Introduction","doc_title":"Embedding Additional Files","hierarchy":["Embedding Additional Files"],"content":"You may need to include additional files in your application bundle that aren't part of your frontend (your `frontendDist`) directly or which are too big to be inlined into the binary. We call these files `resources`.\n\nTo bundle the files of your choice, you can add the `resources` property to the `bundle` object in your `tauri.conf.json` file.\n\nSee more about `tauri.conf.json` configuration [here][tauri.bundle].\n\n`resources` expects a list of strings targeting files or directories either with absolute or relative paths. It supports glob patterns in case you need to include multiple files from a directory.\n\nHere is a sample to illustrate the configuration. This is not a complete `tauri.conf.json` file:\n\n```json title=tauri.conf.json\n{\n  \"bundle\": {\n    \"resources\": [\n      \"/absolute/path/to/textfile.txt\",\n      \"relative/path/to/jsonfile.json\",\n      \"resources/**/*\"\n    ]\n  }\n}\n```\n\nAlternatively the `resources` config also accepts a map object if you want to change where the files will be copied to. Here is a sample that shows how to include files from different sources into the same `resources` folder:\n\n```json title=tauri.conf.json\n{\n  \"bundle\": {\n    \"resources\": {\n      \"/absolute/path/to/textfile.txt\": \"resources/textfile.txt\",\n      \"relative/path/to/jsonfile.json\": \"resources/jsonfile.json\",\n      \"resources/**/*\": \"resources/\"\n    }\n  }\n}\n```\n\n[NOTE]\n\nIn Tauri's [permission system](/reference/acl/capability/), absolute paths and paths containing parent components (`../`) can only be allowed via `\"$RESOURCE/**\"`. Relative paths like `\"path/to/file.txt\"` can be allowed explicitly via `\"$RESOURCE/path/to/file.txt\"`.\n\n:::","tokens_est":414,"tags":["permissions","resources","configuration","lang:json","has_code"],"src_path":"resources.mdx","anchors":["introduction"],"code_languages":["json"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.099Z","raw_frontmatter":"title: Embedding Additional Files\r\ni18nReady: true\r"}
{"id":"resources#source-path-syntax","doc_id":"resources","section_title":"Source path syntax","doc_title":"Embedding Additional Files","hierarchy":["Embedding Additional Files","Source path syntax"],"content":"## Source path syntax\n\nIn the following explanations \"target resource directory\" is either the value after the colon in the object notation, or a reconstruction of the original file paths in the array notation.\n\n- `\"dir/file.txt\"`: copies the `file.txt` file into the target resource directory.\n- `\"dir/\"`: copies all files **and directories** _recursively_ into the target resource directory. Use this if you also want to preserve the file system structure of your files and directories.\n- `\"dir/*\"`: copies all files in the `dir` directory _non-recursively_ (sub-directories will be ignored) into the target resource directory.\n- `\"dir/**`: throws an error because `**` only matches directories and therefore no files can be found.\n- `\"dir/**/*\"`: copies all files in the `dir` directory _recursively_ (all files in `dir/` and all files in all sub-directories) into the target resource directory.\n- `\"dir/**/**`: throws an error because `**` only matches directories and therefore no files can be found.","tokens_est":251,"tags":["resources"],"src_path":"resources.mdx","anchors":["source-path-syntax"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.099Z"}
{"id":"resources#accessing-files-in-rust","doc_id":"resources","section_title":"Accessing files in Rust","doc_title":"Embedding Additional Files","hierarchy":["Embedding Additional Files","Accessing files in Rust"],"content":"## Accessing files in Rust\n\nIn this example we want to bundle additional i18n json files that look like this:\n\n```json title=de.json\n{\n  \"hello\": \"Guten Tag!\",\n  \"bye\": \"Auf Wiedersehen!\"\n}\n```\n\nIn this case, we store these files in a `lang` directory next to the `tauri.conf.json`.\nFor this we add `\"lang/*\"` to `resources` as shown above.\n\nOn the Rust side, you need an instance of the [`PathResolver`] which you can get from [`App`] and [`AppHandle`]:\n\n```rust\ntauri::Builder::default()\n  .setup(|app| {\n    // The path specified must follow the same syntax as defined in\n    // `tauri.conf.json > bundle > resources`\n    let resource_path = app.path().resolve(\"lang/de.json\", BaseDirectory::Resource)?;\n\n    let file = std::fs::File::open(&resource_path).unwrap();\n    let lang_de: serde_json::Value = serde_json::from_reader(file).unwrap();\n\n    // This will print 'Guten Tag!' to the terminal\n    println!(\"{}\", lang_de.get(\"hello\").unwrap());\n\n    Ok(())\n  })\n```\n\n```rust\n#[tauri::command]\nfn hello(handle: tauri::AppHandle) -> String {\n    let resource_path = handle.path().resolve(\"lang/de.json\", BaseDirectory::Resource)?;\n\n    let file = std::fs::File::open(&resource_path).unwrap();\n    let lang_de: serde_json::Value = serde_json::from_reader(file).unwrap();\n\n    lang_de.get(\"hello\").unwrap()\n}\n```","tokens_est":328,"tags":["commands","resources","configuration","lang:json","lang:rust","has_code"],"src_path":"resources.mdx","anchors":["accessing-files-in-rust"],"code_languages":["json","rust"],"version":null,"permissions":[],"config_keys":["app.path"],"commands":[],"plugins":["fs"],"updated_at":"2025-09-01T10:05:53.099Z"}
{"id":"resources#accessing-files-in-javascript","doc_id":"resources","section_title":"Accessing files in JavaScript","doc_title":"Embedding Additional Files","hierarchy":["Embedding Additional Files","Accessing files in JavaScript"],"content":"## Accessing files in JavaScript\n\nFor the JavaScript side, you can either use a command like the one above and call it through `await invoke('hello')` or access the files using the [`plugin-fs`]\n\nWhen using the [`plugin-fs`], addition from the [basic setup], you'll also need to configure the access control list to enable any [`plugin-fs`] APIs you will need as well as permissions to access the `$RESOURCE` folder:\n\n```json title=src-tauri/capabilities/default.json ins={8-9}\n{\n  \"$schema\": \"../gen/schemas/desktop-schema.json\",\n  \"identifier\": \"main-capability\",\n  \"description\": \"Capability for the main window\",\n  \"windows\": [\"main\"],\n  \"permissions\": [\n    \"core:default\",\n    \"fs:allow-read-text-file\",\n    \"fs:allow-resource-read-recursive\"\n  ]\n}\n```\n\n[NOTE]\n\nHere we use `fs:allow-resource-read-recursive` to allow for full recursive read access to the complete `$RESOURCE` folder, files, and subdirectories.\nFor more information, read [Scope Permissions] for other options, or [Scopes] for more fine-grained control.\n:::\n\n```javascript\nconst resourcePath = await resolveResource('lang/de.json');\nconst langDe = JSON.parse(await readTextFile(resourcePath));\nconsole.log(langDe.hello); // This will print 'Guten Tag!' to the devtools console\n```\n\n[tauri.bundle]: /reference/config/#bundleconfig\n[`pathresolver`]: https://docs.rs/tauri/latest/tauri/path/struct.PathResolver.html\n[`app`]: https://docs.rs/tauri/latest/tauri/struct.App.html\n[`apphandle`]: https://docs.rs/tauri/latest/tauri/struct.AppHandle.html\n[`plugin-fs`]: /plugin/file-system/\n[basic setup]: /plugin/file-system/#setup\n[Scope Permissions]: /plugin/file-system/#scopes\n[scopes]: /plugin/file-system/#scopes","tokens_est":421,"tags":["commands","permissions","windowing","resources","lang:json","lang:javascript","has_code"],"src_path":"resources.mdx","anchors":["accessing-files-in-javascript"],"code_languages":["json","javascript"],"version":null,"permissions":["core:default","fs:allow-read-text-file","fs:allow-resource-read-recursive"],"config_keys":[],"commands":["hello"],"plugins":["fs"],"updated_at":"2025-09-01T10:05:53.099Z"}
{"id":"sidecar-nodejs#introduction","doc_id":"sidecar-nodejs","section_title":"Introduction","doc_title":"Node.js as a sidecar","hierarchy":["Node.js as a sidecar"],"content":"In this guide we are going to package a Node.js application to a self contained binary\nto be used as a sidecar in a Tauri application without requiring the end user to have a Node.js installation.\nThis example tutorial is applicable for desktop operating systems only.\n\nWe recommend reading the general [sidecar guide] first for a deeper understanding of how Tauri sidecars work.\n\nIn this example we will create a Node.js application that reads input from the command line [process.argv]\nand writes output to stdout using [console.log]. <br/>\nYou can leverage alternative inter-process communication systems such as a localhost server, stdin/stdout or local sockets.\nNote that each has their own advantages, drawbacks and security concerns.","tokens_est":185,"tags":["commands","sidecar"],"src_path":"sidecar-nodejs.mdx","anchors":["introduction"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["process"],"updated_at":"2025-09-01T10:05:53.099Z","raw_frontmatter":"title: Node.js as a sidecar\r\nsidebar:\r\n  order: 1\r\ni18nReady: true\r"}
{"id":"sidecar-nodejs#prerequisites","doc_id":"sidecar-nodejs","section_title":"Prerequisites","doc_title":"Node.js as a sidecar","hierarchy":["Node.js as a sidecar","Prerequisites"],"content":"## Prerequisites\n\nAn existing Tauri application set up with the shell plugin, that compiles and runs for you locally.\n\n[TIP]\n\nIf you are not an advanced user it's **highly recommended** that you use the options and frameworks provided here. It's just a lab, you can delete the project when you're done.\n\n- Project name: `node-sidecar-lab`\n- Choose which language to use for your frontend: `Typescript / Javascript`\n- Choose your package manager: `pnpm`\n- Choose your UI template: `Vanilla`\n- Choose your UI flavor: `Typescript`\n- Would you like to setup the project for mobile as well? `yes`\n\n:::\n\n[NOTE]\n\nPlease follow the [shell plugin guide](/plugin/shell/) first to set up and initialize the plugin correctly.\nWithout the plugin being initialized and configured the example won't work.\n:::","tokens_est":198,"tags":["sidecar"],"src_path":"sidecar-nodejs.mdx","anchors":["prerequisites"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["shell"],"updated_at":"2025-09-01T10:05:53.099Z"}
{"id":"sidecar-nodejs#guide","doc_id":"sidecar-nodejs","section_title":"Guide","doc_title":"Node.js as a sidecar","hierarchy":["Node.js as a sidecar","Guide"],"content":"## Guide\n\n1.  ##### Initialize Sidecar Project\n\n    Let's create a new Node.js project to contain our sidecar implementation.\n    Create a new directory **in your Tauri application root folder** (in this example we will call it `sidecar-app`)\n    and run the `init` command of your preferred Node.js package manager inside the directory:\n\n    \n\n    We will compile our Node.js application to a self container binary using [pkg].\n    Let's install it as a development dependency:\n\n    \n\n1.  ##### Write Sidecar Logic\n\n    Now we can start writing JavaScript code that will be executed by our Tauri application.\n\n    In this example we will process a command from the command line argmuents and write output to stdout,\n    which means our process will be short lived and only handle a single command at a time.\n    If your application must be long lived, consider using alternative inter-process communication systems.\n\n    Let's create a `index.js` file in our `sidecar-app` directory and write a basic Node.js app:\n\n    ```js title=sidecar-app/index.js\n    const command = process.argv[2];\n\n    switch (command) {\n      case 'ping':\n        const message = process.argv[3];\n        console.log(`pong, ${message}`);\n        break;\n      default:\n        console.error(`unknown command ${command}`);\n        process.exit(1);\n    }\n    ```\n\n1.  ##### Package the Sidecar\n\n    To package our Node.js application to a self contained binary, we can run the following `pkg` command:\n\n    \n\n    This will create the `sidecar-app/app` binary on Linux and macOS, and a `sidecar-app/app.exe` executable on Windows.\n    To rename this file to the expected Tauri sidecar filename, we can use the following Node.js script:\n\n    ```js\n    const ext = process.platform === 'win32' ? '.exe' : '';\n\n    const rustInfo = execSync('rustc -vV');\n    const targetTriple = /host: (\\S+)/g.exec(rustInfo)[1];\n    if (!targetTriple) {\n      console.error('Failed to determine platform target triple');\n    }\n    fs.renameSync(\n      `app${ext}`,\n      `../src-tauri/binaries/app-${targetTriple}${ext}`\n    );\n    ```\n\n1.  ##### Configure the Sidecar in the Tauri Application\n\n    Now that we have our Node.js application ready, we can connect it to our Tauri application\n    by configuring the [`bundle > externalBin`] array:\n\n    ```json title=\"src-tauri/tauri.conf.json\"\n    {\n      \"bundle\": {\n        \"externalBin\": [\"binaries/app\"]\n      }\n    }\n    ```\n\n    The Tauri CLI will handle the bundling of the sidecar binary as long as it exists as `src-tauri/binaries/app-<target-triple>`.\n\n1.  ##### Execute the Sidecar\n\n    We can run the sidecar binary either from Rust code or directly from JavaScript.\n\n    \n\n      \n\n        Let's execute the `ping` command in the Node.js sidecar directly:\n\n        ```javascript\n        const message = 'Tauri';\n\n        const command = Command.sidecar('binaries/app', ['ping', message]);\n        const output = await command.execute();\n        const response = output.stdout;\n        ```\n\n      \n\n      \n\n        Let's pipe a `ping` Tauri command to the Node.js sidecar:\n\n        ```rust\n        #[tauri::command]\n        async fn ping(app: tauri::AppHandle, message: String) -> String {\n          let sidecar_command = app\n            .shell()\n            .sidecar(\"app\")\n            .unwrap()\n            .arg(\"ping\")\n            .arg(message);\n          let output = sidecar_command.output().unwrap();\n          let response = String::from_utf8(output.stdout).unwrap();\n          response\n        }\n        ```\n\n      \n\n    \n\n[sidecar guide]: /develop/sidecar/\n[process.argv]: https://nodejs.org/docs/latest/api/process.html#processargv\n[console.log]: https://nodejs.org/api/console.html#consolelogdata-args\n[pkg]: https://github.com/vercel/pkg\n[`bundle > externalBin`]: /reference/config/#externalbin","tokens_est":955,"tags":["commands","windowing","sidecar","configuration","lang:js","lang:json","lang:javascript","lang:rust","has_code"],"src_path":"sidecar-nodejs.mdx","anchors":["guide"],"code_languages":["js","json","javascript","rust"],"version":null,"permissions":[],"config_keys":["app.exe"],"commands":[],"plugins":["fs","shell","cli","process"],"updated_at":"2025-09-01T10:05:53.099Z"}
{"id":"sidecar#introduction","doc_id":"sidecar","section_title":"Introduction","doc_title":"Embedding External Binaries","hierarchy":["Embedding External Binaries"],"content":"You may need to embed external binaries to add additional functionality to your application or prevent users from installing additional dependencies (e.g., Node.js or Python). We call this binary a `sidecar`.\n\nBinaries are executables written in any programming language. Common use cases are Python CLI applications or API servers bundled using `pyinstaller`.\n\nTo bundle the binaries of your choice, you can add the `externalBin` property to the `tauri > bundle` object in your `tauri.conf.json`.\nThe `externalBin` configuration expects a list of strings targeting binaries either with absolute or relative paths.\n\nHere is a Tauri configuration snippet to illustrate a sidecar configuration:\n\n```json title=\"src-tauri/tauri.conf.json\"\n{\n  \"bundle\": {\n    \"externalBin\": [\n      \"/absolute/path/to/sidecar\",\n      \"../relative/path/to/binary\",\n      \"binaries/my-sidecar\"\n    ]\n  }\n}\n```\n\n[NOTE]\n\nThe relative paths are relative to the `tauri.conf.json` file which is in the `src-tauri` directory.\nSo `binaries/my-sidecar` would represent `<PROJECT ROOT>/src-tauri/binaries/my-sidecar`.\n\n:::\n\nTo make the external binary work on each supported architecture, a binary with the same name and a `-$TARGET_TRIPLE` suffix must exist on the specified path.\nFor instance, `\"externalBin\": [\"binaries/my-sidecar\"]` requires a `src-tauri/binaries/my-sidecar-x86_64-unknown-linux-gnu` executable on Linux or `src-tauri/binaries/my-sidecar-aarch64-apple-darwin` on Mac OS with Apple Silicon.\n\nYou can find your **current** platform's `-$TARGET_TRIPLE` suffix by looking at the `host:` property reported by the following command:\n\n```sh\nrustc -Vv\n```\n\nIf the `grep` and `cut` commands are available, as they should on most Unix systems, you can extract the target triple directly with the following command:\n\n```shell\nrustc -Vv | grep host | cut -f2 -d' '\n```\n\nOn Windows you can use PowerShell instead:\n\n```powershell\nrustc -Vv | Select-String \"host:\" | ForEach-Object {$_.Line.split(\" \")[1]}\n```\n\nHere's a Node.js script to append the target triple to a binary:\n\n```javascript\nconst extension = process.platform === 'win32' ? '.exe' : '';\n\nconst rustInfo = execSync('rustc -vV');\nconst targetTriple = /host: (\\S+)/g.exec(rustInfo)[1];\nif (!targetTriple) {\n  console.error('Failed to determine platform target triple');\n}\nfs.renameSync(\n  `src-tauri/binaries/sidecar${extension}`,\n  `src-tauri/binaries/sidecar-${targetTriple}${extension}`\n);\n```\n\nNote that this script will not work if you compile for a different architecture than the one its running on,\nso only use it as a starting point for your own build scripts.","tokens_est":652,"tags":["commands","windowing","sidecar","assets","configuration","lang:json","lang:sh","lang:shell","lang:powershell","lang:javascript","has_code"],"src_path":"sidecar.mdx","anchors":["introduction"],"code_languages":["json","sh","shell","powershell","javascript"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["fs","shell","cli","process","os"],"updated_at":"2025-09-01T10:05:53.100Z","raw_frontmatter":"title: Embedding External Binaries\r\ni18nReady: true\r"}
{"id":"sidecar#running-it-from-rust","doc_id":"sidecar","section_title":"Running it from Rust","doc_title":"Embedding External Binaries","hierarchy":["Embedding External Binaries","Running it from Rust"],"content":"## Running it from Rust\n\n[NOTE]\n\nPlease follow the [shell plugin guide](/plugin/shell/) first to set up and initialize the plugin correctly.\nWithout the plugin being initialized and configured the example won't work.\n:::\n\nOn the Rust side, import the `tauri_plugin_shell::ShellExt` trait and call the `shell().sidecar()` function on the AppHandle:\n\n```rust\nuse tauri_plugin_shell::ShellExt;\nuse tauri_plugin_shell::process::CommandEvent;\n\nlet sidecar_command = app.shell().sidecar(\"my-sidecar\").unwrap();\nlet (mut rx, mut _child) = sidecar_command\n  .spawn()\n  .expect(\"Failed to spawn sidecar\");\n\ntauri::async_runtime::spawn(async move {\n  // read events such as stdout\n  while let Some(event) = rx.recv().await {\n    if let CommandEvent::Stdout(line_bytes) = event {\n      let line = String::from_utf8_lossy(&line_bytes);\n      window\n        .emit(\"message\", Some(format!(\"'{}'\", line)))\n        .expect(\"failed to emit event\");\n      // write to stdin\n      child.write(\"message from Rust\\n\".as_bytes()).unwrap();\n    }\n  }\n});\n```\n\n[NOTE]\n\nThe `sidecar()` function expects just the filename, NOT the whole path configured in the `externalBin` array.\n\nGiven the following configuration:\n\n```json title=\"src-tauri/tauri.conf.json\"\n{\n  \"bundle\": {\n    \"externalBin\": [\"binaries/app\", \"my-sidecar\", \"../scripts/sidecar\"]\n  }\n}\n```\n\nThe appropriate way to execute the sidecar is by calling `app.shell().sidecar(name)` where `name` is either `\"app\"`, `\"my-sidecar\"` or `\"sidecar\"`\ninstead of `\"binaries/app\"` for instance.\n\n:::\n\nYou can place this code inside a Tauri command to easily pass the AppHandle or you can store a reference to the AppHandle in the builder script to access it elsewhere in your application.","tokens_est":429,"tags":["commands","ipc","windowing","sidecar","configuration","lang:rust","lang:json","has_code"],"src_path":"sidecar.mdx","anchors":["running-it-from-rust"],"code_languages":["rust","json"],"version":null,"permissions":[],"config_keys":["app.shell"],"commands":[],"plugins":["shell","process"],"updated_at":"2025-09-01T10:05:53.100Z"}
{"id":"sidecar#running-it-from-javascript","doc_id":"sidecar","section_title":"Running it from JavaScript","doc_title":"Embedding External Binaries","hierarchy":["Embedding External Binaries","Running it from JavaScript"],"content":"## Running it from JavaScript\n\nWhen running the sidecar, Tauri requires you to give the sidecar permission to run the `execute` or `spawn` method on the child process. To grant this permission, go to the file `<PROJECT ROOT>/src-tauri/capabilities/default.json` and add the section below to the permissions array. Don't forget to name your sidecar according to the relative path mentioned earlier.\n\n```json title=\"src-tauri/capabilities/default.json\" ins={4-12}\n{\n  \"permissions\": [\n    \"core:default\",\n    {\n      \"identifier\": \"shell:allow-execute\",\n      \"allow\": [\n        {\n          \"name\": \"binaries/app\",\n          \"sidecar\": true\n        }\n      ]\n    }\n  ]\n}\n```\n\n[NOTE]\n\nThe `shell:allow-execute` identifier is used because the sidecar's child process will be started using the `command.execute()` method. To run it with `command.spawn()`, you need to change the identifier to `shell:allow-spawn` or add another entry to the array with the same structure as the one above, but with the identifier set to `shell:allow-spawn`.\n\n:::\n\nIn the JavaScript code, import the `Command` class from the `@tauri-apps/plugin-shell` module and use the `sidecar` static method.\n\n```javascript\nconst command = Command.sidecar('binaries/my-sidecar');\nconst output = await command.execute();\n```\n\n[NOTE]\n\nThe string provided to `Command.sidecar` must match one of the strings defined in the `externalBin` configuration array.\n:::","tokens_est":355,"tags":["commands","permissions","sidecar","lang:json","lang:javascript","has_code"],"src_path":"sidecar.mdx","anchors":["running-it-from-javascript"],"code_languages":["json","javascript"],"version":null,"permissions":["core:default","shell:allow-execute","shell:allow-spawn"],"config_keys":[],"commands":[],"plugins":["shell","process"],"updated_at":"2025-09-01T10:05:53.100Z"}
{"id":"sidecar#passing-arguments","doc_id":"sidecar","section_title":"Passing arguments","doc_title":"Embedding External Binaries","hierarchy":["Embedding External Binaries","Passing arguments"],"content":"## Passing arguments\n\nYou can pass arguments to Sidecar commands just like you would for running normal [Command][std::process::Command].\n\nArguments can be either **static** (e.g. `-o` or `serve`) or **dynamic** (e.g. `<file_path>` or `localhost:<PORT>`). A value of `true` will allow any arguments to be passed to the command. `false` will disable all arguments. If neither `true` or `false` is set, you define the arguments in the exact order in which you'd call them. Static arguments are defined as-is, while dynamic arguments can be defined using a regular expression.\n\nFirst, define the arguments that need to be passed to the sidecar command in `src-tauri/capabilities/default.json`:\n\n```json title=\"src-tauri/capabilities/default.json\" ins={8-24}\n{\n  \"$schema\": \"../gen/schemas/desktop-schema.json\",\n  \"identifier\": \"default\",\n  \"description\": \"Capability for the main window\",\n  \"windows\": [\"main\"],\n  \"permissions\": [\n    \"core:default\",\n    {\n      \"identifier\": \"shell:allow-execute\",\n      \"allow\": [\n        {\n          \"args\": [\n            \"arg1\",\n            \"-a\",\n            \"--arg2\",\n            {\n              \"validator\": \"\\\\S+\"\n            }\n          ],\n          \"name\": \"binaries/my-sidecar\",\n          \"sidecar\": true\n        }\n      ]\n    }\n  ]\n}\n```\n\n[NOTE]\n\nIf you are migrating from Tauri v1, the `migrate` command in Tauri v2 CLI should take care of this for you. Read [Automated Migration](/start/migrate/from-tauri-1/#automated-migration) for more.\n:::\n\nThen, to call the sidecar command, simply pass in **all** the arguments as an array.\n\nIn Rust:\n\n```rust\nuse tauri_plugin_shell::ShellExt;\n#[tauri::command]\nasync fn call_my_sidecar(app: tauri::AppHandle) {\n  let sidecar_command = app\n    .shell()\n    .sidecar(\"my-sidecar\")\n    .unwrap()\n    .args([\"arg1\", \"-a\", \"--arg2\", \"any-string-that-matches-the-validator\"]);\n  let (mut _rx, mut _child) = sidecar_command.spawn().unwrap();\n}\n```\n\nIn JavaScript:\n\n```javascript\n// notice that the args array matches EXACTLY what is specified in `capabilities/default.json`.\nconst command = Command.sidecar('binaries/my-sidecar', [\n  'arg1',\n  '-a',\n  '--arg2',\n  'any-string-that-matches-the-validator',\n]);\nconst output = await command.execute();\n```\n\n[std::process::Command]: https://doc.rust-lang.org/std/process/struct.Command.html","tokens_est":578,"tags":["commands","permissions","migration","windowing","sidecar","lang:json","lang:rust","lang:javascript","has_code"],"src_path":"sidecar.mdx","anchors":["passing-arguments"],"code_languages":["json","rust","javascript"],"version":null,"permissions":["core:default","shell:allow-execute"],"config_keys":[],"commands":[],"plugins":["shell","cli","process"],"updated_at":"2025-09-01T10:05:53.100Z"}
{"id":"splashscreen#introduction","doc_id":"splashscreen","section_title":"Introduction","doc_title":"Splashscreen","hierarchy":["Splashscreen"],"content":"In this lab we'll be implementing a basic splashscreen functionality in a Tauri app. Doing so\nis quite straight forward, a splashscreen is effectively just a matter of creating a new window\nthat displays some contents during the period your app is doing some heavy setup related tasks\nand then closing it when setting up is done.","tokens_est":82,"tags":["windowing","ux"],"src_path":"splashscreen.mdx","anchors":["introduction"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.109Z","raw_frontmatter":"title: Splashscreen\r\nsidebar:\r\n  order: 1\r\ntableOfContents:\r\n  minHeadingLevel: 2\r\n  maxHeadingLevel: 5\r\ni18nReady: true\r"}
{"id":"splashscreen#prerequisites","doc_id":"splashscreen","section_title":"Prerequisites","doc_title":"Splashscreen","hierarchy":["Splashscreen","Prerequisites"],"content":"## Prerequisites\n\n[TIP]\n\nIf you are not an advanced user it's **highly recommended** that you use the options and frameworks provided here. It's just a lab, you can delete the project when you're done.\n\n- Project name: `splashscreen-lab`\n- Choose which language to use for your frontend: `Typescript / Javascript`\n- Choose your package manager: `pnpm`\n- Choose your UI template: `Vanilla`\n- Choose your UI flavor: `Typescript`\n- Would you like to setup the project for mobile as well? `yes`\n:::","tokens_est":124,"tags":["windowing","ux"],"src_path":"splashscreen.mdx","anchors":["prerequisites"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.109Z"}
{"id":"splashscreen#steps-part-1","doc_id":"splashscreen","section_title":"Steps","doc_title":"Splashscreen","hierarchy":["Splashscreen","Steps"],"content":"## Steps\n\n1. ##### Install dependencies and run the project\n\n   Before you start developing any project it's important to build and run the initial template, just to validate your setup is working as intended.\n\n    \n    ```sh frame=none\n    # Make sure you're in the right directory\n    cd splashscreen-lab\n    # Install dependencies\n    pnpm install\n    # Build and run the app\n    pnpm tauri dev\n    ```\n    \n    \n\n1. ##### Register new windows in `tauri.conf.json`\n\n   The easiest way of adding new windows is by adding them directly to `tauri.conf.json`. You can also create them dynamically at startup,\n   but for the sake of simplicity lets just register them instead. Make sure you have a window with the label `main` that's being created as a hidden window and a window with the label `splashscreen` that's created as being shown directly. You can leave all other options as their defaults, or tweak them based on preference.\n\n    \n    ```json\n    // src-tauri/tauri.conf.json\n    {\n        \"windows\": [\n            {\n                \"label\": \"main\",\n                \"visible\": false\n            },\n            {\n                \"label\": \"splashscreen\",\n                \"url\": \"/splashscreen\"\n            }\n        ]\n    }\n    ```\n    \n\n1. ##### Create a new page to host your splashscreen\n\n   Before you begin you'll need to have some content to show. How you develop new pages depend on your chosen framework,\n   most have the concept of a \"router\" that handles page navigation which should work just like normal in Tauri, in which case\n   you just create a new splashscreen page. Or as we're going to be doing here, create a new `splashscreen.html` file to host the contents.\n\n   What's important here is that you can navigate to a `/splashscreen` URL and be shown the contents you want for your splashscreen. Try running the app again after this step!\n\n    \n    ```html\n    // /splashscreen.html\n    <!doctype html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\" />\n        <link rel=\"stylesheet\" href=\"/src/styles.css\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <title>Tauri App</title>\n    </head>\n    <body>\n        <div class=\"container\">\n            <h1>Tauri used Splash!</h1>\n            <div class=\"row\">\n                <h5>It was super effective!</h5>\n            </div>\n        </div>\n    </body>\n    </html>\n    ```\n    \n    \n\n1. ##### Start some setup tasks\n\n    Since splashscreens are generally intended to be used for the sake of hiding heavy setup related tasks, lets fake giving the app something heavy to do, some in the frontend and some in the backend.\n\n    To fake heavy setup in the frontend we're going to be using a simple `setTimeout` function.\n    \n    The easiest way to fake heavy operations in the backend is by using the Tokio crate, which is the Rust crate that Tauri uses in the backend to provide an asynchronous runtime. While Tauri provides the runtime there are various utilities that Tauri doesn't re-export from it, so we'll need to add the crate to our project in order to access them. This is a perfectly normal practice within the Rust ecosystem.\n\n    Don't use `std::thread::sleep` in async functions, they run cooperatively in a concurrent environment not in parallel, meaning that if you sleep the thread instead of the Tokio task you'll be locking all tasks scheduled to run on that thread from being executed, causing your app to freeze.\n\n    \n    ```sh frame=none\n    # Run this command where the `Cargo.toml` file is\n    cd src-tauri\n    # Add the Tokio crate\n    cargo add tokio\n    # Optionally go back to the top folder to keep developing\n    # `tauri dev` can figure out where to run automatically\n    cd ..\n    ```\n\n    ```javascript\n    // src/main.ts\n    // These contents can be copy-pasted below the existing code, don't replace the entire file!!\n\n    // Utility function to implement a sleep function in TypeScript\n    function sleep(seconds: number): Promise<void> {\n        return new Promise(resolve => setTimeout(resolve, seconds * 1000));\n    }\n\n    // Setup function\n    async function setup() {\n        // Fake perform some really heavy setup task\n        console.log('Performing really heavy frontend setup task...')\n        await sleep(3);\n        console.log('Frontend setup task complete!')\n        // Set the frontend task as being completed\n        invoke('set_complete', {task: 'frontend'})\n    }\n\n    // Effectively a JavaScript main function\n    window.addEventListener(\"DOMContentLoaded\", () => {\n        setup()\n    });\n    ```\n\n    ```rust\n    // /src-tauri/src/lib.rs\n    // Import functionalities we'll be using\n    use std::sync::Mutex;\n    use tauri::async_runtime::spawn;\n    use tauri::{AppHandle, Manager, State};\n    use tokio::time::{sleep, Duration};\n\n    // Create a struct we'll use to track the completion of\n    // setup related tasks\n    struct SetupState {\n        frontend_task: bool,\n        backend_task: bool,\n    }\n\n    // Our main entrypoint in a version 2 mobile compatible app\n    #[cfg_attr(mobile, tauri::mobile_entry_point)]\n    pub fn run() {\n        // Don't write code before Tauri starts, write it in the\n        // setup hook instead!\n        tauri::Builder::default()\n            // Register a `State` to be managed by Tauri\n            // We need write access to it so we wrap it in a `Mutex`\n            .manage(Mutex::new(SetupState {\n                frontend_task: false,\n                backend_task: false,\n            }))\n            // Add a command we can use to check\n            .invoke_handler(tauri::generate_handler![greet, set_complete])\n            // Use the setup hook to execute setup related tasks\n            // Runs before the main loop, so no windows are yet created\n            .setup(|app| {\n                // Spawn setup as a non-blocking task so the windows can be\n                // created and ran while it executes\n                spawn(setup(app.handle().clone()));\n                // The hook expects an Ok result\n                Ok(())\n            })\n            // Run the app\n            .run(tauri::generate_context!())\n            .expect(\"error while running tauri application\");\n    }\n\n    #[tauri::command]\n    fn greet(name: String) -> String {\n        format!(\"Hello {name} from Rust!\")\n    }\n\n    // A custom task for setting the state of a setup task\n    #[tauri::command]\n    async fn set_complete(\n        app: AppHandle,\n        state: State<'_, Mutex<SetupState>>,\n        task: String,\n    ) -> Result<(), ()> {\n        // Lock the state without write access\n        let mut state_lock = state.lock().unwrap();\n        match task.as_str() {\n            \"frontend\" => state_lock.frontend_task = true,\n            \"backend\" => state_lock.backend_task = true,\n            _ => panic!(\"invalid task completed!\"),\n        }\n        // Check if both tasks are completed\n        if state_lock.backend_task && state_lock.frontend_task {\n            // Setup is complete, we can close the splashscreen\n            // and unhide the main window!\n            let splash_window = app.get_webview_window(\"splashscreen\").unwrap();\n            let main_window = app.get_webview_window(\"main\").unwrap();\n            splash_window.close().unwrap();\n            main_window.show().unwrap();\n        }\n        Ok(())\n    }\n\n    // An async function that does some heavy setup task\n    async fn setup(app: AppHandle) -> Result<(), ()> {\n        // Fake performing some heavy action for 3 seconds\n        println!(\"Performing really heavy backend setup task...\");\n        sleep(Duration::from_secs(3)).await;\n        println!(\"Backend setup task completed!\");\n        // Set the backend task as being completed\n        // Commands can be ran as regular functions as long as you take\n        // care of the input arguments yourself\n        set_complete(\n            app.clone(),\n            app.state::<Mutex<SetupState>>(),\n            \"backend\".to_string(),\n        )\n        .await?;\n        Ok(())\n    }\n    ```\n    \n\n1. ##### Run the application\n\n   You should now see a splashscreen window pop up, both the frontend and backend will perform their respective heavy 3 second setup tasks, after which the splashscreen disappears and the main window is shown!","tokens_est":2069,"tags":["commands","windowing","state","configuration","ux","lang:sh","lang:json","lang:html","lang:javascript","lang:rust","has_code"],"src_path":"splashscreen.mdx","anchors":["steps"],"code_languages":["sh","json","html","javascript","rust"],"version":null,"permissions":[],"config_keys":["window.addEventListener","app.handle","app.get_webview_window","app.clone","app.state"],"commands":["set_complete"],"plugins":[],"updated_at":"2025-09-01T10:05:53.109Z","part_index":1,"part_total":1}
{"id":"splashscreen#discuss","doc_id":"splashscreen","section_title":"Discuss","doc_title":"Splashscreen","hierarchy":["Splashscreen","Discuss"],"content":"## Discuss","tokens_est":3,"tags":["windowing","ux"],"src_path":"splashscreen.mdx","anchors":["discuss"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.109Z"}
{"id":"splashscreen#should-you-have-a-splashscreen","doc_id":"splashscreen","section_title":"Should you have a splashscreen?","doc_title":"Splashscreen","hierarchy":["Splashscreen","Discuss","Should you have a splashscreen?"],"content":"##### Should you have a splashscreen?\n\nIn general having a splashscreen is an admittance of defeat that you couldn't make your\napp load fast enough to not need one. In fact it tends to be better to just go straight\nto a main window that then shows some little spinner somewhere in a corner informing the\nuser there's still setup tasks happening in the background.\n\nHowever, with that said, it can be a stylistic choice that you want to have a splashscreen,\nor you might have some very particular requirement that makes it impossible to start the\napp until some tasks are performed. It's definitely not *wrong* to have a splashscreen, it\njust tends to not be necessary and can make users feel like the app isn't very well optimized.","tokens_est":183,"tags":["windowing","ux"],"src_path":"splashscreen.mdx","anchors":["should-you-have-a-splashscreen"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.109Z"}
{"id":"state-management#introduction","doc_id":"state-management","section_title":"Introduction","doc_title":"State Management","hierarchy":["State Management"],"content":"In a Tauri application, you often need to keep track of the current state of your application or manage the lifecycle of things associated with it. Tauri provides an easy way to manage the state of your application using the [`Manager`] API, and read it when commands are called.\n\nHere is a simple example:\n\n```rust\nuse tauri::{Builder, Manager};\n\nstruct AppData {\n  welcome_message: &'static str,\n}\n\nfn main() {\n  Builder::default()\n    .setup(|app| {\n      app.manage(AppData {\n        welcome_message: \"Welcome to Tauri!\",\n      });\n      Ok(())\n    })\n    .run(tauri::generate_context!())\n    .unwrap();\n}\n```\n\nYou can later access your state with any type that implements the [`Manager`] trait, for example the [`App`] instance:\n\n```rust\nlet data = app.state::<AppData>();\n```\n\nFor more info, including accessing state in commands, see the [Accessing State](#accessing-state) section.","tokens_est":222,"tags":["commands","state","lang:rust","has_code"],"src_path":"state-management.mdx","anchors":["introduction"],"code_languages":["rust"],"version":null,"permissions":[],"config_keys":["app.manage","app.state"],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.113Z","raw_frontmatter":"title: State Management\r\ni18nReady: true\r"}
{"id":"state-management#mutability","doc_id":"state-management","section_title":"Mutability","doc_title":"State Management","hierarchy":["State Management","Mutability"],"content":"## Mutability\n\nIn Rust, you cannot directly mutate values which are shared between multiple threads or when ownership is controlled through a shared pointer such as [`Arc`] (or Tauri's [`State`]). Doing so could cause data races (for example, two writes happening simultaneously).\n\nTo work around this, you can use a concept known as [interior mutability](https://doc.rust-lang.org/book/ch15-05-interior-mutability.html). For example, the standard library's [`Mutex`] can be used to wrap your state. This allows you to lock the value when you need to modify it, and unlock it when you are done.\n\n```rust\nuse std::sync::Mutex;\n\nuse tauri::{Builder, Manager};\n\n#[derive(Default)]\nstruct AppState {\n  counter: u32,\n}\n\nfn main() {\n  Builder::default()\n    .setup(|app| {\n      app.manage(Mutex::new(AppState::default()));\n      Ok(())\n    })\n    .run(tauri::generate_context!())\n    .unwrap();\n}\n```\n\nThe state can now be modified by locking the mutex:\n\n```rust\nlet state = app.state::<Mutex<AppState>>();\n\n// Lock the mutex to get mutable access:\nlet mut state = state.lock().unwrap();\n\n// Modify the state:\nstate.counter += 1;\n```\n\nAt the end of the scope, or when the `MutexGuard` is otherwise dropped, the mutex is unlocked automatically so that other parts of your application can access and mutate the data within.","tokens_est":329,"tags":["state","lang:rust","has_code"],"src_path":"state-management.mdx","anchors":["mutability"],"code_languages":["rust"],"version":null,"permissions":[],"config_keys":["app.manage","app.state"],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.113Z"}
{"id":"state-management#when-to-use-an-async-mutex","doc_id":"state-management","section_title":"When to use an async mutex","doc_title":"State Management","hierarchy":["State Management","Mutability","When to use an async mutex"],"content":"### When to use an async mutex\n\nTo quote the [Tokio documentation](https://docs.rs/tokio/latest/tokio/sync/struct.Mutex.html#which-kind-of-mutex-should-you-use), it's often fine to use the standard library's [`Mutex`] instead of an async mutex such as the one Tokio provides:\n\n> Contrary to popular belief, it is ok and often preferred to use the ordinary Mutex from the standard library in asynchronous code ... The primary use case for the async mutex is to provide shared mutable access to IO resources such as a database connection.\n\nIt's a good idea to read the linked documentation fully to understand the trade-offs between the two. One reason you _would_ need an async mutex is if you need to hold the `MutexGuard` across await points.","tokens_est":186,"tags":["state","resources"],"src_path":"state-management.mdx","anchors":["when-to-use-an-async-mutex"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.113Z"}
{"id":"state-management#do-you-need-arc","doc_id":"state-management","section_title":"Do you need `Arc`?","doc_title":"State Management","hierarchy":["State Management","Mutability","Do you need `Arc`?"],"content":"### Do you need `Arc`?\n\nIt's common to see [`Arc`] used in Rust to share ownership of a value across multiple threads (usually paired with a [`Mutex`] in the form of `Arc<Mutex<T>>`). However, you don't need to use [`Arc`] for things stored in [`State`] because Tauri will do this for you.\n\nIn case `State`'s lifetime requirements prevent you from moving your state into a new thread you can instead move an `AppHandle` into the thread and then retrieve your state as shown below in the \"[Access state with the Manager trait](#access-state-with-the-manager-trait)\" section. `AppHandle`s are deliberately cheap to clone for use-cases like this.","tokens_est":161,"tags":["state"],"src_path":"state-management.mdx","anchors":["do-you-need-arc"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.113Z"}
{"id":"state-management#accessing-state","doc_id":"state-management","section_title":"Accessing State","doc_title":"State Management","hierarchy":["State Management","Accessing State"],"content":"## Accessing State","tokens_est":5,"tags":["state"],"src_path":"state-management.mdx","anchors":["accessing-state"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.113Z"}
{"id":"state-management#access-state-in-commands","doc_id":"state-management","section_title":"Access state in commands","doc_title":"State Management","hierarchy":["State Management","Accessing State","Access state in commands"],"content":"### Access state in commands\n\n```rust\n#[tauri::command]\nfn increase_counter(state: State<'_, Mutex<AppState>>) -> u32 {\n  let mut state = state.lock().unwrap();\n  state.counter += 1;\n  state.counter\n}\n```\n\nFor more information on commands, see [Calling Rust from the Frontend](/develop/calling-rust/).","tokens_est":75,"tags":["commands","state","lang:rust","has_code"],"src_path":"state-management.mdx","anchors":["access-state-in-commands"],"code_languages":["rust"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.113Z"}
{"id":"state-management#async-commands","doc_id":"state-management","section_title":"Async commands","doc_title":"State Management","hierarchy":["State Management","Accessing State","Access state in commands","Async commands"],"content":"#### Async commands\n\nIf you are using `async` commands and want to use Tokio's async [`Mutex`](https://docs.rs/tokio/latest/tokio/sync/struct.Mutex.html), you can set it up the same way and access the state like this:\n\n```rust\n#[tauri::command]\nasync fn increase_counter(state: State<'_, Mutex<AppState>>) -> Result<u32, ()> {\n  let mut state = state.lock().await;\n  state.counter += 1;\n  Ok(state.counter)\n}\n```\n\nNote that the return type must be [`Result`] if you use asynchronous commands.","tokens_est":123,"tags":["commands","state","lang:rust","has_code"],"src_path":"state-management.mdx","anchors":["async-commands"],"code_languages":["rust"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.113Z"}
{"id":"state-management#access-state-with-the-manager-trait","doc_id":"state-management","section_title":"Access state with the [`Manager`] trait","doc_title":"State Management","hierarchy":["State Management","Accessing State","Access state with the [`Manager`] trait"],"content":"### Access state with the [`Manager`] trait\n\nSometimes you may need to access the state outside of commands, such as in a different thread or in an event handler like `on_window_event`. In such cases, you can use the `state()` method of types that implement the [`Manager`] trait (such as the `AppHandle`) to get the state:\n\n```rust\nuse std::sync::Mutex;\nuse tauri::{Builder, Window, WindowEvent, Manager};\n\n#[derive(Default)]\nstruct AppState {\n  counter: u32,\n}\n\n// In an event handler:\nfn on_window_event(window: &Window, _event: &WindowEvent) {\n    // Get a handle to the app so we can get the global state.\n    let app_handle = window.app_handle();\n    let state = app_handle.state::<Mutex<AppState>>();\n\n    // Lock the mutex to mutably access the state.\n    let mut state = state.lock().unwrap();\n    state.counter += 1;\n}\n\nfn main() {\n  Builder::default()\n    .setup(|app| {\n      app.manage(Mutex::new(AppState::default()));\n      Ok(())\n    })\n    .on_window_event(on_window_event)\n    .run(tauri::generate_context!())\n    .unwrap();\n}\n```\n\nThis method is useful when you cannot rely on command injection. For example, if you need to move the state into a thread where using an `AppHandle` is easier, or if you are not in a command context.","tokens_est":312,"tags":["commands","windowing","state","lang:rust","has_code"],"src_path":"state-management.mdx","anchors":["access-state-with-the-manager-trait"],"code_languages":["rust"],"version":null,"permissions":[],"config_keys":["window.app_handle","app.manage"],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.113Z"}
{"id":"state-management#mismatching-types","doc_id":"state-management","section_title":"Mismatching Types","doc_title":"State Management","hierarchy":["State Management","Mismatching Types"],"content":"## Mismatching Types\n\n[CAUTION]\n\nIf you use the wrong type for the [`State`] parameter, you will get a runtime panic instead of compile time error.\n\nFor example, if you use `State<'_, AppState>` instead of `State<'_, Mutex<AppState>>`, there won't be any state managed with that type.\n:::\n\nIf you prefer, you can wrap your state with a type alias to prevent this mistake:\n\n```rust\nuse std::sync::Mutex;\n\n#[derive(Default)]\nstruct AppStateInner {\n  counter: u32,\n}\n\ntype AppState = Mutex<AppStateInner>;\n```\n\nHowever, make sure to use the type alias as it is, and not wrap it in a [`Mutex`] a second time, otherwise you will run into the same issue.\n\n[`Manager`]: https://docs.rs/tauri/latest/tauri/trait.Manager.html\n[`State`]: https://docs.rs/tauri/latest/tauri/struct.State.html\n[`Mutex`]: https://doc.rust-lang.org/stable/std/sync/struct.Mutex.html\n[`Arc`]: https://doc.rust-lang.org/stable/std/sync/struct.Arc.html\n[`App`]: https://docs.rs/tauri/latest/tauri/struct.App.html\n[`Result`]: https://doc.rust-lang.org/stable/std/result/index.html","tokens_est":261,"tags":["state","lang:rust","has_code"],"src_path":"state-management.mdx","anchors":["mismatching-types"],"code_languages":["rust"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.113Z"}
{"id":"system-tray#introduction","doc_id":"system-tray","section_title":"Introduction","doc_title":"System Tray","hierarchy":["System Tray"],"content":"Tauri allows you to create and customize a system tray for your application.\nThis can enhance the user experience by providing quick access to common actions.","tokens_est":40,"tags":["tray","windowing"],"src_path":"system-tray.mdx","anchors":["introduction"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["tray"],"updated_at":"2025-09-01T10:05:53.115Z","raw_frontmatter":"title: System Tray\r\nsidebar:\r\n  order: 1\r\ntableOfContents:\r\n  maxHeadingLevel: 4\r\ni18nReady: true\r"}
{"id":"system-tray#configuration","doc_id":"system-tray","section_title":"Configuration","doc_title":"System Tray","hierarchy":["System Tray","Configuration"],"content":"## Configuration\n\nFirst of all, update your `Cargo.toml` to include the necessary feature for the system tray.\n\n```toml title=\"src-tauri/Cargo.toml\"\ntauri = { version = \"2.0.0\", features = [ \"tray-icon\" ] }\n```","tokens_est":53,"tags":["tray","assets","configuration","windowing","lang:toml","has_code"],"src_path":"system-tray.mdx","anchors":["configuration"],"code_languages":["toml"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["tray"],"updated_at":"2025-09-01T10:05:53.115Z"}
{"id":"system-tray#usage","doc_id":"system-tray","section_title":"Usage","doc_title":"System Tray","hierarchy":["System Tray","Usage"],"content":"## Usage\n\nThe tray API is available in both JavaScript and Rust.","tokens_est":16,"tags":["tray","windowing"],"src_path":"system-tray.mdx","anchors":["usage"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["tray"],"updated_at":"2025-09-01T10:05:53.115Z"}
{"id":"system-tray#create-a-tray-icon","doc_id":"system-tray","section_title":"Create a Tray Icon","doc_title":"System Tray","hierarchy":["System Tray","Usage","Create a Tray Icon"],"content":"### Create a Tray Icon\n\nUse the [`TrayIcon.new`] static function to create a new tray icon:\n\n```javascript\nconst options = {\n  // here you can add a tray menu, title, tooltip, event handler, etc\n};\n\nconst tray = await TrayIcon.new(options);\n```\n\nSee [`TrayIconOptions`] for more information on the customization options.\n\n```rust\nuse tauri::tray::TrayIconBuilder;\n\ntauri::Builder::default()\n    .setup(|app| {\n        let tray = TrayIconBuilder::new().build(app)?;\n        Ok(())\n    })\n\n```\n\nSee [`TrayIconBuilder`] for more information on customization options.","tokens_est":141,"tags":["tray","assets","windowing","lang:javascript","lang:rust","has_code"],"src_path":"system-tray.mdx","anchors":["create-a-tray-icon"],"code_languages":["javascript","rust"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["tray"],"updated_at":"2025-09-01T10:05:53.115Z"}
{"id":"system-tray#change-the-tray-icon","doc_id":"system-tray","section_title":"Change the Tray Icon","doc_title":"System Tray","hierarchy":["System Tray","Usage","Change the Tray Icon"],"content":"### Change the Tray Icon\n\nWhen creating the tray you can use the application icon as the tray icon:\n\n```javascript\nconst options = {\n  icon: await defaultWindowIcon(),\n};\n\nconst tray = await TrayIcon.new(options);\n```\n\n```rust\nlet tray = TrayIconBuilder::new()\n  .icon(app.default_window_icon().unwrap().clone())\n  .build(app)?;\n```","tokens_est":83,"tags":["windowing","tray","assets","lang:javascript","lang:rust","has_code"],"src_path":"system-tray.mdx","anchors":["change-the-tray-icon"],"code_languages":["javascript","rust"],"version":null,"permissions":[],"config_keys":["app.default_window_icon"],"commands":[],"plugins":["tray"],"updated_at":"2025-09-01T10:05:53.115Z"}
{"id":"system-tray#add-a-menu","doc_id":"system-tray","section_title":"Add a Menu","doc_title":"System Tray","hierarchy":["System Tray","Usage","Add a Menu"],"content":"### Add a Menu\n\nTo attach a menu that is displayed when the tray is clicked, you can use the `menu` option.\n\n[NOTE]\n\nBy default the menu is displayed on both left and right clicks.\n\nTo prevent the menu from popping up on left click, call the [`menu_on_left_click(false)`][TrayIconBuilder::menu_on_left_click] Rust function\nor set the [`menuOnLeftClick`] JavaScript option to `false`.\n:::\n\n{/* TODO: link to the menu plugin documentation page */}\n\n```javascript\nconst menu = await Menu.new({\n  items: [\n    {\n      id: 'quit',\n      text: 'Quit',\n    },\n  ],\n});\n\nconst options = {\n  menu,\n  menuOnLeftClick: true,\n};\n\nconst tray = await TrayIcon.new(options);\n```\n\n```rust\nuse tauri::{\n  menu::{Menu, MenuItem},\n  tray::TrayIconBuilder,\n};\n\nlet quit_i = MenuItem::with_id(app, \"quit\", \"Quit\", true, None::<&str>)?;\nlet menu = Menu::with_items(app, &[&quit_i])?;\n\nlet tray = TrayIconBuilder::new()\n  .menu(&menu)\n  .menu_on_left_click(true)\n  .build(app)?;\n```","tokens_est":240,"tags":["tray","assets","windowing","lang:javascript","lang:rust","has_code"],"src_path":"system-tray.mdx","anchors":["add-a-menu"],"code_languages":["javascript","rust"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["tray"],"updated_at":"2025-09-01T10:05:53.115Z"}
{"id":"system-tray#listen-to-menu-events","doc_id":"system-tray","section_title":"Listen to Menu Events","doc_title":"System Tray","hierarchy":["System Tray","Usage","Add a Menu","Listen to Menu Events"],"content":"#### Listen to Menu Events\n\nOn JavaScript you can attach a menu click event listener directly to the menu item:\n\n- Using a shared menu click handler\n\n  ```javascript\n  function onTrayMenuClick(itemId) {\n    // itemId === 'quit'\n  }\n\n  const menu = await Menu.new({\n    items: [\n      {\n        id: 'quit',\n        text: 'Quit',\n        action: onTrayMenuClick,\n      },\n    ],\n  });\n  ```\n\n- Using a dedicated menu click handler\n\n  ```javascript\n  const menu = await Menu.new({\n    items: [\n      {\n        id: 'quit',\n        text: 'Quit',\n        action: () => {\n          console.log('quit pressed');\n        },\n      },\n    ],\n  });\n  ```\n\nUse the [`TrayIconBuilder::on_menu_event`] method to attach a tray menu click event listener:\n\n```rust\nuse tauri::tray::TrayIconBuilder;\n\nTrayIconBuilder::new()\n  .on_menu_event(|app, event| match event.id.as_ref() {\n    \"quit\" => {\n      println!(\"quit menu item was clicked\");\n      app.exit(0);\n    }\n    _ => {\n      println!(\"menu item {:?} not handled\", event.id);\n    }\n  })\n```","tokens_est":257,"tags":["ipc","tray","assets","windowing","lang:javascript","lang:rust","has_code"],"src_path":"system-tray.mdx","anchors":["listen-to-menu-events"],"code_languages":["javascript","rust"],"version":null,"permissions":[],"config_keys":["app.exit"],"commands":[],"plugins":["tray"],"updated_at":"2025-09-01T10:05:53.115Z"}
{"id":"system-tray#listen-to-tray-events","doc_id":"system-tray","section_title":"Listen to Tray Events","doc_title":"System Tray","hierarchy":["System Tray","Usage","Listen to Tray Events"],"content":"### Listen to Tray Events\n\nThe tray icon emits events for the following mouse events:\n\n- click: triggered when the cursor receives a single left, right or middle click, including information on whether the mouse press was released or not\n- Double click: triggered when the cursor receives a double left, right or middle click\n- Enter: triggered when the cursor enters the tray icon area\n- Move: triggered when the cursor moves around the tray icon area\n- Leave: triggered when the cursor leaves the tray icon area\n\n```javascript\nconst options = {\n  action: (event) => {\n    switch (event.type) {\n      case 'Click':\n        console.log(\n          `mouse ${event.button} button pressed, state: ${event.buttonState}`\n        );\n        break;\n      case 'DoubleClick':\n        console.log(`mouse ${event.button} button pressed`);\n        break;\n      case 'Enter':\n        console.log(\n          `mouse hovered tray at ${event.rect.position.x}, ${event.rect.position.y}`\n        );\n        break;\n      case 'Move':\n        console.log(\n          `mouse moved on tray at ${event.rect.position.x}, ${event.rect.position.y}`\n        );\n        break;\n      case 'Leave':\n        console.log(\n          `mouse left tray at ${event.rect.position.x}, ${event.rect.position.y}`\n        );\n        break;\n    }\n  },\n};\n\nconst tray = await TrayIcon.new(options);\n```\n\nSee [`TrayIconEvent`][js TrayIconEvent] for more information on the event payload.\n\n```rust\nuse tauri::{\n    Manager,\n    tray::{MouseButton, MouseButtonState, TrayIconBuilder, TrayIconEvent}\n};\n\nTrayIconBuilder::new()\n  .on_tray_icon_event(|tray, event| match event {\n    TrayIconEvent::Click {\n      button: MouseButton::Left,\n      button_state: MouseButtonState::Up,\n      ..\n    } => {\n      println!(\"left click pressed and released\");\n      // in this example, let's show and focus the main window when the tray is clicked\n      let app = tray.app_handle();\n      if let Some(window) = app.get_webview_window(\"main\") {\n        let _ = window.unminimize();\n        let _ = window.show();\n        let _ = window.set_focus();\n      }\n    }\n    _ => {\n      println!(\"unhandled event {event:?}\");\n    }\n  })\n```\n\nSee [`TrayIconEvent`][rust TrayIconEvent] for more information on the event type.\n\nFor detailed information about creating menus, including menu items, submenus, and dynamic updates, see the [Window Menu](/learn/window-menu/) documentation.\n\n[`TrayIcon.new`]: /reference/javascript/api/namespacetray/#new\n[`TrayIconOptions`]: /reference/javascript/api/namespacetray/#trayiconoptions\n[`TrayIconBuilder`]: https://docs.rs/tauri/2.0.0/tauri/tray/struct.TrayIconBuilder.html\n[TrayIconBuilder::menu_on_left_click]: https://docs.rs/tauri/2.0.0/tauri/tray/struct.TrayIconBuilder.html#method.menu_on_left_click\n[`menuOnLeftClick`]: /reference/javascript/api/namespacetray/#properties-1\n[`TrayIconBuilder::on_menu_event`]: https://docs.rs/tauri/2.0.0/tauri/tray/struct.TrayIconBuilder.html#method.on_menu_event\n[js TrayIconEvent]: /reference/javascript/api/namespacetray/#trayiconevent\n[rust TrayIconEvent]: https://docs.rs/tauri/2.0.0/tauri/tray/enum.TrayIconEvent.html","tokens_est":784,"tags":["ipc","windowing","state","tray","assets","lang:javascript","lang:rust","has_code"],"src_path":"system-tray.mdx","anchors":["listen-to-tray-events"],"code_languages":["javascript","rust"],"version":null,"permissions":[],"config_keys":["app.get_webview_window","window.unminimize","window.show","window.set_focus"],"commands":[],"plugins":["tray"],"updated_at":"2025-09-01T10:05:53.115Z"}
{"id":"updating-dependencies#introduction","doc_id":"updating-dependencies","section_title":"Introduction","doc_title":"Updating Dependencies","hierarchy":["Updating Dependencies"],"content":"{/* TODO: Add plugin update example */}","tokens_est":10,"tags":[],"src_path":"updating-dependencies.mdx","anchors":["introduction"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.116Z","raw_frontmatter":"title: Updating Dependencies\r\ni18nReady: true\r"}
{"id":"updating-dependencies#update-npm-packages","doc_id":"updating-dependencies","section_title":"Update npm Packages","doc_title":"Updating Dependencies","hierarchy":["Updating Dependencies","Update npm Packages"],"content":"## Update npm Packages\n\nIf you are using the `tauri` package:\n\nYou can also detect what the latest version of Tauri is on the command line, using:","tokens_est":37,"tags":["commands"],"src_path":"updating-dependencies.mdx","anchors":["update-npm-packages"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.116Z"}
{"id":"updating-dependencies#update-cargo-packages","doc_id":"updating-dependencies","section_title":"Update Cargo Packages","doc_title":"Updating Dependencies","hierarchy":["Updating Dependencies","Update Cargo Packages"],"content":"## Update Cargo Packages\n\nYou can check for outdated packages with [`cargo outdated`] or on the crates.io pages: [tauri] / [tauri-build].\n\nGo to `src-tauri/Cargo.toml` and change `tauri` and `tauri-build` to\n\n```toml\n[build-dependencies]\ntauri-build = \"%version%\"\n\n[dependencies]\ntauri = { version = \"%version%\" }\n```\n\nwhere `%version%` is the corresponding version number from above.\n\nThen do the following:\n\n```shell\ncd src-tauri\ncargo update\n```\n\nAlternatively, you can run the `cargo upgrade` command provided by [cargo-edit] which does all of this automatically.","tokens_est":142,"tags":["commands","migration","configuration","lang:toml","lang:shell","has_code"],"src_path":"updating-dependencies.mdx","anchors":["update-cargo-packages"],"code_languages":["toml","shell"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["shell"],"updated_at":"2025-09-01T10:05:53.116Z"}
{"id":"updating-dependencies#sync-npm-packages-and-cargo-crates-versions","doc_id":"updating-dependencies","section_title":"Sync npm Packages and Cargo Crates versions","doc_title":"Updating Dependencies","hierarchy":["Updating Dependencies","Sync npm Packages and Cargo Crates versions"],"content":"## Sync npm Packages and Cargo Crates versions\n\nSince the JavaScript APIs rely on Rust code in the backend, adding a new feature requires upgrading both sides to ensure compatibility. Please make sure you have the same minor version of the npm package `@tauri-apps/api` and cargo crate `tauri` synced\n\nAnd for the plugins, we might introduce this type of changes in patch releases, so we bump the npm package and cargo crate versions together, and you need to keep the exact versions synced, for example, you need the same version (e.g. `2.2.1`) of the npm package `@tauri-apps/plugin-fs` and cargo crate `tauri-plugin-fs`\n\n[`cargo outdated`]: https://github.com/kbknapp/cargo-outdated\n[tauri]: https://crates.io/crates/tauri/versions\n[tauri-build]: https://crates.io/crates/tauri-build/versions\n[cargo-edit]: https://github.com/killercup/cargo-edit","tokens_est":212,"tags":[],"src_path":"updating-dependencies.mdx","anchors":["sync-npm-packages-and-cargo-crates-versions"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["fs"],"updated_at":"2025-09-01T10:05:53.116Z"}
{"id":"using-plugin-permissions#introduction-part-1","doc_id":"using-plugin-permissions","section_title":"Introduction","doc_title":"Using Plugin Permissions","hierarchy":["Using Plugin Permissions"],"content":"import ShowSolution from '@components/ShowSolution.astro'\nThe goal of this exercise is to get a better understanding on how\nplugin permissions can be enabled or disabled, where they are described\nand how to use default permissions of plugins.\n\nAt the end you will have the ability to find and use permissions of\narbitrary plugins and understand how to custom tailor existing permissions.\nYou will have an example Tauri application where a plugin and plugin specific\npermissions are used.\n\n1. ### Create Tauri Application\n\n    Create your Tauri application.\n    In our example we will facilitate [`create-tauri-app`](https://github.com/tauri-apps/create-tauri-app):\n\n    \n\n    We will proceed in this step-by-step explanation with `pnpm` but you can choose another\n    package manager and replace it in the commands accordingly.\n\n    \n    ```\n    pnpm create tauri-app\n    ```\n\n    ```\n    ✔ Project name · plugin-permission-demo\n    ✔ Choose which language to use for your frontend · TypeScript / JavaScript - (pnpm, yarn, npm, bun)\n    ✔ Choose your package manager · pnpm\n    ✔ Choose your UI template · Vanilla\n    ✔ Choose your UI flavor · TypeScript\n\n    Template created! To get started run:\n    cd plugin-permission-demo\n    pnpm install\n    pnpm tauri dev\n    ```\n    \n\n2. ### Add the `file-system` Plugin to Your Application\n\n    To search for existing plugins you can use multiple resources.\n\n    The most straight forward way would be to check out if your plugin is already\n    in the [Plugins](/plugin/) section of the documentation and therefore part of Tauri's\n    maintained plugin set.\n    The Filesystem plugin is part of the Tauri plugin workspace and you can add it to\n    your project by following the [instructions](/plugin/file-system/#setup).\n\n    If the plugin is part of the community effort you can most likely find it\n    on [crates.io](https://crates.io/search?q=tauri-plugin-) when searching for `tauri-plugin-<your plugin name>`.\n\n    \n    If it is an existing plugin from our workspace you can use the automated way:\n\n    ```\n    pnpm tauri add fs\n    ```\n\n    If you have found it on [crates.io](https://crates.io/crates/tauri-plugin-fs)\n    you need to manually add it as a dependency and modify the Tauri builder\n    to initialize the plugin:\n\n    ```sh\n    cargo add tauri-plugin-fs\n    ```\n\n    Modify `lib.rs` to initialize the plugin:\n\n    ```rust title=\"src-tauri/src/lib.rs\" ins={4}\n    #[cfg_attr(mobile, tauri::mobile_entry_point)]\n    fn run() {\n      tauri::Builder::default()\n        .plugin(tauri_plugin_fs::init())\n        .run(tauri::generate_context!())\n        .expect(\"error while running tauri application\");\n    }\n    ```\n    \n\n3. ### Understand the Default Permissions of the `fs` Plugin\n    \n    Each plugin has a `default` permission set, which contains\n    all permissions and scopes to use the plugin out of the box\n    with a reasonable minimal feature set.\n    \n    In the case of official maintained plugins you can find a\n    rendered description in the documentation\n    (eg. [fs default](/plugin/file-system/#default-permission)).\n\n    In case you are figuring this out for a community plugin you\n    need to check out the source code of the plugin.\n    This should be defined in `your-plugin/permissions/default.toml`.\n\n    \n    ```\n    \"$schema\" = \"schemas/schema.json\"\n\n    [default]\n    description = \"\"\"\n    # Tauri `fs` default permissions\n\n    This configuration file defines the default permissions granted\n    to the filesystem.\n\n    ### Granted Permissions\n\n    This default permission set enables all read-related commands and\n    allows access to the `$APP` folder and sub directories created in it.\n    The location of the `$APP` folder depends on the operating system,\n    where the application is run.\n\n    In general the `$APP` folder needs to be manually created\n    by the application at runtime, before accessing files or folders\n    in it is possible.\n\n    ### Denied Permissions\n\n    This default permission set prevents access to critical components\n    of the Tauri application by default.\n    On Windows the webview data folder access is denied.\n\n    \"\"\"\n    permissions = [\"read-all\", \"scope-app-recursive\", \"deny-default\"]\n\n    ```\n    \n\n  4. ### Find the Right Permissions\n      \n      This step is all about finding the permissions you need to\n      for your commands to be exposed to the frontend with the minimal\n      access to your system.\n\n      The `fs` plugin has autogenerated permissions which will disable\n      or enable individual commands and allow or disable global scopes.\n\n      These can be found in the [documentation](/plugin/file-system/#permission-table)\n      or in the source code of the plugin (`fs/permissions/autogenerated`).\n\n      Let us assume we want to enable writing to a text file `test.txt`\n      located in the users `$HOME` folder.\n\n      For this we would search in the autogenerated permissions for a\n      permission to enable writing to text files like `allow-write-text-file`\n      and then for a scope which would allow us to access the `$HOME/test.txt`\n      file.\n\n      We need to add these to our `capabilities` section in our\n      `src-tauri/tauri.conf.json` or in a file in the `src-tauri/capabilities/` folder.\n      By default there is already a capability in `src-tauri/capabilities/default.json` we \n      can modify.\n\n      \n\n      ```json title=\"src-tauri/capabilities/default.json\" del={18} ins={19}\n      {\n        \"$schema\": \"../gen/schemas/desktop-schema.json\",\n        \"identifier\": \"default\",\n        \"description\": \"Capability for the main window\",\n        \"windows\": [\n          \"main\"\n        ],\n        \"permissions\": [\n          \"path:default\",\n          \"event:default\",\n          \"window:default\",\n          \"app:default\",\n          \"image:default\",\n          \"resources:default\",\n          \"menu:default\",\n          \"tray:default\",\n          \"shell:allow-open\",\n          \"fs:default\",\n          \"fs:allow-write-text-file\",\n        ]\n      }\n      ```\n\n      \n\n      Since there are only autogenerated scopes in the `fs` plugin to\n      access the full `$HOME` folder, we need to configure our own scope.\n      This scope should be only enabled for the `write-text-file` command\n      and should only expose our `test.txt` file.\n\n      \n      ```json title=\"src-tauri/capabilities/default.json\" del={18} ins={19-22}\n         {\n        \"$schema\": \"../gen/schemas/desktop-schema.json\",\n        \"identifier\": \"default\",\n        \"description\": \"Capability for the main window\",\n        \"windows\": [\n          \"main\"\n        ],\n        \"permissions\": [\n          \"path:default\",\n          \"event:default\",\n          \"window:default\",\n          \"app:default\",\n          \"image:default\",\n          \"resources:default\",\n          \"menu:default\",\n          \"tray:default\",\n          \"shell:allow-open\",\n          \"fs:allow-write-text-file\",\n          {\n            \"identifier\": \"fs:allow-write-text-file\",\n            \"allow\": [{ \"path\": \"$HOME/test.txt\" }]\n          },\n        ]\n      }\n      ```\n      \n    5. ### Test Permissions in Practice\n\n        After we have added the necessary permission we want to\n        confirm that our application can access the file and write\n        it's content.\n\n        \n        We can use this snippet in our application to write to the file:\n\n        ```ts title=\"src/main.ts\"\n        let greetInputEl: HTMLInputElement | null;\n\n        async function write(message: string) {\n            await writeTextFile('test.txt', message, { baseDir: BaseDirectory.Home });\n        }\n\n        window.addEventListener(\"DOMContentLoaded\", () => {\n          greetInputEl = document.querySelector(\"#greet-input\");\n          document.querySelector(\"#greet-form\")?.addEventListener(\"submit\", (e) => {\n            e.preventDefault();\n            if (!greetInputEl )\n              return;\n\n            write(greetInputEl.value == \"\" ? \"No input provided\": greetInputEl.value);\n\n          });\n        });\n\n        ```\n\n        Replacing the `src/main.ts` with this snippet means we do not need to modify the default `index.html`,\n        when using the plain Vanilla+Typescript app.\n        Entering any input into the input field of the running app will be\n        written to the file on submit.\n\n        Let's test now in practice:\n\n        ```\n        pnpm run tauri dev\n        ```\n\n        After writing into the input and clicking \"Submit\",\n        we can check via our terminal emulator or by manually opening the\n        file in your home folder.\n\n        ```\n        cat $HOME/test.txt\n        ```\n\n        You should be presented with your input and finished learning about using permissions from plugins in Tauri applications.\n        🥳\n\n        If you encountered this error:\n\n        ```sh\n        [Error] Unhandled Promise Rejection: fs.write_text_file not allowed. Permissions associated with this command: fs:allow-app-write, fs:allow-app-write-recursive, fs:allow-appcache-write, fs:allow-appcache-write-recursive, fs:allow-appconf...\n        (anonymous function) (main.ts:5)\n        ```\n        Then you very likely did not properly follow the [previous instructions](#find-the-right-permissions).","tokens_est":2298,"tags":["commands","permissions","windowing","resources","configuration","plugins","lang:sh","lang:rust","lang:json","lang:ts","has_code"],"src_path":"using-plugin-permissions.mdx","anchors":["introduction"],"code_languages":["sh","rust","json","ts"],"version":null,"permissions":["shell:allow-open","fs:allow-write-text-file","fs:allow-app-write","fs:allow-app-write-recursive","fs:allow-appcache-write","fs:allow-appcache-write-recursive","fs:allow-appconf"],"config_keys":["window.addEventListener"],"commands":[],"plugins":["fs","shell","tray"],"updated_at":"2025-09-01T10:05:53.116Z","raw_frontmatter":"title: Using Plugin Permissions\r\nsidebar:\r\n  order: 10\r\ni18nReady: true\r","part_index":1,"part_total":1}
{"id":"vite#introduction","doc_id":"vite","section_title":"Introduction","doc_title":"Vite","hierarchy":["Vite"],"content":"Vite is a build tool that aims to provide a faster and leaner development experience for modern web projects.\nThis guide is accurate as of Vite 5.4.8.","tokens_est":38,"tags":["tooling","configuration"],"src_path":"vite.mdx","anchors":["introduction"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.117Z","raw_frontmatter":"title: Vite\r\ntableOfContents:\r\n  minHeadingLevel: 2\r\n  maxHeadingLevel: 5\r\ni18nReady: true\r"}
{"id":"vite#checklist","doc_id":"vite","section_title":"Checklist","doc_title":"Vite","hierarchy":["Vite","Checklist"],"content":"## Checklist\n\n- Use `../dist` as `frontendDist` in `src-tauri/tauri.conf.json`.\n- Use `process.env.TAURI_DEV_HOST` as the development server host IP when set to run on iOS physical devices.","tokens_est":47,"tags":["mobile","configuration","tooling"],"src_path":"vite.mdx","anchors":["checklist"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["process"],"updated_at":"2025-09-01T10:05:53.117Z"}
{"id":"vite#example-configuration","doc_id":"vite","section_title":"Example configuration","doc_title":"Vite","hierarchy":["Vite","Example configuration"],"content":"## Example configuration\n\n1.  ##### Update Tauri configuration\n\n    Assuming you have the following `dev` and `build` scripts in your `package.json`:\n\n    ```json\n    {\n      \"scripts\": {\n        \"dev\": \"vite\",\n        \"build\": \"tsc && vite build\",\n        \"preview\": \"vite preview\",\n        \"tauri\": \"tauri\"\n      }\n    }\n    ```\n\n    You can configure the Tauri CLI to use your Vite development server and dist folder\n    along with the hooks to automatically run the Vite scripts:\n\n    \n\n    \n\n    ```json\n    // tauri.conf.json\n    {\n      \"build\": {\n        \"beforeDevCommand\": \"npm run dev\",\n        \"beforeBuildCommand\": \"npm run build\",\n        \"devUrl\": \"http://localhost:5173\",\n        \"frontendDist\": \"../dist\"\n      }\n    }\n    ```\n\n    \n\n    \n\n    ```json\n    // tauri.conf.json\n    {\n      \"build\": {\n        \"beforeDevCommand\": \"yarn dev\",\n        \"beforeBuildCommand\": \"yarn build\",\n        \"devUrl\": \"http://localhost:5173\",\n        \"frontendDist\": \"../dist\"\n      }\n    }\n    ```\n\n    \n\n    \n\n    ```json\n    // tauri.conf.json\n    {\n      \"build\": {\n        \"beforeDevCommand\": \"pnpm dev\",\n        \"beforeBuildCommand\": \"pnpm build\",\n        \"devUrl\": \"http://localhost:5173\",\n        \"frontendDist\": \"../dist\"\n      }\n    }\n    ```\n\n    \n\n    \n\n    ```json\n    // tauri.conf.json\n    {\n      \"build\": {\n        \"beforeDevCommand\": \"deno task dev\",\n        \"beforeBuildCommand\": \"deno task build\",\n        \"devUrl\": \"http://localhost:5173\",\n        \"frontendDist\": \"../dist\"\n      }\n    }\n    ```\n\n    \n\n    \n\n1.  ##### Update Vite configuration:\n\n    ```js title=\"vite.config.js\"\n    const host = process.env.TAURI_DEV_HOST;\n\n    export default defineConfig({\n      // prevent vite from obscuring rust errors\n      clearScreen: false,\n      server: {\n        // make sure this port matches the devUrl port in tauri.conf.json file\n        port: 5173,\n        // Tauri expects a fixed port, fail if that port is not available\n        strictPort: true,\n        // if the host Tauri is expecting is set, use it\n        host: host || false,\n        hmr: host\n          ? {\n              protocol: 'ws',\n              host,\n              port: 1421,\n            }\n          : undefined,\n\n        watch: {\n          // tell vite to ignore watching `src-tauri`\n          ignored: ['**/src-tauri/**'],\n        },\n      },\n      // Env variables starting with the item of `envPrefix` will be exposed in tauri's source code through `import.meta.env`.\n      envPrefix: ['VITE_', 'TAURI_ENV_*'],\n      build: {\n        // Tauri uses Chromium on Windows and WebKit on macOS and Linux\n        target:\n          process.env.TAURI_ENV_PLATFORM == 'windows'\n            ? 'chrome105'\n            : 'safari13',\n        // don't minify for debug builds\n        minify: !process.env.TAURI_ENV_DEBUG ? 'esbuild' : false,\n        // produce sourcemaps for debug builds\n        sourcemap: !!process.env.TAURI_ENV_DEBUG,\n      },\n    });\n    ```","tokens_est":735,"tags":["commands","windowing","tooling","debugging","config","configuration","lang:json","lang:js","has_code"],"src_path":"vite.mdx","anchors":["example-configuration"],"code_languages":["json","js"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["http","cli","process"],"updated_at":"2025-09-01T10:05:53.117Z"}
{"id":"window-customization#introduction","doc_id":"window-customization","section_title":"Introduction","doc_title":"Window Customization","hierarchy":["Window Customization"],"content":"Tauri provides lots of options for customizing the look and feel of your app's window. You can create custom titlebars, have transparent windows, enforce size constraints, and more.","tokens_est":45,"tags":["windowing"],"src_path":"window-customization.mdx","anchors":["introduction"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.117Z","raw_frontmatter":"title: Window Customization\r\nsidebar:\r\n  order: 1\r\ntableOfContents:\r\n  maxHeadingLevel: 4\r\ni18nReady: true\r"}
{"id":"window-customization#configuration","doc_id":"window-customization","section_title":"Configuration","doc_title":"Window Customization","hierarchy":["Window Customization","Configuration"],"content":"## Configuration\n\nThere are three ways to change the window configuration:\n\n- <Icon name=\"external\" class=\"inline-icon\" /> [Through\n  tauri.conf.json](/reference/config/#windowconfig)\n- <Icon name=\"external\" class=\"inline-icon\" /> [Through the JavaScript\n  API](/reference/javascript/api/namespacewindow/#window)\n- <Icon name=\"external\" class=\"inline-icon\" /> [Through the Window in\n  Rust](https://docs.rs/tauri/2.0.0/tauri/window/struct.Window.html)","tokens_est":113,"tags":["windowing","assets","configuration"],"src_path":"window-customization.mdx","anchors":["configuration"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.117Z"}
{"id":"window-customization#usage","doc_id":"window-customization","section_title":"Usage","doc_title":"Window Customization","hierarchy":["Window Customization","Usage"],"content":"## Usage\n\n- [Creating a Custom Titlebar](#creating-a-custom-titlebar)\n- [(macOS) Transparent Titlebar with Custom Window Background Color](#macos-transparent-titlebar-with-custom-window-background-color)","tokens_est":51,"tags":["windowing"],"src_path":"window-customization.mdx","anchors":["usage"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.117Z"}
{"id":"window-customization#creating-a-custom-titlebar","doc_id":"window-customization","section_title":"Creating a Custom Titlebar","doc_title":"Window Customization","hierarchy":["Window Customization","Usage","Creating a Custom Titlebar"],"content":"### Creating a Custom Titlebar\n\nA common use of these window features is creating a custom titlebar. This short tutorial will guide you through that process.\n\n[NOTE]\n\nFor macOS, using a custom titlebar will also lose some features provided by the system, such as [moving or aligning the window](https://support.apple.com/guide/mac-help/work-with-app-windows-mchlp2469/mac). Another approach to customizing the titlebar but keeping native functions could be making the titlebar transparent and setting the window background color. See the usage [(macOS) Transparent Titlebar with Custom Window Background Color](#macos-transparent-titlebar-with-custom-window-background-color).\n:::","tokens_est":170,"tags":["windowing"],"src_path":"window-customization.mdx","anchors":["creating-a-custom-titlebar"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["process"],"updated_at":"2025-09-01T10:05:53.117Z"}
{"id":"window-customization#tauriconfjson","doc_id":"window-customization","section_title":"tauri.conf.json","doc_title":"Window Customization","hierarchy":["Window Customization","Usage","Creating a Custom Titlebar","tauri.conf.json"],"content":"#### tauri.conf.json\n\nSet `decorations` to `false` in your `tauri.conf.json`:\n\n```json title=\"tauri.conf.json\" {4}\n\"tauri\": {\n\t\"windows\": [\n\t\t{\n\t\t\t\"decorations\": false\n\t\t}\n\t]\n}\n```","tokens_est":45,"tags":["windowing","configuration","lang:json","has_code"],"src_path":"window-customization.mdx","anchors":["tauriconfjson"],"code_languages":["json"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.117Z"}
{"id":"window-customization#permissions","doc_id":"window-customization","section_title":"Permissions","doc_title":"Window Customization","hierarchy":["Window Customization","Usage","Creating a Custom Titlebar","Permissions"],"content":"#### Permissions\n\nAdd window permissions in capability file.\n\nBy default, all plugin commands are blocked and cannot be accessed. You must define a list of permissions in your `capabilities` configuration.\n\nSee the [Capabilities Overview](/security/capabilities/) for more information and the [step by step guide](/learn/security/using-plugin-permissions/) to use plugin permissions.\n\n```json title=\"src-tauri/capabilities/default.json\" ins={6}\n{\n  \"$schema\": \"../gen/schemas/desktop-schema.json\",\n  \"identifier\": \"main-capability\",\n  \"description\": \"Capability for the main window\",\n  \"windows\": [\"main\"],\n  \"permissions\": [\"core:window:default\", \"core:window:allow-start-dragging\"]\n}\n```\n\n| Permission                                   | Description                                                                    |\n| -------------------------------------------- | ------------------------------------------------------------------------------ |\n| `core:window:default`                        | Default permissions for the plugin. Except `window:allow-start-dragging`.      |\n| `core:window:allow-close`                    | Enables the close command without any pre-configured scope.                    |\n| `core:window:allow-minimize`                 | Enables the minimize command without any pre-configured scope.                 |\n| `core:window:allow-start-dragging`           | Enables the start_dragging command without any pre-configured scope.           |\n| `core:window:allow-toggle-maximize`          | Enables the toggle_maximize command without any pre-configured scope.          |\n| `core:window:allow-internal-toggle-maximize` | Enables the internal_toggle_maximize command without any pre-configured scope. |","tokens_est":433,"tags":["commands","permissions","windowing","lang:json","has_code"],"src_path":"window-customization.mdx","anchors":["permissions"],"code_languages":["json"],"version":null,"permissions":["core:window:default","core:window:allow-start-dragging","window:allow-start-dragging","core:window:allow-close","core:window:allow-minimize","core:window:allow-toggle-maximize","core:window:allow-internal-toggle-maximize"],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.117Z"}
{"id":"window-customization#css","doc_id":"window-customization","section_title":"CSS","doc_title":"Window Customization","hierarchy":["Window Customization","Usage","Creating a Custom Titlebar","CSS"],"content":"#### CSS\n\nAdd this CSS sample to keep it at the top of the screen and style the buttons:\n\n```css\n.titlebar {\n  height: 30px;\n  background: #329ea3;\n  user-select: none;\n  display: grid;\n  grid-template-columns: auto max-content;\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n}\n.titlebar > .controls {\n  display: flex;\n}\n.titlebar button {\n  appearance: none;\n  padding: 0;\n  margin: 0;\n  border: none;\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  width: 30px;\n  background-color: transparent;\n}\n.titlebar button:hover {\n  background: #5bbec3;\n}\n```","tokens_est":146,"tags":["windowing","lang:css","has_code"],"src_path":"window-customization.mdx","anchors":["css"],"code_languages":["css"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.117Z"}
{"id":"window-customization#html","doc_id":"window-customization","section_title":"HTML","doc_title":"Window Customization","hierarchy":["Window Customization","Usage","Creating a Custom Titlebar","HTML"],"content":"#### HTML\n\nPut this at the top of your `<body>` tag:\n\n```html\n<div class=\"titlebar\">\n  <div data-tauri-drag-region></div>\n  <div class=\"controls\">\n    <button id=\"titlebar-minimize\" title=\"minimize\">\n      <!-- https://api.iconify.design/mdi:window-minimize.svg -->\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n      >\n        <path fill=\"currentColor\" d=\"M19 13H5v-2h14z\" />\n      </svg>\n    </button>\n    <button id=\"titlebar-maximize\" title=\"maximize\">\n      <!-- https://api.iconify.design/mdi:window-maximize.svg -->\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n      >\n        <path fill=\"currentColor\" d=\"M4 4h16v16H4zm2 4v10h12V8z\" />\n      </svg>\n    </button>\n    <button id=\"titlebar-close\" title=\"close\">\n      <!-- https://api.iconify.design/mdi:close.svg -->\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n      >\n        <path\n          fill=\"currentColor\"\n          d=\"M13.46 12L19 17.54V19h-1.46L12 13.46L6.46 19H5v-1.46L10.54 12L5 6.46V5h1.46L12 10.54L17.54 5H19v1.46z\"\n        />\n      </svg>\n    </button>\n  </div>\n</div>\n```\n\nNote that you may need to move the rest of your content down so that the titlebar doesn't cover it.\n\n[TIP]\n\nOn Windows, if you just want a title bar that doesn't need custom interactions, you can use\n\n```css\n*[data-tauri-drag-region] {\n  app-region: drag;\n}\n```\n\nto make the title bar work with touch and pen inputs\n\n:::","tokens_est":398,"tags":["windowing","assets","lang:html","lang:css","has_code"],"src_path":"window-customization.mdx","anchors":["html"],"code_languages":["html","css"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["http"],"updated_at":"2025-09-01T10:05:53.117Z"}
{"id":"window-customization#javascript","doc_id":"window-customization","section_title":"JavaScript","doc_title":"Window Customization","hierarchy":["Window Customization","Usage","Creating a Custom Titlebar","JavaScript"],"content":"#### JavaScript\n\nUse this code snippet to make the buttons work:\n\n```javascript\n// when using `\"withGlobalTauri\": true`, you may use\n// const { getCurrentWindow } = window.__TAURI__.window;\n\nconst appWindow = getCurrentWindow();\n\ndocument\n  .getElementById('titlebar-minimize')\n  ?.addEventListener('click', () => appWindow.minimize());\ndocument\n  .getElementById('titlebar-maximize')\n  ?.addEventListener('click', () => appWindow.toggleMaximize());\ndocument\n  .getElementById('titlebar-close')\n  ?.addEventListener('click', () => appWindow.close());\n```\n\nNote that if you are using a Rust-based frontend, you can copy the code above into a `<script>` element in your `index.html` file.\n\n[NOTE]\n\n`data-tauri-drag-region` will only work on the element to which it is directly applied. If you want the drag behavior to apply to child elements as well, you'll need to add it to each child individually.\n\nThis behavior is preserved so that interactive elements like buttons and inputs can function properly.\n:::","tokens_est":252,"tags":["windowing","lang:javascript","has_code"],"src_path":"window-customization.mdx","anchors":["javascript"],"code_languages":["javascript"],"version":null,"permissions":[],"config_keys":["window.__TAURI__.window"],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.117Z"}
{"id":"window-customization#manual-implementation-of-data-tauri-drag-region","doc_id":"window-customization","section_title":"Manual Implementation of `data-tauri-drag-region`","doc_title":"Window Customization","hierarchy":["Window Customization","Usage","Manual Implementation of `data-tauri-drag-region`"],"content":"### Manual Implementation of `data-tauri-drag-region`\n\nFor use cases where you customize the drag behavior, you can manually add an event listener with `window.startDragging` instead of using `data-tauri-drag-region`.","tokens_est":54,"tags":["windowing"],"src_path":"window-customization.mdx","anchors":["manual-implementation-of-data-tauri-drag-region"],"code_languages":[],"version":null,"permissions":[],"config_keys":["window.startDragging"],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.117Z"}
{"id":"window-customization#html-2","doc_id":"window-customization","section_title":"HTML","doc_title":"Window Customization","hierarchy":["Window Customization","Usage","Manual Implementation of `data-tauri-drag-region`","HTML"],"content":"#### HTML\n\nFrom the code in the previous section, we remove `data-tauri-drag-region` and add an `id`:\n\n```html del={1} ins={2}\n<div data-tauri-drag-region class=\"titlebar\">\n  <div id=\"titlebar\" class=\"titlebar\">\n    <!-- ... -->\n  </div>\n</div>\n```","tokens_est":62,"tags":["windowing","lang:html","has_code"],"src_path":"window-customization.mdx","anchors":["html-2"],"code_languages":["html"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.117Z"}
{"id":"window-customization#javascript-2","doc_id":"window-customization","section_title":"Javascript","doc_title":"Window Customization","hierarchy":["Window Customization","Usage","Manual Implementation of `data-tauri-drag-region`","Javascript"],"content":"#### Javascript\n\nAdd an event listener to the titlebar element:\n\n```js {2-9}\n// ...\ndocument.getElementById('titlebar')?.addEventListener('mousedown', (e) => {\n  if (e.buttons === 1) {\n    // Primary (left) button\n    e.detail === 2\n      ? appWindow.toggleMaximize() // Maximize on double click\n      : appWindow.startDragging(); // Else start dragging\n  }\n});\n```","tokens_est":91,"tags":["windowing","lang:js","has_code"],"src_path":"window-customization.mdx","anchors":["javascript-2"],"code_languages":["js"],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.117Z"}
{"id":"window-customization#macos-transparent-titlebar-with-custom-window-background-color","doc_id":"window-customization","section_title":"(macOS) Transparent Titlebar with Custom Window Background Color","doc_title":"Window Customization","hierarchy":["Window Customization","Usage","(macOS) Transparent Titlebar with Custom Window Background Color"],"content":"### (macOS) Transparent Titlebar with Custom Window Background Color\n\nWe are going to create the main window and change its background color from the Rust side.\n\nRemove the main window from the `tauri.conf.json` file:\n\n    ```json title=\"tauri.conf.json\" del={3-7}\n    \"tauri\": {\n    \t\"windows\": [\n    \t\t{\n    \t\t\t\"title\": \"Transparent Titlebar Window\",\n    \t\t\t\"width\": 800,\n    \t\t\t\"height\": 600\n    \t\t}\n    \t],\n    }\n    ```\n\nAdd `cocoa` crate to dependencies so that we can use it to call the macOS native API:\n\n    ```toml title=\"src-tauri/Cargo.toml\"\n    [target.\"cfg(target_os = \\\"macos\\\")\".dependencies]\n    cocoa = \"0.26\"\n    ```\n\nCreate the main window and change its background color:\n\n    ```rust title=\"src-tauri/src/lib.rs\"\n    use tauri::{TitleBarStyle, WebviewUrl, WebviewWindowBuilder};\n\n    pub fn run() {\n    \ttauri::Builder::default()\n    \t\t.setup(|app| {\n    \t\t\tlet win_builder =\n    \t\t\t\tWebviewWindowBuilder::new(app, \"main\", WebviewUrl::default())\n    \t\t\t\t\t.title(\"Transparent Titlebar Window\")\n    \t\t\t\t\t.inner_size(800.0, 600.0);\n\n    \t\t\t// set transparent title bar only when building for macOS\n    \t\t\t#[cfg(target_os = \"macos\")]\n    \t\t\tlet win_builder = win_builder.title_bar_style(TitleBarStyle::Transparent);\n\n    \t\t\tlet window = win_builder.build().unwrap();\n\n    \t\t\t// set background color only when building for macOS\n    \t\t\t#[cfg(target_os = \"macos\")]\n    \t\t\t{\n    \t\t\t\tuse cocoa::appkit::{NSColor, NSWindow};\n    \t\t\t\tuse cocoa::base::{id, nil};\n\n    \t\t\t\tlet ns_window = window.ns_window().unwrap() as id;\n    \t\t\t\tunsafe {\n    \t\t\t\t\tlet bg_color = NSColor::colorWithRed_green_blue_alpha_(\n    \t\t\t\t\t\t\tnil,\n    \t\t\t\t\t\t\t50.0 / 255.0,\n    \t\t\t\t\t\t\t158.0 / 255.0,\n    \t\t\t\t\t\t\t163.5 / 255.0,\n    \t\t\t\t\t\t\t1.0,\n    \t\t\t\t\t);\n    \t\t\t\t\tns_window.setBackgroundColor_(bg_color);\n    \t\t\t\t}\n    \t\t\t}\n\n    \t\t\tOk(())\n    \t\t})\n    \t\t.run(tauri::generate_context!())\n    \t\t.expect(\"error while running tauri application\");\n    }\n    ```","tokens_est":485,"tags":["windowing","configuration","lang:json","lang:toml","lang:rust","has_code"],"src_path":"window-customization.mdx","anchors":["macos-transparent-titlebar-with-custom-window-background-color"],"code_languages":["json","toml","rust"],"version":null,"permissions":[],"config_keys":["window.ns_window"],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.117Z"}
{"id":"window-menu#introduction","doc_id":"window-menu","section_title":"Introduction","doc_title":"Window Menu","hierarchy":["Window Menu"],"content":"Native application menus can be attached to both to a window or system tray. Available on desktop.","tokens_est":25,"tags":["windowing","tray"],"src_path":"window-menu.mdx","anchors":["introduction"],"code_languages":[],"version":null,"permissions":[],"config_keys":[],"commands":[],"plugins":["tray"],"updated_at":"2025-09-01T10:05:53.118Z","raw_frontmatter":"title: Window Menu\r\ntableOfContents:\r\n  maxHeadingLevel: 4\r\ni18nReady: true\r"}
{"id":"window-menu#creating-a-base-level-menu","doc_id":"window-menu","section_title":"Creating a base-level menu","doc_title":"Window Menu","hierarchy":["Window Menu","Creating a base-level menu"],"content":"## Creating a base-level menu\n\nTo create a base-level native window menu, and attach to a window. You can create various types of menu items including basic items, check items, and separators:\n\nUse the [`Menu.new`] static function to create a window menu:\n\n```javascript\nconst menu = await Menu.new({\n  items: [\n    {\n      id: 'quit',\n      text: 'Quit',\n      action: () => {\n        console.log('quit pressed');\n      },\n    },\n    {\n      id: 'check_item',\n      text: 'Check Item',\n      checked: true,\n    },\n    {\n      type: 'Separator',\n    },\n    {\n      id: 'disabled_item',\n      text: 'Disabled Item',\n      enabled: false,\n    },\n    {\n      id: 'status',\n      text: 'Status: Processing...',\n    },\n  ],\n});\n\n// If a window was not created with an explicit menu or had one set explicitly,\n// this menu will be assigned to it.\nmenu.setAsAppMenu().then(async (res) => {\n  console.log('menu set success', res);\n\n  // Update individual menu item text\n  const statusItem = await menu.get('status');\n  if (statusItem) {\n    await statusItem.setText('Status: Ready');\n  }\n});\n```\n\n```rust\nuse tauri::menu::MenuBuilder;\n\nfn main() {\n    tauri::Builder::default()\n        .setup(|app| {\n            let menu = MenuBuilder::new(app)\n                .text(\"open\", \"Open\")\n                .text(\"close\", \"Close\")\n                .check(\"check_item\", \"Check Item\")\n                .separator()\n                .text(\"disabled_item\", \"Disabled Item\")\n                .text(\"status\", \"Status: Processing...\")\n                .build()?;\n\n            app.set_menu(menu.clone())?;\n\n            // Update individual menu item text\n            menu\n                .get(\"status\")\n                .unwrap()\n                .as_menuitem_unchecked()\n                .set_text(\"Status: Ready\")?;\n\n            Ok(())\n        })\n        .run(tauri::generate_context!());\n}\n```","tokens_est":466,"tags":["windowing","lang:javascript","lang:rust","has_code"],"src_path":"window-menu.mdx","anchors":["creating-a-base-level-menu"],"code_languages":["javascript","rust"],"version":null,"permissions":[],"config_keys":["app.set_menu"],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.118Z"}
{"id":"window-menu#listening-to-events-on-custom-menu-items","doc_id":"window-menu","section_title":"Listening to events on custom menu items","doc_title":"Window Menu","hierarchy":["Window Menu","Listening to events on custom menu items"],"content":"## Listening to events on custom menu items\n\nEach custom menu item triggers an event when clicked. Use the `on_menu_event` API to handle them.\n\n```javascript\nconst menu = await Menu.new({\n  items: [\n    {\n      id: 'Open',\n      text: 'open',\n      action: () => {\n        console.log('open pressed');\n      },\n    },\n    {\n      id: 'Close',\n      text: 'close',\n      action: () => {\n        console.log('close pressed');\n      },\n    },\n  ],\n});\n\nawait menu.setAsAppMenu();\n```\n\n```rust\n#![cfg_attr(not(debug_assertions), windows_subsystem = \"windows\")]\nuse tauri::menu::{MenuBuilder};\n\nfn main() {\n  tauri::Builder::default()\n        .setup(|app| {\n            let menu = MenuBuilder::new(app)\n                .text(\"open\", \"Open\")\n                .text(\"close\", \"Close\")\n                .build()?;\n\n            app.set_menu(menu)?;\n\n            app.on_menu_event(move |app_handle: &tauri::AppHandle, event| {\n\n                println!(\"menu event: {:?}\", event.id());\n\n                match event.id().0.as_str() {\n                    \"open\" => {\n                        println!(\"open event\");\n                    }\n                    \"close\" => {\n                        println!(\"close event\");\n                    }\n                    _ => {\n                        println!(\"unexpected menu event\");\n                    }\n                }\n            });\n\n            Ok(())\n        })\n}\n```","tokens_est":351,"tags":["windowing","debugging","lang:javascript","lang:rust","has_code"],"src_path":"window-menu.mdx","anchors":["listening-to-events-on-custom-menu-items"],"code_languages":["javascript","rust"],"version":null,"permissions":[],"config_keys":["app.set_menu","app.on_menu_event"],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.118Z"}
{"id":"window-menu#creating-a-multi-level-menu","doc_id":"window-menu","section_title":"Creating a multi-level menu","doc_title":"Window Menu","hierarchy":["Window Menu","Creating a multi-level menu"],"content":"## Creating a multi-level menu\n\nMulti-level menus allow you to group menu items under categories like \"File,\" \"Edit,\" etc. These will appear as part of the application window for Windows or Linux, or in the menu bar on MacOS.\n\n**Note:** When using submenus on MacOS, all items must be grouped under a submenu. Top-level items will be ignored. Additionally, the first submenu will be placed under the application's about menu by default, regardless of the `text` label. You should include a submenu as the first entry (say, an \"About\" submenu) to fill this space.\n\n[NOTE]\n\nIcon support for submenus is available since Tauri 2.8.0.\n:::\n\n```javascript\n// Will become the application submenu on MacOS\nconst aboutSubmenu = await Submenu.new({\n  text: 'About',\n  items: [\n    await MenuItem.new({\n      id: 'quit',\n      text: 'Quit',\n      action: () => {\n        console.log('Quit pressed');\n      },\n    }),\n  ],\n});\n\nconst fileSubmenu = await Submenu.new({\n  text: 'File',\n  icon: 'folder', // Optional: Add an icon to the submenu\n  items: [\n    await MenuItem.new({\n      id: 'new',\n      text: 'New',\n      action: () => {\n        console.log('New clicked');\n      },\n    }),\n    await MenuItem.new({\n      id: 'open',\n      text: 'Open',\n      action: () => {\n        console.log('Open clicked');\n      },\n    }),\n    await MenuItem.new({\n      id: 'save_as',\n      text: 'Save As...',\n      action: () => {\n        console.log('Save As clicked');\n      },\n    }),\n  ],\n});\n\nconst editSubmenu = await Submenu.new({\n  text: 'Edit',\n  items: [\n    await MenuItem.new({\n      id: 'undo',\n      text: 'Undo',\n      action: () => {\n        console.log('Undo clicked');\n      },\n    }),\n    await MenuItem.new({\n      id: 'redo',\n      text: 'Redo',\n      action: () => {\n        console.log('Redo clicked');\n      },\n    }),\n  ],\n});\n\nconst menu = await Menu.new({\n  items: [aboutSubmenu, fileSubmenu, editSubmenu],\n});\n\nmenu.setAsAppMenu();\n\n// You can also update the submenu icon dynamically\nfileSubmenu.setIcon('document');\n// Or set a native icon (only one type applies per platform)\nfileSubmenu.setNativeIcon('NSFolder');\n```\n\n```rust\nuse tauri::{\n    image::Image,\n    menu::{CheckMenuItemBuilder, IconMenuItemBuilder, MenuBuilder, SubmenuBuilder},\n};\n\nfn main() {\n    tauri::Builder::default()\n        .setup(|app| {\n            let menu_image = Image::from_bytes(include_bytes!(\"../icons/menu.png\")).unwrap();\n            let file_menu = SubmenuBuilder::new(app, \"File\")\n                .submenu_icon(menu_image)) // Optional: Add an icon to the submenu\n                .text(\"open\", \"Open\")\n                .text(\"quit\", \"Quit\")\n                .build()?;\n\n            let lang_str = \"en\";\n            let check_sub_item_1 = CheckMenuItemBuilder::new(\"English\")\n                .id(\"en\")\n                .checked(lang_str == \"en\")\n                .build(app)?;\n\n            let check_sub_item_2 = CheckMenuItemBuilder::new(\"Chinese\")\n                .id(\"en\")\n                .checked(lang_str == \"en\")\n                .enabled(false)\n                .build(app)?;\n\n            // Load icon from path\n            let icon_image = Image::from_bytes(include_bytes!(\"../icons/icon.png\")).unwrap();\n\n            let icon_item = IconMenuItemBuilder::new(\"icon\")\n                .icon(icon_image)\n                .build(app)?;\n\n            let other_item = SubmenuBuilder::new(app, \"language\")\n                .item(&check_sub_item_1)\n                .item(&check_sub_item_2)\n                .build()?;\n\n            let menu = MenuBuilder::new(app)\n                .items(&[&file_menu, &other_item, &icon_item])\n                .build()?;\n\n            app.set_menu(menu)?;\n\n            let menu_image_update =\n                Image::from_bytes(include_bytes!(\"../icons/menu_update.png\")).unwrap();\n            // You can also update the submenu icon dynamically\n            file_menu.set_icon(Some(menu_image_update))?;\n            // Or set a native icon (only one type applies per platform)\n            file_menu.set_native_icon(Some(tauri::menu::NativeIcon::Folder))?;\n\n            Ok(())\n        })\n        .run(tauri::generate_context!());\n}\n```\n\nNote that you need to enable `image-ico` or `image-png` feature to use this API:\n\n```toml title=\"src-tauri/Cargo.toml\"\n[dependencies]\ntauri = { version = \"...\", features = [\"...\", \"image-png\"] }\n```","tokens_est":1088,"tags":["windowing","assets","configuration","lang:javascript","lang:rust","lang:toml","has_code"],"src_path":"window-menu.mdx","anchors":["creating-a-multi-level-menu"],"code_languages":["javascript","rust","toml"],"version":"2.8","permissions":[],"config_keys":["app.set_menu"],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.118Z"}
{"id":"window-menu#creating-predefined-menu","doc_id":"window-menu","section_title":"Creating predefined menu","doc_title":"Window Menu","hierarchy":["Window Menu","Creating predefined menu"],"content":"## Creating predefined menu\n\nTo use built-in (native) menu items that has predefined behavior by the operating system or Tauri:\n\n```javascript\nconst copy = await PredefinedMenuItem.new({\n  text: 'copy-text',\n  item: 'Copy',\n});\n\nconst separator = await PredefinedMenuItem.new({\n  text: 'separator-text',\n  item: 'Separator',\n});\n\nconst undo = await PredefinedMenuItem.new({\n  text: 'undo-text',\n  item: 'Undo',\n});\n\nconst redo = await PredefinedMenuItem.new({\n  text: 'redo-text',\n  item: 'Redo',\n});\n\nconst cut = await PredefinedMenuItem.new({\n  text: 'cut-text',\n  item: 'Cut',\n});\n\nconst paste = await PredefinedMenuItem.new({\n  text: 'paste-text',\n  item: 'Paste',\n});\n\nconst select_all = await PredefinedMenuItem.new({\n  text: 'select_all-text',\n  item: 'SelectAll',\n});\n\nconst menu = await Menu.new({\n  items: [copy, separator, undo, redo, cut, paste, select_all],\n});\n\nawait menu.setAsAppMenu();\n```\n\n```rust\n#![cfg_attr(not(debug_assertions), windows_subsystem = \"windows\")]\nuse tauri::menu::{MenuBuilder, PredefinedMenuItem};\n\nfn main() {\n  tauri::Builder::default()\n        .setup(|app| {\n      let menu = MenuBuilder::new(app)\n                .copy()\n                .separator()\n                .undo()\n                .redo()\n                .cut()\n                .paste()\n                .select_all()\n                .item(&PredefinedMenuItem::copy(app, Some(\"custom text\"))?)\n                .build()?;\n            app.set_menu(menu)?;\n\n            Ok(())\n        })\n}\n```\n\nFor more preset capabilities, please refer to the documentation [`PredefinedMenuItem`].\n\n[TIP]\n\nThe menu builder has dedicated methods to add each predefined menu item so you can call `.copy()` instead of `.item(&PredefinedMenuItem::copy(app, None)?)`.\n:::","tokens_est":437,"tags":["permissions","windowing","debugging","lang:javascript","lang:rust","has_code"],"src_path":"window-menu.mdx","anchors":["creating-predefined-menu"],"code_languages":["javascript","rust"],"version":null,"permissions":[],"config_keys":["app.set_menu"],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.118Z"}
{"id":"window-menu#change-menu-status-part-1","doc_id":"window-menu","section_title":"Change menu status","doc_title":"Window Menu","hierarchy":["Window Menu","Change menu status"],"content":"## Change menu status\n\nIf you want to change the status of the menu, such as text, icon, or check status, you can `set_menu` again:\n\n```javascript\nimport {\n  Menu,\n  CheckMenuItem,\n  IconMenuItem,\n  MenuItem,\n} from '@tauri-apps/api/menu';\nlet currentLanguage = 'en';\n\nconst check_sub_item_en = await CheckMenuItem.new({\n  id: 'en',\n  text: 'English',\n  checked: currentLanguage === 'en',\n  action: () => {\n    currentLanguage = 'en';\n    check_sub_item_en.setChecked(currentLanguage === 'en');\n    check_sub_item_zh.setChecked(currentLanguage === 'cn');\n    console.log('English pressed');\n  },\n});\n\nconst check_sub_item_zh = await CheckMenuItem.new({\n  id: 'zh',\n  text: 'Chinese',\n  checked: currentLanguage === 'zh',\n  action: () => {\n    currentLanguage = 'zh';\n    check_sub_item_en.setChecked(currentLanguage === 'en');\n    check_sub_item_zh.setChecked(currentLanguage === 'zh');\n    check_sub_item_zh.setAccelerator('Ctrl+L');\n    console.log('Chinese pressed');\n  },\n});\n\n// Load icon from path\nconst icon = await Image.fromPath('../src/icon.png');\nconst icon2 = await Image.fromPath('../src/icon-2.png');\n\nconst icon_item = await IconMenuItem.new({\n  id: 'icon_item',\n  text: 'Icon Item',\n  icon: icon,\n  action: () => {\n    icon_item.setIcon(icon2);\n    console.log('icon pressed');\n  },\n});\n\nconst text_item = await MenuItem.new({\n  id: 'text_item',\n  text: 'Text Item',\n  action: () => {\n    text_item.setText('Text Item Changed');\n    console.log('text pressed');\n  },\n});\n\nconst menu = await Menu.new({\n  items: [\n    {\n      id: 'change menu',\n      text: 'change_menu',\n      items: [text_item, check_sub_item_en, check_sub_item_zh, icon_item],\n    },\n  ],\n});\n\nawait menu.setAsAppMenu();\n```","tokens_est":427,"tags":["windowing","assets","debugging","lang:javascript","lang:rust","has_code"],"src_path":"window-menu.mdx","anchors":["change-menu-status"],"code_languages":["javascript","rust"],"version":null,"permissions":[],"config_keys":["app.set_menu","app.on_menu_event"],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.118Z","part_index":1,"part_total":2}
{"id":"window-menu#change-menu-status-part-2","doc_id":"window-menu","section_title":"Change menu status","doc_title":"Window Menu","hierarchy":["Window Menu","Change menu status"],"content":"```rust\n// change-menu-status\n#![cfg_attr(not(debug_assertions), windows_subsystem = \"windows\")]\n\nuse tauri::{\n    image::Image,\n    menu::{CheckMenuItemBuilder, IconMenuItem, MenuBuilder, MenuItem, SubmenuBuilder},\n};\n\nfn main() {\n    tauri::Builder::default()\n        .setup(|app| {\n            let check_sub_item_en = CheckMenuItemBuilder::with_id(\"en\", \"EN\")\n                .checked(true)\n                .build(app)?;\n\n            let check_sub_item_zh = CheckMenuItemBuilder::with_id(\"zh\", \"ZH\")\n                .checked(false)\n                .build(app)?;\n\n            let text_menu = MenuItem::with_id(\n                app,\n                \"change_text\",\n                &\"Change menu\".to_string(),\n                true,\n                Some(\"Ctrl+Z\"),\n            )\n            .unwrap();\n\n            let icon_menu = IconMenuItem::with_id(\n                app,\n                \"change_icon\",\n                &\"Change icon menu\",\n                true,\n                Some(Image::from_bytes(include_bytes!(\"../icons/icon.png\")).unwrap()),\n                Some(\"Ctrl+F\"),\n            )\n            .unwrap();\n\n            let menu_item = SubmenuBuilder::new(app, \"Change menu\")\n                .item(&text_menu)\n                .item(&icon_menu)\n                .items(&[&check_sub_item_en, &check_sub_item_zh])\n                .build()?;\n            let menu = MenuBuilder::new(app).items(&[&menu_item]).build()?;\n            app.set_menu(menu)?;\n            app.on_menu_event(move |_app_handle: &tauri::AppHandle, event| {\n                match event.id().0.as_str() {\n                    \"change_text\" => {\n                        text_menu\n                            .set_text(\"changed menu text\")\n                            .expect(\"Change text error\");\n\n                        text_menu\n                            .set_text(\"changed menu text\")\n                            .expect(\"Change text error\");\n                    }\n                    \"change_icon\" => {\n                        icon_menu\n                            .set_text(\"changed menu-icon text\")\n                            .expect(\"Change text error\");\n                        icon_menu\n                            .set_icon(Some(\n                                Image::from_bytes(include_bytes!(\"../icons/icon-2.png\")).unwrap(),\n                            ))\n                            .expect(\"Change icon error\");\n                    }\n\n                    \"en\" | \"zh\" => {\n                        check_sub_item_en\n                            .set_checked(event.id().0.as_str() == \"en\")\n                            .expect(\"Change check error\");\n                        check_sub_item_zh\n                            .set_checked(event.id().0.as_str() == \"zh\")\n                            .expect(\"Change check error\");\n                        check_sub_item_zh.set_accelerator(Some(\"Ctrl+L\"))\n                        .expect(\"Change accelerator error\");\n                    }\n                    _ => {\n                        println!(\"unexpected menu event\");\n                    }\n                }\n            });\n\n            Ok(())\n        })\n        .run(tauri::generate_context!())\n        .expect(\"error while running tauri application\");\n}\n\n```\n\n[`PredefinedMenuItem`]: https://docs.rs/tauri/latest/tauri/menu/struct.PredefinedMenuItem.html\n[`Menu.new`]: https://v2.tauri.app/reference/javascript/api/namespacemenu/#new-2","tokens_est":856,"tags":["windowing","assets","debugging","lang:javascript","lang:rust","has_code"],"src_path":"window-menu.mdx","anchors":["change-menu-status"],"code_languages":["javascript","rust"],"version":null,"permissions":[],"config_keys":["app.set_menu","app.on_menu_event"],"commands":[],"plugins":[],"updated_at":"2025-09-01T10:05:53.118Z","part_index":2,"part_total":2}
{"id":"writing-plugin-permissions#introduction-part-1","doc_id":"writing-plugin-permissions","section_title":"Introduction","doc_title":"Writing Plugin Permissions","hierarchy":["Writing Plugin Permissions"],"content":"import ShowSolution from '@components/ShowSolution.astro'\nThe goal of this exercise is to get a better understanding on how\nplugin permissions can be created when writing your own plugin.\n\nAt the end you will have the ability to create simple permissions for\nyour plugins.\nYou will have an example Tauri plugin where permissions are partially autogenerated\nand hand crafted.\n\n1. ### Create a Tauri Plugin\n\n    In our example we will facilitate the Tauri [`cli`](/reference/cli/)\n    to bootstrap a Tauri plugin source code structure.\n    Make sure you have installed all [Prerequisites](/start/prerequisites/)\n    and verify you have the Tauri CLI in the correct version\n    by running `cargo tauri info`.\n\n    The output should indicate the `tauri-cli` version is `2.x`.\n    We will proceed in this step-by-step explanation with `pnpm` but you can choose another\n    package manager and replace it in the commands accordingly.\n\n    Once you have a recent version installed you can go\n    ahead and create the plugin using the Tauri CLI.\n\n    \n    ```sh\n    mkdir -p tauri-learning\n    cd tauri-learning\n    cargo tauri plugin new test\n    cd tauri-plugin-test\n    pnpm install\n    pnpm build\n    cargo build\n    ```\n    \n\n2. ### Create a New Command\n\n    To showcase something practical and simple let us assume\n    our command writes user input to a file in our temporary folder while\n    adding some custom header to the file.\n\n    Let's name our command `write_custom_file`, implement it in `src/commands.rs`\n    and add it to our plugin builder to be exposed to the frontend.\n\n    Tauri's core utils will autogenerate `allow` and `deny` permissions for this\n    command, so we do not need to care about this.\n\n    \n\n    The command implementation:\n\n    ```rust title=\"src/commands.rs\" ins={15-22} ins=\", Manager\"\n    use tauri::{AppHandle, command, Runtime};\n\n    use crate::models::*;\n    use crate::Result;\n    use crate::TestExt;\n\n    #[command]\n    pub(crate) async fn ping<R: Runtime>(\n        app: AppHandle<R>,\n        payload: PingRequest,\n    ) -> Result<PingResponse> {\n        app.test1().ping(payload)\n    }\n\n    #[command]\n    pub(crate) async fn write_custom_file<R: Runtime>(\n        user_input: String,\n        app: AppHandle<R>,\n    ) -> Result<String> {\n        std::fs::write(app.path().temp_dir().unwrap(), user_input)?;\n        Ok(\"success\".to_string())\n    }\n   \n    ```\n\n    Auto-Generate inbuilt permissions for your new command:\n\n    ```rust title=\"src/build.rs\" ins=\"\\\"write_custom_file\\\"\"\n    const COMMANDS: &[&str] = &[\"ping\", \"write_custom_file\"];\n    ```\n\n    These inbuilt permissions will be automatically generated by the Tauri build\n    system and will be visible in the `permissions/autogenerated/commands` folder.\n    By default an `enable-<command>` and `deny-<command>` permission will\n    be created.\n\n    \n3. ### Expose the New Command\n\n    The previous step was to write the actual command implementation.\n    Next we want to expose it to the frontend so it can be consumed.\n\n    \n \n    Configure the Tauri builder to generate the invoke handler to pass frontend\n    IPC requests to the newly implemented command:\n\n    ```rust title=\"src/lib.rs\"  ins=\"commands::write_custom_file,\"\n    pub fn init<R: Runtime>() -> TauriPlugin<R> {\n    Builder::new(\"test\")\n        .invoke_handler(tauri::generate_handler![\n            commands::ping,\n            commands::write_custom_file,\n        ])\n        .setup(|app, api| {\n            #[cfg(mobile)]\n            let test = mobile::init(app, api)?;\n            #[cfg(desktop)]\n            let test = desktop::init(app, api)?;\n            app.manage(test);\n\n            // manage state so it is accessible by the commands\n            app.manage(MyState::default());\n            Ok(())\n        })\n        .build()\n    }\n    ```\n\n    Expose the new command in the frontend module.\n\n    This step is essential for the example application to successfully\n    import the frontend module. This is for convenience and has\n    no security impact, as the command handler is already generated\n    and the command can be manually invoked from the frontend.\n\n    ```ts title=\"guest-js/index.ts\" ins={11-13}\n    import { invoke } from '@tauri-apps/api/core'\n\n    export async function ping(value: string): Promise<string | null> {\n      return await invoke<{value?: string}>('plugin:test|ping', {\n        payload: {\n          value,\n        },\n      }).then((r) => (r.value ? r.value : null));\n    }\n\n    export async function writeCustomFile(user_input: string): Promise<string> {\n     return await invoke('plugin:test|write_custom_file',{userInput: user_input});\n    }\n    ```\n\n    \n[TIP]\n\n    The invoke parameter needs to be CamelCase. In this example it is `userInput` instead of `user_input`. \n    :::\n\n    Make sure your package is built:\n\n    ```\n    pnpm build\n    ```\n\n    \n\n4. ### Define Default Plugin Permissions\n\n    As our plugin should expose the `write_custom_file` command by default\n    we should add this to our `default.toml` permission.\n\n    \n    Add this to our default permission set to allow the new command\n    we just exposed.\n\n    ```toml title=\"permissions/default.toml\" ins=\", \\\"allow-write-custom-file\\\"\"\n    \"$schema\" = \"schemas/schema.json\"\n    [default]\n    description = \"Default permissions for the plugin\"\n    permissions = [\"allow-ping\", \"allow-write-custom-file\"]\n    ```\n    \n\n5. ### Invoke Test Command from Example Application\n    \n    The created plugin directory structure contains an `examples/tauri-app` folder,\n    which has a ready to use Tauri application to test out the plugin.\n\n    Since we added a new command we need to slightly modify the frontend to\n    invoke our new command instead.\n\n    \n    ```svelte title=\"src/App.svelte\" del={11-13,42-45} ins={14-16,45-49}\n    <script>\n      import Greet from './lib/Greet.svelte'\n      import { ping, writeCustomFile } from 'tauri-plugin-test-api'\n\n      let response = ''\n\n      function updateResponse(returnValue) {\n        response += `[${new Date().toLocaleTimeString()}]` + (typeof returnValue === 'string' ? returnValue : JSON.stringify(returnValue)) + '<br>'\n      }\n\n      function _ping() {\n        ping(\"Pong!\").then(updateResponse).catch(updateResponse)\n      }\n      function _writeCustomFile() {\n        writeCustomFile(\"HELLO FROM TAURI PLUGIN\").then(updateResponse).catch(updateResponse)\n      }\n    </script>\n\n    <main class=\"container\">\n      <h1>Welcome to Tauri!</h1>\n\n      <div class=\"row\">\n        <a href=\"https://vitejs.dev\" target=\"_blank\">\n          <img src=\"/vite.svg\" class=\"logo vite\" alt=\"Vite Logo\" />\n        </a>\n        <a href=\"https://tauri.app\" target=\"_blank\">\n          <img src=\"/tauri.svg\" class=\"logo tauri\" alt=\"Tauri Logo\" />\n        </a>\n        <a href=\"https://svelte.dev\" target=\"_blank\">\n          <img src=\"/svelte.svg\" class=\"logo svelte\" alt=\"Svelte Logo\" />\n        </a>\n      </div>\n\n      <p>\n        Click on the Tauri, Vite, and Svelte logos to learn more.\n      </p>\n\n      <div class=\"row\">\n        <Greet />\n      </div>\n\n      <div>\n        <button on:click=\"{_ping}\">Ping</button>\n        <div>{@html response}</div>\n      </div>\n      <div>\n        <button on:click=\"{_writeCustomFile}\">Write</button>\n        <div>{@html response}</div>\n      </div>\n\n    </main>\n\n    <style>\n      .logo.vite:hover {\n        filter: drop-shadow(0 0 2em #747bff);\n      }\n\n      .logo.svelte:hover {\n        filter: drop-shadow(0 0 2em #ff3e00);\n      }\n    </style>\n    ```\n\n    Running this and pressing the \"Write\" button you should be greeted with this:\n\n    ```\n    success\n    ```\n\n    And you should find a `test.txt` file in your temporary folder containing a message\n    from our new implemented plugin command. \n    🥳","tokens_est":1938,"tags":["commands","permissions","state","tooling","plugins","lang:sh","lang:rust","lang:ts","lang:toml","lang:svelte","has_code"],"src_path":"writing-plugin-permissions.mdx","anchors":["introduction"],"code_languages":["sh","rust","ts","toml","svelte"],"version":null,"permissions":[],"config_keys":["app.test1","app.path","build.rs","app.manage"],"commands":["plugin:test|write_custom_file"],"plugins":["fs","cli"],"updated_at":"2025-09-01T10:05:53.119Z","raw_frontmatter":"title: Writing Plugin Permissions\r\nsidebar:\r\n  order: 11\r\ni18nReady: true\r","part_index":1,"part_total":1}
